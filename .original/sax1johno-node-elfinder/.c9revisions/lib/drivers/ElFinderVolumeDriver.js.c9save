{"ts":1364833044495,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1364833298512,"patch":[[{"diffs":[[1,"var ElFinderVolumeDriver = function() {\r\n    /**\r\n\t * Flag - volume \"mounted\" and available\r\n\t *\r\n\t * @var bool\r\n\t **/    \r\n    this.mounted = false;\r\n    \r\n    this.root = '';\r\n    \r\n    this.rootName = '';\r\n    \r\n    this.startPath = '';\r\n}\r\n\r\n\tprotected $mounted = false;\r\n\r\n\t/**\r\n\t * Root directory path\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $root = '';\r\n\r\n\t/**\r\n\t * Root basename | alias\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $rootName = '';\r\n\r\n\t/**\r\n\t * Default directory to open\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $startPath = '';\r\n\r\n\t/**\r\n\t * Base URL\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $URL = '';\r\n\r\n\t/**\r\n\t * Thumbnails dir path\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $tmbPath = '';\r\n\r\n\t/**\r\n\t * Is thumbnails dir writable\r\n\t *\r\n\t * @var bool\r\n\t **/\r\n\tprotected $tmbPathWritable = false;\r\n\r\n\t/**\r\n\t * Thumbnails base URL\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $tmbURL = '';\r\n\r\n\t/**\r\n\t * Thumbnails size in px\r\n\t *\r\n\t * @var int\r\n\t **/\r\n\tprotected $tmbSize = 48;\r\n\r\n\t/**\r\n\t * Image manipulation lib name\r\n\t * auto|imagick|mogtify|gd\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $imgLib = 'auto';\r\n\r\n\t/**\r\n\t * Library to crypt files name\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $cryptLib = '';\r\n\r\n\t/**\r\n\t * Archivers config\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $archivers = array(\r\n\t\t'create'  => array(),\r\n\t\t'extract' => array()\r\n\t);\r\n\r\n\t/**\r\n\t * How many subdirs levels return for tree\r\n\t *\r\n\t * @var int\r\n\t **/\r\n\tprotected $treeDeep = 1;\r\n\r\n\t/**\r\n\t * Errors from last failed action\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $error = array();\r\n\r\n\t/**\r\n\t * Today 24:00 timestamp\r\n\t *\r\n\t * @var int\r\n\t **/\r\n\tprotected $today = 0;\r\n\r\n\t/**\r\n\t * Yesterday 24:00 timestamp\r\n\t *\r\n\t * @var int\r\n\t **/\r\n\tprotected $yesterday = 0;\r\n\r\n\t/**\r\n\t * Object configuration\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $options = array(\r\n\t\t'id'              => '',\r\n\t\t// root directory path\r\n\t\t'path'            => '',\r\n\t\t// open this path on initial request instead of root path\r\n\t\t'startPath'       => '',\r\n\t\t// how many subdirs levels return per request\r\n\t\t'treeDeep'        => 1,\r\n\t\t// root url, not set to disable sending URL to client (replacement for old \"fileURL\" option)\r\n\t\t'URL'             => '',\r\n\t\t// directory separator. required by client to show paths correctly\r\n\t\t'separator'       => DIRECTORY_SEPARATOR,\r\n\t\t// library to crypt/uncrypt files names (not implemented)\r\n\t\t'cryptLib'        => '',\r\n\t\t// how to detect files mimetypes. (auto/internal/finfo/mime_content_type)\r\n\t\t'mimeDetect'      => 'auto',\r\n\t\t// mime.types file path (for mimeDetect==internal)\r\n\t\t'mimefile'        => '',\r\n\t\t// directory for thumbnails\r\n\t\t'tmbPath'         => '.tmb',\r\n\t\t// mode to create thumbnails dir\r\n\t\t'tmbPathMode'     => 0777,\r\n\t\t// thumbnails dir URL. Set it if store thumbnails outside root directory\r\n\t\t'tmbURL'          => '',\r\n\t\t// thumbnails size (px)\r\n\t\t'tmbSize'         => 48,\r\n\t\t// thumbnails crop (true - crop, false - scale image to fit thumbnail size)\r\n\t\t'tmbCrop'         => true,\r\n\t\t// thumbnails background color (hex #rrggbb or 'transparent')\r\n\t\t'tmbBgColor'      => '#ffffff',\r\n\t\t// image manipulations library\r\n\t\t'imgLib'          => 'auto',\r\n\t\t// on paste file -  if true - old file will be replaced with new one, if false new file get name - original_name-number.ext\r\n\t\t'copyOverwrite'   => true,\r\n\t\t// if true - join new and old directories content on paste\r\n\t\t'copyJoin'        => true,\r\n\t\t// on upload -  if true - old file will be replaced with new one, if false new file get name - original_name-number.ext\r\n\t\t'uploadOverwrite' => true,\r\n\t\t// mimetypes allowed to upload\r\n\t\t'uploadAllow'     => array(),\r\n\t\t// mimetypes not allowed to upload\r\n\t\t'uploadDeny'      => array(),\r\n\t\t// order to proccess uploadAllow and uploadDeny options\r\n\t\t'uploadOrder'     => array('deny', 'allow'),\r\n\t\t// maximum upload file size. NOTE - this is size for every uploaded files\r\n\t\t'uploadMaxSize'   => 0,\r\n\t\t// files dates format\r\n\t\t'dateFormat'      => 'j M Y H:i',\r\n\t\t// files time format\r\n\t\t'timeFormat'      => 'H:i',\r\n\t\t// if true - every folder will be check for children folders, otherwise all folders will be marked as having subfolders\r\n\t\t'checkSubfolders' => true,\r\n\t\t// allow to copy from this volume to other ones?\r\n\t\t'copyFrom'        => true,\r\n\t\t// allow to copy from other volumes to this one?\r\n\t\t'copyTo'          => true,\r\n\t\t// list of commands disabled on this root\r\n\t\t'disabled'        => array(),\r\n\t\t// regexp or function name to validate new file name\r\n\t\t'acceptedName'    => '/^[^\\.].*/', //<-- DONT touch this! Use constructor options to overwrite it!\r\n\t\t// function/class method to control files permissions\r\n\t\t'accessControl'   => null,\r\n\t\t// some data required by access control\r\n\t\t'accessControlData' => null,\r\n\t\t// default permissions. not set hidden/locked here - take no effect\r\n\t\t'defaults'     => array(\r\n\t\t\t'read'   => true,\r\n\t\t\t'write'  => true\r\n\t\t),\r\n\t\t// files attributes\r\n\t\t'attributes'   => array(),\r\n\t\t// Allowed archive's mimetypes to create. Leave empty for all available types.\r\n\t\t'archiveMimes' => array(),\r\n\t\t// Manual config for archivers. See example below. Leave empty for auto detect\r\n\t\t'archivers'    => array(),\r\n\t\t// required to fix bug on macos\r\n\t\t'utf8fix'      => false,\r\n\t\t //                           й                 ё              Й               Ё              Ø         Å\r\n\t\t'utf8patterns' => array(\"\\u0438\\u0306\", \"\\u0435\\u0308\", \"\\u0418\\u0306\", \"\\u0415\\u0308\", \"\\u00d8A\", \"\\u030a\"),\r\n\t\t'utf8replace'  => array(\"\\u0439\",        \"\\u0451\",       \"\\u0419\",       \"\\u0401\",       \"\\u00d8\", \"\\u00c5\")\r\n\t);\r\n\r\n\t/**\r\n\t * Defaults permissions\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $defaults = array(\r\n\t\t'read'   => true,\r\n\t\t'write'  => true,\r\n\t\t'locked' => false,\r\n\t\t'hidden' => false\r\n\t);\r\n\r\n\t/**\r\n\t * Access control function/class\r\n\t *\r\n\t * @var mixed\r\n\t **/\r\n\tprotected $attributes = array();\r\n\r\n\t/**\r\n\t * Access control function/class\r\n\t *\r\n\t * @var mixed\r\n\t **/\r\n\tprotected $access = null;\r\n\r\n\t/**\r\n\t * Mime types allowed to upload\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $uploadAllow = array();\r\n\r\n\t/**\r\n\t * Mime types denied to upload\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $uploadDeny = array();\r\n\r\n\t/**\r\n\t * Order to validate uploadAllow and uploadDeny\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $uploadOrder = array();\r\n\r\n\t/**\r\n\t * Maximum allowed upload file size.\r\n\t * Set as number or string with unit - \"10M\", \"500K\", \"1G\"\r\n\t *\r\n\t * @var int|string\r\n\t **/\r\n\tprotected $uploadMaxSize = 0;\r\n\r\n\t/**\r\n\t * Mimetype detect method\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $mimeDetect = 'auto';\r\n\r\n\t/**\r\n\t * Flag - mimetypes from externail file was loaded\r\n\t *\r\n\t * @var bool\r\n\t **/\r\n\tprivate static $mimetypesLoaded = false;\r\n\r\n\t/**\r\n\t * Finfo object for mimeDetect == 'finfo'\r\n\t *\r\n\t * @var object\r\n\t **/\r\n\tprotected $finfo = null;\r\n\r\n\t/**\r\n\t * List of disabled client's commands\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $diabled = array();\r\n\r\n\t/**\r\n\t * default extensions/mimetypes for mimeDetect == 'internal' \r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected static $mimetypes = array(\r\n\t\t// applications\r\n\t\t'ai'    => 'application/postscript',\r\n\t\t'eps'   => 'application/postscript',\r\n\t\t'exe'   => 'application/x-executable',\r\n\t\t'doc'   => 'application/vnd.ms-word',\r\n\t\t'xls'   => 'application/vnd.ms-excel',\r\n\t\t'ppt'   => 'application/vnd.ms-powerpoint',\r\n\t\t'pps'   => 'application/vnd.ms-powerpoint',\r\n\t\t'pdf'   => 'application/pdf',\r\n\t\t'xml'   => 'application/xml',\r\n\t\t'swf'   => 'application/x-shockwave-flash',\r\n\t\t'torrent' => 'application/x-bittorrent',\r\n\t\t'jar'   => 'application/x-jar',\r\n\t\t// open office (finfo detect as application/zip)\r\n\t\t'odt'   => 'application/vnd.oasis.opendocument.text',\r\n\t\t'ott'   => 'application/vnd.oasis.opendocument.text-template',\r\n\t\t'oth'   => 'application/vnd.oasis.opendocument.text-web',\r\n\t\t'odm'   => 'application/vnd.oasis.opendocument.text-master',\r\n\t\t'odg'   => 'application/vnd.oasis.opendocument.graphics',\r\n\t\t'otg'   => 'application/vnd.oasis.opendocument.graphics-template',\r\n\t\t'odp'   => 'application/vnd.oasis.opendocument.presentation',\r\n\t\t'otp'   => 'application/vnd.oasis.opendocument.presentation-template',\r\n\t\t'ods'   => 'application/vnd.oasis.opendocument.spreadsheet',\r\n\t\t'ots'   => 'application/vnd.oasis.opendocument.spreadsheet-template',\r\n\t\t'odc'   => 'application/vnd.oasis.opendocument.chart',\r\n\t\t'odf'   => 'application/vnd.oasis.opendocument.formula',\r\n\t\t'odb'   => 'application/vnd.oasis.opendocument.database',\r\n\t\t'odi'   => 'application/vnd.oasis.opendocument.image',\r\n\t\t'oxt'   => 'application/vnd.openofficeorg.extension',\r\n\t\t// MS office 2007 (finfo detect as application/zip)\r\n\t\t'docx'  => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n\t\t'docm'  => 'application/vnd.ms-word.document.macroEnabled.12',\r\n\t\t'dotx'  => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\r\n\t\t'dotm'  => 'application/vnd.ms-word.template.macroEnabled.12',\r\n\t\t'xlsx'  => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n\t\t'xlsm'  => 'application/vnd.ms-excel.sheet.macroEnabled.12',\r\n\t\t'xltx'  => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\r\n\t\t'xltm'  => 'application/vnd.ms-excel.template.macroEnabled.12',\r\n\t\t'xlsb'  => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12',\r\n\t\t'xlam'  => 'application/vnd.ms-excel.addin.macroEnabled.12',\r\n\t\t'pptx'  => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n\t\t'pptm'  => 'application/vnd.ms-powerpoint.presentation.macroEnabled.12',\r\n\t\t'ppsx'  => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',\r\n\t\t'ppsm'  => 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',\r\n\t\t'potx'  => 'application/vnd.openxmlformats-officedocument.presentationml.template',\r\n\t\t'potm'  => 'application/vnd.ms-powerpoint.template.macroEnabled.12',\r\n\t\t'ppam'  => 'application/vnd.ms-powerpoint.addin.macroEnabled.12',\r\n\t\t'sldx'  => 'application/vnd.openxmlformats-officedocument.presentationml.slide',\r\n\t\t'sldm'  => 'application/vnd.ms-powerpoint.slide.macroEnabled.12',\r\n\t\t// archives\r\n\t\t'gz'    => 'application/x-gzip',\r\n\t\t'tgz'   => 'application/x-gzip',\r\n\t\t'bz'    => 'application/x-bzip2',\r\n\t\t'bz2'   => 'application/x-bzip2',\r\n\t\t'tbz'   => 'application/x-bzip2',\r\n\t\t'zip'   => 'application/zip',\r\n\t\t'rar'   => 'application/x-rar',\r\n\t\t'tar'   => 'application/x-tar',\r\n\t\t'7z'    => 'application/x-7z-compressed',\r\n\t\t// texts\r\n\t\t'txt'   => 'text/plain',\r\n\t\t'php'   => 'text/x-php',\r\n\t\t'html'  => 'text/html',\r\n\t\t'htm'   => 'text/html',\r\n\t\t'js'    => 'text/javascript',\r\n\t\t'css'   => 'text/css',\r\n\t\t'rtf'   => 'text/rtf',\r\n\t\t'rtfd'  => 'text/rtfd',\r\n\t\t'py'    => 'text/x-python',\r\n\t\t'java'  => 'text/x-java-source',\r\n\t\t'rb'    => 'text/x-ruby',\r\n\t\t'sh'    => 'text/x-shellscript',\r\n\t\t'pl'    => 'text/x-perl',\r\n\t\t'xml'   => 'text/xml',\r\n\t\t'sql'   => 'text/x-sql',\r\n\t\t'c'     => 'text/x-csrc',\r\n\t\t'h'     => 'text/x-chdr',\r\n\t\t'cpp'   => 'text/x-c++src',\r\n\t\t'hh'    => 'text/x-c++hdr',\r\n\t\t'log'   => 'text/plain',\r\n\t\t'csv'   => 'text/x-comma-separated-values',\r\n\t\t// images\r\n\t\t'bmp'   => 'image/x-ms-bmp',\r\n\t\t'jpg'   => 'image/jpeg',\r\n\t\t'jpeg'  => 'image/jpeg',\r\n\t\t'gif'   => 'image/gif',\r\n\t\t'png'   => 'image/png',\r\n\t\t'tif'   => 'image/tiff',\r\n\t\t'tiff'  => 'image/tiff',\r\n\t\t'tga'   => 'image/x-targa',\r\n\t\t'psd'   => 'image/vnd.adobe.photoshop',\r\n\t\t'ai'    => 'image/vnd.adobe.photoshop',\r\n\t\t'xbm'   => 'image/xbm',\r\n\t\t'pxm'   => 'image/pxm',\r\n\t\t//audio\r\n\t\t'mp3'   => 'audio/mpeg',\r\n\t\t'mid'   => 'audio/midi',\r\n\t\t'ogg'   => 'audio/ogg',\r\n\t\t'oga'   => 'audio/ogg',\r\n\t\t'm4a'   => 'audio/x-m4a',\r\n\t\t'wav'   => 'audio/wav',\r\n\t\t'wma'   => 'audio/x-ms-wma',\r\n\t\t// video\r\n\t\t'avi'   => 'video/x-msvideo',\r\n\t\t'dv'    => 'video/x-dv',\r\n\t\t'mp4'   => 'video/mp4',\r\n\t\t'mpeg'  => 'video/mpeg',\r\n\t\t'mpg'   => 'video/mpeg',\r\n\t\t'mov'   => 'video/quicktime',\r\n\t\t'wm'    => 'video/x-ms-wmv',\r\n\t\t'flv'   => 'video/x-flv',\r\n\t\t'mkv'   => 'video/x-matroska',\r\n\t\t'webm'  => 'video/webm',\r\n\t\t'ogv'   => 'video/ogg',\r\n\t\t'ogm'   => 'video/ogg'\r\n\t\t);\r\n\r\n\t/**\r\n\t * Directory separator - required by client\r\n\t *\r\n\t * @var string\r\n\t **/\r\n\tprotected $separator = DIRECTORY_SEPARATOR;\r\n\r\n\t/**\r\n\t * Mimetypes allowed to display\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $onlyMimes = array();\r\n\r\n\t/**\r\n\t * Store files moved or overwrited files info\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $removed = array();\r\n\r\n\t/**\r\n\t * Cache storage\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $cache = array();\r\n\r\n\t/**\r\n\t * Cache by folders\r\n\t *\r\n\t * @var array\r\n\t **/\r\n\tprotected $dirsCache = array();\r\n\r\n\t/*********************************************************************/\r\n\t/*                            INITIALIZATION                         */\r\n\t/*********************************************************************/\r\n\r\n\t/**\r\n\t * Prepare driver before mount volume.\r\n\t * Return true if volume is ready.\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function init() {\r\n\t\treturn true;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Configure after successfull mount.\r\n\t * By default set thumbnails path and image manipulation library.\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function configure() {\r\n\t\t// set thumbnails path\r\n\t\t$path = $this->options['tmbPath'];\r\n\t\tif ($path) {\r\n\t\t\tif (!file_exists($path)) {\r\n\t\t\t\tif (@mkdir($path)) {\r\n\t\t\t\t\tchmod($path, $this->options['tmbPathMode']);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$path = '';\r\n\t\t\t\t}\r\n\t\t\t} \r\n\r\n\t\t\tif (is_dir($path) && is_readable($path)) {\r\n\t\t\t\t$this->tmbPath = $path;\r\n\t\t\t\t$this->tmbPathWritable = is_writable($path);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// set image manipulation library\r\n\t\t$type = preg_match('/^(imagick|gd|auto)$/i', $this->options['imgLib'])\r\n\t\t\t? strtolower($this->options['imgLib'])\r\n\t\t\t: 'auto';\r\n\r\n\t\tif (($type == 'imagick' || $type == 'auto') && extension_loaded('imagick')) {\r\n\t\t\t$this->imgLib = 'imagick';\r\n\t\t} else {\r\n\t\t\t$this->imgLib = function_exists('gd_info') ? 'gd' : '';\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/*********************************************************************/\r\n\t/*                              PUBLIC API                           */\r\n\t/*********************************************************************/\r\n\r\n\t/**\r\n\t * Return driver id. Used as a part of volume id.\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function driverId() {\r\n\t\treturn $this->driverId;\r\n\t}\r\n\r\n\t/**\r\n\t * Return volume id\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function id() {\r\n\t\treturn $this->id;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug info for client\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function debug() {\r\n\t\treturn array(\r\n\t\t\t'id'         => $this->id(),\r\n\t\t\t'name'       => strtolower(substr(get_class($this), strlen('elfinderdriver'))),\r\n\t\t\t'mimeDetect' => $this->mimeDetect,\r\n\t\t\t'imgLib'     => $this->imgLib\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * \"Mount\" volume.\r\n\t * Return true if volume available for read or write, \r\n\t * false - otherwise\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tpublic function mount(array $opts) {\r\n\t\tif (!isset($opts['path']) || $opts['path'] === '') {\r\n\t\t\treturn $this->setError('Path undefined.');;\r\n\t\t}\r\n\r\n\t\t$this->options = array_merge($this->options, $opts);\r\n\t\t$this->id = $this->driverId.(!empty($this->options['id']) ? $this->options['id'] : elFinder::$volumesCnt++).'_';\r\n\t\t$this->root = $this->_normpath($this->options['path']);\r\n\t\t$this->separator = isset($this->options['separator']) ? $this->options['separator'] : DIRECTORY_SEPARATOR;\r\n\r\n\t\t// default file attribute\r\n\t\t$this->defaults = array(\r\n\t\t\t'read'    => isset($this->options['defaults']['read'])  ? !!$this->options['defaults']['read']  : true,\r\n\t\t\t'write'   => isset($this->options['defaults']['write']) ? !!$this->options['defaults']['write'] : true,\r\n\t\t\t'locked'  => false,\r\n\t\t\t'hidden'  => false\r\n\t\t);\r\n\r\n\t\t// root attributes\r\n\t\t$this->attributes[] = array(\r\n\t\t\t'pattern' => '~^'.preg_quote(DIRECTORY_SEPARATOR).'$~',\r\n\t\t\t'locked'  => true,\r\n\t\t\t'hidden'  => false\r\n\t\t);\r\n\t\t// set files attributes\r\n\t\tif (!empty($this->options['attributes']) && is_array($this->options['attributes'])) {\r\n\r\n\t\t\tforeach ($this->options['attributes'] as $a) {\r\n\t\t\t\t// attributes must contain pattern and at least one rule\r\n\t\t\t\tif (!empty($a['pattern']) || count($a) > 1) {\r\n\t\t\t\t\t$this->attributes[] = $a;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!empty($this->options['accessControl']) && is_callable($this->options['accessControl'])) {\r\n\t\t\t$this->access = $this->options['accessControl'];\r\n\t\t}\r\n\r\n\t\t$this->today     = mktime(0,0,0, date('m'), date('d'), date('Y'));\r\n\t\t$this->yesterday = $this->today-86400;\r\n\r\n\t\t// debug($this->attributes);\r\n\t\tif (!$this->init()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// check some options is arrays\r\n\t\t$this->uploadAllow = isset($this->options['uploadAllow']) && is_array($this->options['uploadAllow'])\r\n\t\t\t? $this->options['uploadAllow']\r\n\t\t\t: array();\r\n\r\n\t\t$this->uploadDeny = isset($this->options['uploadDeny']) && is_array($this->options['uploadDeny'])\r\n\t\t\t? $this->options['uploadDeny']\r\n\t\t\t: array();\r\n\r\n\t\tif (is_string($this->options['uploadOrder'])) { // telephat_mode on, compatibility with 1.x\r\n\t\t\t$parts = explode(',', isset($this->options['uploadOrder']) ? $this->options['uploadOrder'] : 'deny,allow');\r\n\t\t\t$this->uploadOrder = array(trim($parts[0]), trim($parts[1]));\r\n\t\t} else { // telephat_mode off\r\n\t\t\t$this->uploadOrder = $this->options['uploadOrder'];\r\n\t\t}\r\n\r\n\t\tif (!empty($this->options['uploadMaxSize'])) {\r\n\t\t\t$size = ''.$this->options['uploadMaxSize'];\r\n\t\t\t$unit = strtolower(substr($size, strlen($size) - 1));\r\n\t\t\t$n = 1;\r\n\t\t\tswitch ($unit) {\r\n\t\t\t\tcase 'k':\r\n\t\t\t\t\t$n = 1024;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'm':\r\n\t\t\t\t\t$n = 1048576;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'g':\r\n\t\t\t\t\t$n = 1073741824;\r\n\t\t\t}\r\n\t\t\t$this->uploadMaxSize = intval($size)*$n;\r\n\t\t}\r\n\r\n\t\t$this->disabled = isset($this->options['disabled']) && is_array($this->options['disabled'])\r\n\t\t\t? $this->options['disabled']\r\n\t\t\t: array();\r\n\r\n\t\t$this->cryptLib   = $this->options['cryptLib'];\r\n\t\t$this->mimeDetect = $this->options['mimeDetect'];\r\n\r\n\t\t// find available mimetype detect method\r\n\t\t$type = strtolower($this->options['mimeDetect']);\r\n\t\t$type = preg_match('/^(finfo|mime_content_type|internal|auto)$/i', $type) ? $type : 'auto';\r\n\t\t$regexp = '/text\\/x\\-(php|c\\+\\+)/';\r\n\r\n\t\tif (($type == 'finfo' || $type == 'auto') \r\n\t\t&& class_exists('finfo')) {\r\n\t\t\t$tmpFileInfo = @explode(';', @finfo_file(finfo_open(FILEINFO_MIME), __FILE__));\r\n\t\t} else {\r\n\t\t\t$tmpFileInfo = false;\r\n\t\t}\r\n\r\n\t\tif ($tmpFileInfo && preg_match($regexp, array_shift($tmpFileInfo))) {\r\n\t\t\t$type = 'finfo';\r\n\t\t\t$this->finfo = finfo_open(FILEINFO_MIME);\r\n\t\t} elseif (($type == 'mime_content_type' || $type == 'auto') \r\n\t\t&& function_exists('mime_content_type')\r\n\t\t&& preg_match($regexp, array_shift(explode(';', mime_content_type(__FILE__))))) {\r\n\t\t\t$type = 'mime_content_type';\r\n\t\t} else {\r\n\t\t\t$type = 'internal';\r\n\t\t}\r\n\t\t$this->mimeDetect = $type;\r\n\r\n\t\t// load mimes from external file for mimeDetect == 'internal'\r\n\t\t// based on Alexey Sukhotin idea and patch: http://elrte.org/redmine/issues/163\r\n\t\t// file must be in file directory or in parent one \r\n\t\tif ($this->mimeDetect == 'internal' && !self::$mimetypesLoaded) {\r\n\t\t\tself::$mimetypesLoaded = true;\r\n\t\t\t$this->mimeDetect = 'internal';\r\n\t\t\t$file = false;\r\n\t\t\tif (!empty($this->options['mimefile']) && file_exists($this->options['mimefile'])) {\r\n\t\t\t\t$file = $this->options['mimefile'];\r\n\t\t\t} elseif (file_exists(dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t\t$file = dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t\t} elseif (file_exists(dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t\t$file = dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t\t}\r\n\r\n\t\t\tif ($file && file_exists($file)) {\r\n\t\t\t\t$mimecf = file($file);\r\n\r\n\t\t\t\tforeach ($mimecf as $line_num => $line) {\r\n\t\t\t\t\tif (!preg_match('/^\\s*#/', $line)) {\r\n\t\t\t\t\t\t$mime = preg_split('/\\s+/', $line, -1, PREG_SPLIT_NO_EMPTY);\r\n\t\t\t\t\t\tfor ($i = 1, $size = count($mime); $i < $size ; $i++) {\r\n\t\t\t\t\t\t\tif (!isset(self::$mimetypes[$mime[$i]])) {\r\n\t\t\t\t\t\t\t\tself::$mimetypes[$mime[$i]] = $mime[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$this->rootName = empty($this->options['alias']) ? $this->_basename($this->root) : $this->options['alias'];\r\n\t\t$root = $this->stat($this->root);\r\n\r\n\t\tif (!$root) {\r\n\t\t\treturn $this->setError('Root folder does not exists.');\r\n\t\t}\r\n\t\tif (!$root['read'] && !$root['write']) {\r\n\t\t\treturn $this->setError('Root folder has not read and write permissions.');\r\n\t\t}\r\n\r\n\t\t// debug($root);\r\n\r\n\t\tif ($root['read']) {\r\n\t\t\t// check startPath - path to open by default instead of root\r\n\t\t\tif ($this->options['startPath']) {\r\n\t\t\t\t$start = $this->stat($this->options['startPath']);\r\n\t\t\t\tif (!empty($start)\r\n\t\t\t\t&& $start['mime'] == 'directory'\r\n\t\t\t\t&& $start['read']\r\n\t\t\t\t&& empty($start['hidden'])\r\n\t\t\t\t&& $this->_inpath($this->options['startPath'], $this->root)) {\r\n\t\t\t\t\t$this->startPath = $this->options['startPath'];\r\n\t\t\t\t\tif (substr($this->startPath, -1, 1) == $this->options['separator']) {\r\n\t\t\t\t\t\t$this->startPath = substr($this->startPath, 0, -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t$this->options['URL']     = '';\r\n\t\t\t$this->options['tmbURL']  = '';\r\n\t\t\t$this->options['tmbPath'] = '';\r\n\t\t\t// read only volume\r\n\t\t\tarray_unshift($this->attributes, array(\r\n\t\t\t\t'pattern' => '/.*/',\r\n\t\t\t\t'read'    => false\r\n\t\t\t));\r\n\t\t}\r\n\t\t$this->treeDeep = $this->options['treeDeep'] > 0 ? (int)$this->options['treeDeep'] : 1;\r\n\t\t$this->tmbSize  = $this->options['tmbSize'] > 0 ? (int)$this->options['tmbSize'] : 48;\r\n\t\t$this->URL      = $this->options['URL'];\r\n\t\tif ($this->URL && preg_match(\"|[^/?&=]$|\", $this->URL)) {\r\n\t\t\t$this->URL .= '/';\r\n\t\t}\r\n\r\n\t\t$this->tmbURL   = !empty($this->options['tmbURL']) ? $this->options['tmbURL'] : '';\r\n\t\tif ($this->tmbURL && preg_match(\"|[^/?&=]$|\", $this->tmbURL)) {\r\n\t\t\t$this->tmbURL .= '/';\r\n\t\t}\r\n\r\n\t\t$this->nameValidator = is_string($this->options['acceptedName']) && !empty($this->options['acceptedName']) \r\n\t\t\t? $this->options['acceptedName']\r\n\t\t\t: '';\r\n\r\n\t\t$this->_checkArchivers();\r\n\t\t// manual control archive types to create\r\n\t\tif (!empty($this->options['archiveMimes']) && is_array($this->options['archiveMimes'])) {\r\n\t\t\tforeach ($this->archivers['create'] as $mime => $v) {\r\n\t\t\t\tif (!in_array($mime, $this->options['archiveMimes'])) {\r\n\t\t\t\t\tunset($this->archivers['create'][$mime]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// manualy add archivers\r\n\t\tif (!empty($this->options['archivers']['create']) && is_array($this->options['archivers']['create'])) {\r\n\t\t\tforeach ($this->options['archivers']['create'] as $mime => $conf) {\r\n\t\t\t\tif (strpos($mime, 'application/') === 0 \r\n\t\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t\t&& isset($conf['argc']) \r\n\t\t\t\t&& !empty($conf['ext'])\r\n\t\t\t\t&& !isset($this->archivers['create'][$mime])) {\r\n\t\t\t\t\t$this->archivers['create'][$mime] = $conf;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!empty($this->options['archivers']['extract']) && is_array($this->options['archivers']['extract'])) {\r\n\t\t\tforeach ($this->options['archivers']['extract'] as $mime => $conf) {\r\n\t\t\t\tif (strpos($mime, 'application/') === 0\r\n\t\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t\t&& isset($conf['argc']) \r\n\t\t\t\t&& !empty($conf['ext'])\r\n\t\t\t\t&& !isset($this->archivers['extract'][$mime])) {\r\n\t\t\t\t\t$this->archivers['extract'][$mime] = $conf;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$this->configure();\r\n\t\t// echo $this->uploadMaxSize;\r\n\t\t// echo $this->options['uploadMaxSize'];\r\n\t\treturn $this->mounted = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Some \"unmount\" stuffs - may be required by virtual fs\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function umount() {\r\n\t}\r\n\r\n\t/**\r\n\t * Return error message from last failed action\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function error() {\r\n\t\treturn $this->error;\r\n\t}\r\n\r\n\t/**\r\n\t * Set mimetypes allowed to display to client\r\n\t *\r\n\t * @param  array  $mimes\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function setMimesFilter($mimes) {\r\n\t\tif (is_array($mimes)) {\r\n\t\t\t$this->onlyMimes = $mimes;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return root folder hash\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function root() {\r\n\t\treturn $this->encode($this->root);\r\n\t}\r\n\r\n\t/**\r\n\t * Return root or startPath hash\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function defaultPath() {\r\n\t\treturn $this->encode($this->startPath ? $this->startPath : $this->root);\r\n\t}\r\n\r\n\t/**\r\n\t * Return volume options required by client:\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function options($hash) {\r\n\t\treturn array(\r\n\t\t\t'path'          => $this->_path($this->decode($hash)),\r\n\t\t\t'url'           => $this->URL,\r\n\t\t\t'tmbUrl'        => $this->tmbURL,\r\n\t\t\t'disabled'      => $this->disabled,\r\n\t\t\t'separator'     => $this->separator,\r\n\t\t\t'copyOverwrite' => intval($this->options['copyOverwrite']),\r\n\t\t\t'archivers'     => array(\r\n\t\t\t\t// 'create'  => array_keys($this->archivers['create']),\r\n\t\t\t\t// 'extract' => array_keys($this->archivers['extract']),\r\n\t\t\t\t'create'  => is_array($this->archivers['create'])  ? array_keys($this->archivers['create'])  : array(),\r\n\t\t\t\t'extract' => is_array($this->archivers['extract']) ? array_keys($this->archivers['extract']) : array()\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if command disabled in options\r\n\t *\r\n\t * @param  string  $cmd  command name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function commandDisabled($cmd) {\r\n\t\treturn in_array($cmd, $this->disabled);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if mime is required mimes list\r\n\t *\r\n\t * @param  string     $mime   mime type to check\r\n\t * @param  array      $mimes  allowed mime types list or not set to use client mimes list\r\n\t * @param  bool|null  $empty  what to return on empty list\r\n\t * @return bool|null\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tpublic function mimeAccepted($mime, $mimes = array(), $empty = true) {\r\n\t\t$mimes = !empty($mimes) ? $mimes : $this->onlyMimes;\r\n\t\tif (empty($mimes)) {\r\n\t\t\treturn $empty;\r\n\t\t}\r\n\t\treturn $mime == 'directory'\r\n\t\t\t|| in_array('all', $mimes)\r\n\t\t\t|| in_array('All', $mimes)\r\n\t\t\t|| in_array($mime, $mimes)\r\n\t\t\t|| in_array(substr($mime, 0, strpos($mime, '/')), $mimes);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if voume is readable.\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function isReadable() {\r\n\t\t$stat = $this->stat($this->root);\r\n\t\treturn $stat['read'];\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if copy from this volume allowed\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function copyFromAllowed() {\r\n\t\treturn !!$this->options['copyFrom'];\r\n\t}\r\n\r\n\t/**\r\n\t * Return file path related to root\r\n\t *\r\n\t * @param  string   $hash  file hash\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function path($hash) {\r\n\t\treturn $this->_path($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Return file real path if file exists\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function realpath($hash) {\r\n\t\t$path = $this->decode($hash);\r\n\t\treturn $this->stat($path) ? $path : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return list of moved/overwrited files\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function removed() {\r\n\t\treturn $this->removed;\r\n\t}\r\n\r\n\t/**\r\n\t * Clean removed files list\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function resetRemoved() {\r\n\t\t$this->removed = array();\r\n\t}\r\n\r\n\t/**\r\n\t * Return file/dir hash or first founded child hash with required attr == $val\r\n\t *\r\n\t * @param  string   $hash  file hash\r\n\t * @param  string   $attr  attribute name\r\n\t * @param  bool     $val   attribute value\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function closest($hash, $attr, $val) {\r\n\t\treturn ($path = $this->closestByAttr($this->decode($hash), $attr, $val)) ? $this->encode($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return file info or false on error\r\n\t *\r\n\t * @param  string   $hash      file hash\r\n\t * @param  bool     $realpath  add realpath field to file info\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function file($hash) {\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\treturn ($file = $this->stat($path)) ? $file : $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\r\n\t\tif (($file = $this->stat($path)) != false) {\r\n\t\t\tif ($realpath) {\r\n\t\t\t\t$file['realpath'] = $path;\r\n\t\t\t}\r\n\t\t\treturn $file;\r\n\t\t}\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\t/**\r\n\t * Return folder info\r\n\t *\r\n\t * @param  string   $hash  folder hash\r\n\t * @param  bool     $hidden  return hidden file info\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function dir($hash, $resolveLink=false) {\r\n\t\tif (($dir = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_DIR_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif ($resolveLink && !empty($dir['thash'])) {\r\n\t\t\t$dir = $this->file($dir['thash']);\r\n\t\t}\r\n\r\n\t\treturn $dir && $dir['mime'] == 'directory' && empty($dir['hidden']) \r\n\t\t\t? $dir \r\n\t\t\t: $this->setError(elFinder::ERROR_NOT_DIR);\r\n\t}\r\n\r\n\t/**\r\n\t * Return directory content or false on error\r\n\t *\r\n\t * @param  string   $hash   file hash\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function scandir($hash) {\r\n\t\tif (($dir = $this->dir($hash)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $dir['read']\r\n\t\t\t? $this->getScandir($this->decode($hash))\r\n\t\t\t: $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t/**\r\n\t * Return dir files names list\r\n\t * \r\n\t * @param  string  $hash   file hash\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function ls($hash) {\r\n\t\tif (($dir = $this->dir($hash)) == false || !$dir['read']) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$list = array();\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\tforeach ($this->getScandir($path) as $stat) {\r\n\t\t\tif (empty($stat['hidden']) && $this->mimeAccepted($stat['mime'])) {\r\n\t\t\t\t$list[] = $stat['name'];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $list;\r\n\t}\r\n\r\n\t/**\r\n\t * Return subfolders for required folder or false on error\r\n\t *\r\n\t * @param  string   $hash  folder hash or empty string to get tree from root folder\r\n\t * @param  int      $deep  subdir deep\r\n\t * @param  string   $exclude  dir hash which subfolders must be exluded from result, required to not get stat twice on cwd subfolders\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function tree($hash='', $deep=0, $exclude='') {\r\n\t\t$path = $hash ? $this->decode($hash) : $this->root;\r\n\r\n\t\tif (($dir = $this->stat($path)) == false || $dir['mime'] != 'directory') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$dirs = $this->gettree($path, $deep > 0 ? $deep -1 : $this->treeDeep-1, $exclude ? $this->decode($exclude) : null);\r\n\t\tarray_unshift($dirs, $dir);\r\n\t\treturn $dirs;\r\n\t}\r\n\r\n\t/**\r\n\t * Return part of dirs tree from required dir up to root dir\r\n\t *\r\n\t * @param  string  $hash  directory hash\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function parents($hash) {\r\n\t\tif (($current = $this->dir($hash)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\t\t$tree = array();\r\n\r\n\t\twhile ($path && $path != $this->root) {\r\n\t\t\t$path = $this->_dirname($path);\r\n\t\t\t$stat = $this->stat($path);\r\n\t\t\tif (!empty($stat['hidden']) || !$stat['read']) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tarray_unshift($tree, $stat);\r\n\t\t\tif ($path != $this->root) {\r\n\t\t\t\tforeach ($this->gettree($path, 0) as $dir) {\r\n\t\t\t\t\tif (!in_array($dir, $tree)) {\r\n\t\t\t\t\t\t$tree[] = $dir;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $tree ? $tree : array($current);\r\n\t}\r\n\r\n\t/**\r\n\t * Create thumbnail for required file and return its name of false on failed\r\n\t *\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function tmb($hash) {\r\n\t\t$path = $this->decode($hash);\r\n\t\t$stat = $this->stat($path);\r\n\r\n\t\tif (isset($stat['tmb'])) {\r\n\t\t\treturn $stat['tmb'] == \"1\" ? $this->createTmb($path, $stat) : $stat['tmb'];\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return file size / total directory size\r\n\t *\r\n\t * @param  string   file hash\r\n\t * @return int\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function size($hash) {\r\n\t\treturn $this->countSize($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Open file for reading and return file pointer\r\n\t *\r\n\t * @param  string   file hash\r\n\t * @return Resource\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function open($hash) {\r\n\t\tif (($file = $this->file($hash)) == false\r\n\t\t|| $file['mime'] == 'directory') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $this->_fopen($this->decode($hash), 'rb');\r\n\t}\r\n\r\n\t/**\r\n\t * Close file pointer\r\n\t *\r\n\t * @param  Resource  $fp   file pointer\r\n\t * @param  string    $hash file hash\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function close($fp, $hash) {\r\n\t\t$this->_fclose($fp, $this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Create directory and return dir info\r\n\t *\r\n\t * @param  string   $dst  destination directory\r\n\t * @param  string   $name directory name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function mkdir($dst, $name) {\r\n\t\tif ($this->commandDisabled('mkdir')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\tif (!$dir['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($dst);\r\n\t\t$dst  = $this->_joinPath($path, $name);\r\n\t\t$stat = $this->stat($dst); \r\n\t\tif (!empty($stat)) { \r\n\t\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_mkdir($path, $name)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Create empty file and return its info\r\n\t *\r\n\t * @param  string   $dst  destination directory\r\n\t * @param  string   $name file name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function mkfile($dst, $name) {\r\n\t\tif ($this->commandDisabled('mkfile')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($dst);\r\n\r\n\t\tif (!$dir['write'] || !$this->allowCreate($path, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif ($this->stat($this->_joinPath($path, $name))) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t\t}\r\n\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_mkfile($path, $name)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Rename file and return file info\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @param  string  $name  new file name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function rename($hash, $name) {\r\n\t\tif ($this->commandDisabled('rename')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME, $name);\r\n\t\t}\r\n\r\n\t\tif (!($file = $this->file($hash))) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif ($name == $file['name']) {\r\n\t\t\treturn $file;\r\n\t\t}\r\n\r\n\t\tif (!empty($file['locked'])) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $file['name']);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\t\t$dir  = $this->_dirname($path);\r\n\t\t$stat = $this->stat($this->_joinPath($dir, $name));\r\n\t\tif ($stat) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t\t}\r\n\r\n\t\tif (!$this->allowCreate($dir, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$this->rmTmb($file); // remove old name tmbs, we cannot do this after dir move\r\n\r\n\r\n\t\tif (($path = $this->_move($path, $dir, $name))) {\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $this->stat($path);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Create file copy with suffix \"copy number\" and return its info\r\n\t *\r\n\t * @param  string   $hash    file hash\r\n\t * @param  string   $suffix  suffix to add to file name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function duplicate($hash, $suffix='copy') {\r\n\t\tif ($this->commandDisabled('duplicate')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, '#'.$hash, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\t\t$dir  = $this->_dirname($path);\r\n\t\t$name = $this->uniqueName($dir, $this->_basename($path), ' '.$suffix.' ');\r\n\r\n\t\tif (!$this->allowCreate($dir, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\treturn ($path = $this->copy($path, $dir, $name)) == false\r\n\t\t\t? false\r\n\t\t\t: $this->stat($path);\r\n\t}\r\n\r\n\t/**\r\n\t * Save uploaded file. \r\n\t * On success return array with new file stat and with removed file hash (if existed file was replaced)\r\n\t *\r\n\t * @param  Resource $fp      file pointer\r\n\t * @param  string   $dst     destination folder hash\r\n\t * @param  string   $src     file name\r\n\t * @param  string   $tmpname file tmp name - required to detect mime type\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function upload($fp, $dst, $name, $tmpname) {\r\n\t\tif ($this->commandDisabled('upload')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\tif (!$dir['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\t$mime = $this->mimetype($this->mimeDetect == 'internal' ? $name : $tmpname, $name); \r\n\t\tif ($mime == 'unknown' && $this->mimeDetect == 'internal') {\r\n\t\t\t$mime = elFinderVolumeDriver::mimetypeInternalDetect($name);\r\n\t\t}\r\n\r\n\t\t// logic based on http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#order\r\n\t\t$allow  = $this->mimeAccepted($mime, $this->uploadAllow, null);\r\n\t\t$deny   = $this->mimeAccepted($mime, $this->uploadDeny,  null);\r\n\t\t$upload = true; // default to allow\r\n\t\tif (strtolower($this->uploadOrder[0]) == 'allow') { // array('allow', 'deny'), default is to 'deny'\r\n\t\t\t$upload = false; // default is deny\r\n\t\t\tif (!$deny && ($allow === true)) { // match only allow\r\n\t\t\t\t$upload = true;\r\n\t\t\t}// else (both match | no match | match only deny) { deny }\r\n\t\t} else { // array('deny', 'allow'), default is to 'allow' - this is the default rule\r\n\t\t\t$upload = true; // default is allow\r\n\t\t\tif (($deny === true) && !$allow) { // match only deny\r\n\t\t\t\t$upload = false;\r\n\t\t\t} // else (both match | no match | match only allow) { allow }\r\n\t\t}\r\n\t\tif (!$upload) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_MIME);\r\n\t\t}\r\n\r\n\t\tif ($this->uploadMaxSize > 0 && filesize($tmpname) > $this->uploadMaxSize) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_SIZE);\r\n\t\t}\r\n\r\n\t\t$dstpath = $this->decode($dst);\r\n\t\t$test    = $this->_joinPath($dstpath, $name);\r\n\r\n\t\t$file = $this->stat($test);\r\n\t\t$this->clearcache();\r\n\r\n\t\tif ($file) { // file exists\r\n\t\t\tif ($this->options['uploadOverwrite']) {\r\n\t\t\t\tif (!$file['write']) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t\t} elseif ($file['mime'] == 'directory') {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $name);\r\n\t\t\t\t} \r\n\t\t\t\t$this->remove($test);\r\n\t\t\t} else {\r\n\t\t\t\t$name = $this->uniqueName($dstpath, $name, '-', false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$stat = array(\r\n\t\t\t'mime'   => $mime, \r\n\t\t\t'width'  => 0, \r\n\t\t\t'height' => 0, \r\n\t\t\t'size'   => filesize($tmpname));\r\n\r\n\t\t// $w = $h = 0;\r\n\t\tif (strpos($mime, 'image') === 0 && ($s = getimagesize($tmpname))) {\r\n\t\t\t$stat['width'] = $s[0];\r\n\t\t\t$stat['height'] = $s[1];\r\n\t\t}\r\n\t\t// $this->clearcache();\r\n\t\tif (($path = $this->_save($fp, $dstpath, $name, $stat)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn $this->stat($path);\r\n\t}\r\n\r\n\t/**\r\n\t * Paste files\r\n\t *\r\n\t * @param  Object  $volume  source volume\r\n\t * @param  string  $source  file hash\r\n\t * @param  string  $dst     destination dir hash\r\n\t * @param  bool    $rmSrc   remove source after copy?\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function paste($volume, $src, $dst, $rmSrc = false) {\r\n\t\t$err = $rmSrc ? elFinder::ERROR_MOVE : elFinder::ERROR_COPY;\r\n\r\n\t\tif ($this->commandDisabled('paste')) {\r\n\t\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $volume->file($src, $rmSrc)) == false) {\r\n\t\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\t$name = $file['name'];\r\n\t\t$errpath = $volume->path($src);\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\tif (!$dir['write'] || !$file['read']) {\r\n\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$destination = $this->decode($dst);\r\n\r\n\t\tif (($test = $volume->closest($src, $rmSrc ? 'locked' : 'read', $rmSrc))) {\r\n\t\t\treturn $rmSrc\r\n\t\t\t\t? $this->setError($err, $errpath, elFinder::ERROR_LOCKED, $volume->path($test))\r\n\t\t\t\t: $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$test = $this->_joinPath($destination, $name);\r\n\t\t$stat = $this->stat($test);\r\n\t\t$this->clearcache();\r\n\t\tif ($stat) {\r\n\t\t\tif ($this->options['copyOverwrite']) {\r\n\t\t\t\t// do not replace file with dir or dir with file\r\n\t\t\t\tif (!$this->isSameType($file['mime'], $stat['mime'])) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $this->_path($test));\r\n\t\t\t\t}\r\n\t\t\t\t// existed file is not writable\r\n\t\t\t\tif (!$stat['write']) {\r\n\t\t\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t\t\t}\r\n\t\t\t\t// existed file locked or has locked child\r\n\t\t\t\tif (($locked = $this->closestByAttr($test, 'locked', true))) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($locked));\r\n\t\t\t\t}\r\n\t\t\t\t// target is entity file of alias\r\n\t\t\t\tif ($volume == $this && ($test == @$file['target'] || $test == $this->decode($src))) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $errpath);\r\n\t\t\t\t}\r\n\t\t\t\t// remove existed file\r\n\t\t\t\tif (!$this->remove($test)) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $this->_path($test));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$name = $this->uniqueName($destination, $name, ' ', false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// copy/move inside current volume\r\n\t\tif ($volume == $this) {\r\n\t\t\t$source = $this->decode($src);\r\n\t\t\t// do not copy into itself\r\n\t\t\tif ($this->_inpath($destination, $source)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY_INTO_ITSELF, $errpath);\r\n\t\t\t}\r\n\t\t\t$method = $rmSrc ? 'move' : 'copy';\r\n\t\t\treturn ($path = $this->$method($source, $destination, $name)) ? $this->stat($path) : false;\r\n\t\t}\r\n\r\n\t\t// copy/move from another volume\r\n\t\tif (!$this->options['copyTo'] || !$volume->copyFromAllowed()) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($path = $this->copyFrom($volume, $src, $destination, $name)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif ($rmSrc) {\r\n\t\t\tif ($volume->rm($src)) {\r\n\t\t\t\t$this->removed[] = $file;\r\n\t\t\t} else {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_MOVE, $errpath, elFinder::ERROR_RM_SRC);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $this->stat($path);\r\n\t}\r\n\r\n\t/**\r\n\t * Return file contents\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function getContents($hash) {\r\n\t\t$file = $this->file($hash);\r\n\r\n\t\tif (!$file) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif ($file['mime'] == 'directory') {\r\n\t\t\treturn $this->setError(elFinder::ERROR_NOT_FILE);\r\n\t\t}\r\n\r\n\t\tif (!$file['read']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\treturn $this->_getContents($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Put content in text file and return file info.\r\n\t *\r\n\t * @param  string  $hash     file hash\r\n\t * @param  string  $content  new file content\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function putContents($hash, $content) {\r\n\t\tif ($this->commandDisabled('edit')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\tif (!($file = $this->file($hash))) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif (!$file['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn $this->_filePutContents($path, $content) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Extract files from archive\r\n\t *\r\n\t * @param  string  $hash  archive hash\r\n\t * @return array|bool\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tpublic function extract($hash) {\r\n\t\tif ($this->commandDisabled('extract')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\t$archiver = isset($this->archivers['extract'][$file['mime']])\r\n\t\t\t? $this->archivers['extract'][$file['mime']]\r\n\t\t\t: false;\r\n\r\n\t\tif (!$archiver) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_NOT_ARCHIVE);\r\n\t\t}\r\n\r\n\t\t$path   = $this->decode($hash);\r\n\t\t$parent = $this->stat($this->_dirname($path));\r\n\r\n\t\tif (!$file['read'] || !$parent['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_extract($path, $archiver)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Add files to archive\r\n\t *\r\n\t * @return void\r\n\t **/\r\n\tpublic function archive($hashes, $mime) {\r\n\t\tif ($this->commandDisabled('archive')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$archiver = isset($this->archivers['create'][$mime])\r\n\t\t\t? $this->archivers['create'][$mime]\r\n\t\t\t: false;\r\n\r\n\t\tif (!$archiver) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_ARCHIVE_TYPE);\r\n\t\t}\r\n\r\n\t\t$files = array();\r\n\r\n\t\tforeach ($hashes as $hash) {\r\n\t\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\t\treturn $this->error(elFinder::ERROR_FILE_NOT_FOUND, '#'+$hash);\r\n\t\t\t}\r\n\t\t\tif (!$file['read']) {\r\n\t\t\t\treturn $this->error(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t}\r\n\t\t\t$path = $this->decode($hash);\r\n\t\t\tif (!isset($dir)) {\r\n\t\t\t\t$dir = $this->_dirname($path);\r\n\t\t\t\t$stat = $this->stat($dir);\r\n\t\t\t\tif (!$stat['write']) {\r\n\t\t\t\t\treturn $this->error(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$files[] = $this->_basename($path);\r\n\t\t}\r\n\r\n\t\t$name = (count($files) == 1 ? $files[0] : 'Archive').'.'.$archiver['ext'];\r\n\t\t$name = $this->uniqueName($dir, $name, '');\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_archive($dir, $files, $name, $archiver)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Resize image\r\n\t *\r\n\t * @param  string   $hash    image file\r\n\t * @param  int      $width   new width\r\n\t * @param  int      $height  new height\r\n\t * @param  int      $x       X start poistion for crop\r\n\t * @param  int      $y       Y start poistion for crop\r\n\t * @param  string   $mode    action how to mainpulate image\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t * @author nao-pon\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tpublic function resize($hash, $width, $height, $x, $y, $mode = 'resize', $bg = '', $degree = 0) {\r\n\t\tif ($this->commandDisabled('resize')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif (!$file['write'] || !$file['read']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\tif (!$this->canResize($path, $file)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_UNSUPPORT_TYPE);\r\n\t\t}\r\n\r\n\t\tswitch($mode) {\r\n\r\n\t\t\tcase 'propresize':\r\n\t\t\t\t$result = $this->imgResize($path, $width, $height, true, true);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'crop':\r\n\t\t\t\t$result = $this->imgCrop($path, $width, $height, $x, $y);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'fitsquare':\r\n\t\t\t\t$result = $this->imgSquareFit($path, $width, $height, 'center', 'middle', ($bg ? $bg : $this->options['tmbBgColor']));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'rotate':\r\n\t\t\t\t$result = $this->imgRotate($path, $degree, ($bg ? $bg : $this->options['tmbBgColor']));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t$result = $this->imgResize($path, $width, $height, false, true);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ($result) {\r\n\t\t\t$this->rmTmb($file);\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $this->stat($path);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove file/dir\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function rm($hash) {\r\n\t\treturn $this->commandDisabled('rm')\r\n\t\t\t? array(elFinder::ERROR_ACCESS_DENIED)\r\n\t\t\t: $this->remove($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Search files\r\n\t *\r\n\t * @param  string  $q  search string\r\n\t * @param  array   $mimes\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function search($q, $mimes) {\r\n\t\treturn $this->doSearch($this->root, $q, $mimes);\r\n\t}\r\n\r\n\t/**\r\n\t * Return image dimensions\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function dimensions($hash) {\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $this->_dimensions($this->decode($hash), $file['mime']);\r\n\t}\r\n\r\n\t/**\r\n\t * Save error message\r\n\t *\r\n\t * @param  array  error \r\n\t * @return false\r\n\t * @author Dmitry(dio) Levashov\r\n\t **/\r\n\tprotected function setError($error) {\r\n\r\n\t\t$this->error = array();\r\n\r\n\t\tforeach (func_get_args() as $err) {\r\n\t\t\tif (is_array($err)) {\r\n\t\t\t\t$this->error = array_merge($this->error, $err);\r\n\t\t\t} else {\r\n\t\t\t\t$this->error[] = $err;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// $this->error = is_array($error) ? $error : func_get_args();\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*********************************************************************/\r\n\t/*                               FS API                              */\r\n\t/*********************************************************************/\r\n\r\n\t/***************** paths *******************/\r\n\r\n\t/**\r\n\t * Encode path into hash\r\n\t *\r\n\t * @param  string  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function encode($path) {\r\n\t\tif ($path !== '') {\r\n\r\n\t\t\t// cut ROOT from $path for security reason, even if hacker decodes the path he will not know the root\r\n\t\t\t$p = $this->_relpath($path);\r\n\t\t\t// if reqesting root dir $path will be empty, then assign '/' as we cannot leave it blank for crypt\r\n\t\t\tif ($p === '')\t{\r\n\t\t\t\t$p = DIRECTORY_SEPARATOR;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO crypt path and return hash\r\n\t\t\t$hash = $this->crypt($p);\r\n\t\t\t// hash is used as id in HTML that means it must contain vaild chars\r\n\t\t\t// make base64 html safe and append prefix in begining\r\n\t\t\t$hash = strtr(base64_encode($hash), '+/=', '-_.');\r\n\t\t\t// remove dots '.' at the end, before it was '=' in base64\r\n\t\t\t$hash = rtrim($hash, '.'); \r\n\t\t\t// append volume id to make hash unique\r\n\t\t\treturn $this->id.$hash;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decode path from hash\r\n\t *\r\n\t * @param  string  file hash\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function decode($hash) {\r\n\t\tif (strpos($hash, $this->id) === 0) {\r\n\t\t\t// cut volume id after it was prepended in encode\r\n\t\t\t$h = substr($hash, strlen($this->id));\r\n\t\t\t// replace HTML safe base64 to normal\r\n\t\t\t$h = base64_decode(strtr($h, '-_.', '+/='));\r\n\t\t\t// TODO uncrypt hash and return path\r\n\t\t\t$path = $this->uncrypt($h); \r\n\t\t\t// append ROOT to path after it was cut in encode\r\n\t\t\treturn $this->_abspath($path);//$this->root.($path == DIRECTORY_SEPARATOR ? '' : DIRECTORY_SEPARATOR.$path); \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return crypted path \r\n\t * Not implemented\r\n\t *\r\n\t * @param  string  path\r\n\t * @return mixed\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function crypt($path) {\r\n\t\treturn $path;\r\n\t}\r\n\r\n\t/**\r\n\t * Return uncrypted path \r\n\t * Not implemented\r\n\t *\r\n\t * @param  mixed  hash\r\n\t * @return mixed\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function uncrypt($hash) {\r\n\t\treturn $hash;\r\n\t}\r\n\r\n\t/**\r\n\t * Validate file name based on $this->options['acceptedName'] regexp\r\n\t *\r\n\t * @param  string  $name  file name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function nameAccepted($name) {\r\n\t\tif ($this->nameValidator) {\r\n\t\t\tif (function_exists($this->nameValidator)) {\r\n\t\t\t\t$f = $this->nameValidator;\r\n\t\t\t\treturn $f($name);\r\n\t\t\t}\r\n\r\n\t\t\treturn preg_match($this->nameValidator, $name);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Return new unique name based on file name and suffix\r\n\t *\r\n\t * @param  string  $path    file path\r\n\t * @param  string  $suffix  suffix append to name\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function uniqueName($dir, $name, $suffix = ' copy', $checkNum=true) {\r\n\t\t$ext  = '';\r\n\r\n\t\tif (preg_match('/\\.((tar\\.(gz|bz|bz2|z|lzo))|cpio\\.gz|ps\\.gz|xcf\\.(gz|bz2)|[a-z0-9]{1,4})$/i', $name, $m)) {\r\n\t\t\t$ext  = '.'.$m[1];\r\n\t\t\t$name = substr($name, 0,  strlen($name)-strlen($m[0]));\r\n\t\t} \r\n\r\n\t\tif ($checkNum && preg_match('/('.$suffix.')(\\d*)$/i', $name, $m)) {\r\n\t\t\t$i    = (int)$m[2];\r\n\t\t\t$name = substr($name, 0, strlen($name)-strlen($m[2]));\r\n\t\t} else {\r\n\t\t\t$i     = 1;\r\n\t\t\t$name .= $suffix;\r\n\t\t}\r\n\t\t$max = $i+100000;\r\n\r\n\t\twhile ($i <= $max) {\r\n\t\t\t$n = $name.($i > 0 ? $i : '').$ext;\r\n\r\n\t\t\tif (!$this->stat($this->_joinPath($dir, $n))) {\r\n\t\t\t\t$this->clearcache();\r\n\t\t\t\treturn $n;\r\n\t\t\t}\r\n\t\t\t$i++;\r\n\t\t}\r\n\t\treturn $name.md5($dir).$ext;\r\n\t}\r\n\r\n\t/*********************** file stat *********************/\r\n\r\n\t/**\r\n\t * Check file attribute\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  string  $name  attribute name (read|write|locked|hidden)\r\n\t * @param  bool    $val   attribute value returned by file system\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function attr($path, $name, $val=null) {\r\n\t\tif (!isset($this->defaults[$name])) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\t\t$perm = null;\r\n\r\n\t\tif ($this->access) {\r\n\t\t\t$perm = call_user_func($this->access, $name, $path, $this->options['accessControlData'], $this);\r\n\r\n\t\t\tif ($perm !== null) {\r\n\t\t\t\treturn !!$perm;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($this->separator != '/') {\r\n\t\t\t$path = str_replace($this->separator, '/', $this->_relpath($path));\r\n\t\t} else {\r\n\t\t\t$path = $this->_relpath($path);\r\n\t\t}\r\n\r\n\t\t$path = '/'.$path;\r\n\r\n\t\tfor ($i = 0, $c = count($this->attributes); $i < $c; $i++) {\r\n\t\t\t$attrs = $this->attributes[$i];\r\n\r\n\t\t\tif (isset($attrs[$name]) && isset($attrs['pattern']) && preg_match($attrs['pattern'], $path)) {\r\n\t\t\t\t$perm = $attrs[$name];\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\treturn $perm === null ? (is_null($val)? $this->defaults[$name] : $val) : !!$perm;\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if file with given name can be created in given folder.\r\n\t *\r\n\t * @param string $dir  parent dir path\r\n\t * @param string $name new file name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function allowCreate($dir, $name) {\r\n\t\t$path = $this->_joinPath($dir, $name);\r\n\t\t$perm = null;\r\n\r\n\t\tif ($this->access) {\r\n\t\t\t$perm = call_user_func($this->access, 'write', $path, $this->options['accessControlData'], $this);\t\t\t\r\n\t\t\tif ($perm !== null) {\r\n\t\t\t\treturn !!$perm;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$testPath = $this->separator.$this->_relpath($path);\r\n\r\n\t\tfor ($i = 0, $c = count($this->attributes); $i < $c; $i++) {\r\n\t\t\t$attrs = $this->attributes[$i];\r\n\r\n\t\t\tif (isset($attrs['write']) && isset($attrs['pattern']) && preg_match($attrs['pattern'], $testPath)) {\r\n\t\t\t\t$perm = $attrs['write'];\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\treturn $perm === null ? true : $perm;\r\n\t}\r\n\r\n\t/**\r\n\t * Return fileinfo \r\n\t *\r\n\t * @param  string  $path  file cache\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function stat($path) {\r\n\t\tif ($path === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn isset($this->cache[$path])\r\n\t\t\t? $this->cache[$path]\r\n\t\t\t: $this->updateCache($path, $this->_stat($path));\r\n\t}\r\n\r\n\t/**\r\n\t * Put file stat in cache and return it\r\n\t *\r\n\t * @param  string  $path   file path\r\n\t * @param  array   $stat   file stat\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function updateCache($path, $stat) {\r\n\t\tif (empty($stat) || !is_array($stat)) {\r\n\t\t\treturn $this->cache[$path] = array();\r\n\t\t}\r\n\r\n\t\t$stat['hash'] = $this->encode($path);\r\n\r\n\t\t$root = $path == $this->root;\r\n\r\n\t\tif ($root) {\r\n\t\t\t$stat['volumeid'] = $this->id;\r\n\t\t\tif ($this->rootName) {\r\n\t\t\t\t$stat['name'] = $this->rootName;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (!isset($stat['name']) || !strlen($stat['name'])) {\r\n\t\t\t\t$stat['name'] = $this->_basename($path);\r\n\t\t\t}\r\n\t\t\tif (empty($stat['phash'])) {\r\n\t\t\t\t$stat['phash'] = $this->encode($this->_dirname($path));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// fix name if required\r\n\t\tif ($this->options['utf8fix'] && $this->options['utf8patterns'] && $this->options['utf8replace']) {\r\n\t\t\t$stat['name'] = json_decode(str_replace($this->options['utf8patterns'], $this->options['utf8replace'], json_encode($stat['name'])));\r\n\t\t}\r\n\r\n\r\n\t\tif (empty($stat['mime'])) {\r\n\t\t\t$stat['mime'] = $this->mimetype($stat['name']);\r\n\t\t}\r\n\r\n\t\t// @todo move dateformat to client\r\n\t\t// $stat['date'] = isset($stat['ts'])\r\n\t\t// \t? $this->formatDate($stat['ts'])\r\n\t\t// \t: 'unknown';\r\n\r\n\t\tif (!isset($stat['size'])) {\r\n\t\t\t$stat['size'] = 'unknown';\r\n\t\t}\t\r\n\r\n\t\t$stat['read']  = intval($this->attr($path, 'read', isset($stat['read']) ? !!$stat['read'] : null));\r\n\t\t$stat['write'] = intval($this->attr($path, 'write', isset($stat['write']) ? !!$stat['write'] : null));\r\n\t\tif ($root) {\r\n\t\t\t$stat['locked'] = 1;\r\n\t\t} elseif ($this->attr($path, 'locked', !empty($stat['locked']))) {\r\n\t\t\t$stat['locked'] = 1;\r\n\t\t} else {\r\n\t\t\tunset($stat['locked']);\r\n\t\t}\r\n\r\n\t\tif ($root) {\r\n\t\t\tunset($stat['hidden']);\r\n\t\t} elseif ($this->attr($path, 'hidden', !empty($stat['hidden'])) \r\n\t\t|| !$this->mimeAccepted($stat['mime'])) {\r\n\t\t\t$stat['hidden'] = $root ? 0 : 1;\r\n\t\t} else {\r\n\t\t\tunset($stat['hidden']);\r\n\t\t}\r\n\r\n\t\tif ($stat['read'] && empty($stat['hidden'])) {\r\n\r\n\t\t\tif ($stat['mime'] == 'directory') {\r\n\t\t\t\t// for dir - check for subdirs\r\n\r\n\t\t\t\tif ($this->options['checkSubfolders']) {\r\n\t\t\t\t\tif (isset($stat['dirs'])) {\r\n\t\t\t\t\t\tif ($stat['dirs']) {\r\n\t\t\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tunset($stat['dirs']);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} elseif (!empty($stat['alias']) && !empty($stat['target'])) {\r\n\t\t\t\t\t\t$stat['dirs'] = isset($this->cache[$stat['target']])\r\n\t\t\t\t\t\t\t? intval(isset($this->cache[$stat['target']]['dirs']))\r\n\t\t\t\t\t\t\t: $this->_subdirs($stat['target']);\r\n\r\n\t\t\t\t\t} elseif ($this->_subdirs($path)) {\r\n\t\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// for files - check for thumbnails\r\n\t\t\t\t$p = isset($stat['target']) ? $stat['target'] : $path;\r\n\t\t\t\tif ($this->tmbURL && !isset($stat['tmb']) && $this->canCreateTmb($p, $stat)) {\r\n\t\t\t\t\t$tmb = $this->gettmb($p, $stat);\r\n\t\t\t\t\t$stat['tmb'] = $tmb ? $tmb : 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!empty($stat['alias']) && !empty($stat['target'])) {\r\n\t\t\t$stat['thash'] = $this->encode($stat['target']);\r\n\t\t\tunset($stat['target']);\r\n\t\t}\r\n\r\n\t\treturn $this->cache[$path] = $stat;\r\n\t}\r\n\r\n\t/**\r\n\t * Get stat for folder content and put in cache\r\n\t *\r\n\t * @param  string  $path\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function cacheDir($path) {\r\n\t\t$this->dirsCache[$path] = array();\r\n\r\n\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\tif (($stat = $this->stat($p)) && empty($stat['hidden'])) {\r\n\t\t\t\t$this->dirsCache[$path][] = $p;\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Clean cache\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function clearcache() {\r\n\t\t$this->cache = $this->dirsCache = array();\r\n\t}\r\n\r\n\t/**\r\n\t * Return file mimetype\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function mimetype($path, $name = '') {\r\n\t\t$type = '';\r\n\r\n\t\tif ($this->mimeDetect == 'finfo') {\r\n\t\t\tif ($type = @finfo_file($this->finfo, $path)) {\r\n\t\t\t\tif ($name === '') {\r\n\t\t\t\t\t$name = $path;\r\n\t\t\t\t}\r\n\t\t\t\t$ext = (false === $pos = strrpos($name, '.')) ? '' : substr($name, $pos + 1);\r\n\t\t\t\tif ($ext && preg_match('~^application/(?:octet-stream|(?:x-)?zip)~', $type)) {\r\n\t\t\t\t\tif (isset(elFinderVolumeDriver::$mimetypes[$ext])) $type = elFinderVolumeDriver::$mimetypes[$ext];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} elseif ($type == 'mime_content_type') {\r\n\t\t\t$type = mime_content_type($path);\r\n\t\t} else {\r\n\t\t\t$type = elFinderVolumeDriver::mimetypeInternalDetect($path);\r\n\t\t}\r\n\r\n\t\t$type = explode(';', $type);\r\n\t\t$type = trim($type[0]);\r\n\r\n\t\tif (in_array($type, array('application/x-empty', 'inode/x-empty'))) {\r\n\t\t\t// finfo return this mime for empty files\r\n\t\t\t$type = 'text/plain';\r\n\t\t} elseif ($type == 'application/x-zip') {\r\n\t\t\t// http://elrte.org/redmine/issues/163\r\n\t\t\t$type = 'application/zip';\r\n\t\t}\r\n\r\n\t\treturn $type == 'unknown' && $this->mimeDetect != 'internal'\r\n\t\t\t? elFinderVolumeDriver::mimetypeInternalDetect($path)\r\n\t\t\t: $type;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Detect file mimetype using \"internal\" method\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tstatic protected function mimetypeInternalDetect($path) {\r\n\t\t$pinfo = pathinfo($path); \r\n\t\t$ext   = isset($pinfo['extension']) ? strtolower($pinfo['extension']) : '';\r\n\t\treturn isset(elFinderVolumeDriver::$mimetypes[$ext]) ? elFinderVolumeDriver::$mimetypes[$ext] : 'unknown';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Return file/total directory size\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return int\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function countSize($path) {\r\n\t\t$stat = $this->stat($path);\r\n\r\n\t\tif (empty($stat) || !$stat['read'] || !empty($stat['hidden'])) {\r\n\t\t\treturn 'unknown';\r\n\t\t}\r\n\r\n\t\tif ($stat['mime'] != 'directory') {\r\n\t\t\treturn $stat['size'];\r\n\t\t}\r\n\r\n\t\t$subdirs = $this->options['checkSubfolders'];\r\n\t\t$this->options['checkSubfolders'] = true;\r\n\t\t$result = 0;\r\n\t\tforeach ($this->getScandir($path) as $stat) {\r\n\t\t\t$size = $stat['mime'] == 'directory' && $stat['read'] \r\n\t\t\t\t? $this->countSize($this->_joinPath($path, $stat['name'])) \r\n\t\t\t\t: (isset($stat['size']) ? intval($stat['size']) : 0);\r\n\t\t\tif ($size > 0) {\r\n\t\t\t\t$result += $size;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$this->options['checkSubfolders'] = $subdirs;\r\n\t\treturn $result;\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if all mimes is directory or files\r\n\t *\r\n\t * @param  string  $mime1  mimetype\r\n\t * @param  string  $mime2  mimetype\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function isSameType($mime1, $mime2) {\r\n\t\treturn ($mime1 == 'directory' && $mime1 == $mime2) || ($mime1 != 'directory' && $mime2 != 'directory');\r\n\t}\r\n\r\n\t/**\r\n\t * If file has required attr == $val - return file path,\r\n\t * If dir has child with has required attr == $val - return child path\r\n\t *\r\n\t * @param  string   $path  file path\r\n\t * @param  string   $attr  attribute name\r\n\t * @param  bool     $val   attribute value\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function closestByAttr($path, $attr, $val) {\r\n\t\t$stat = $this->stat($path);\r\n\r\n\t\tif (empty($stat)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$v = isset($stat[$attr]) ? $stat[$attr] : false;\r\n\r\n\t\tif ($v == $val) {\r\n\t\t\treturn $path;\r\n\t\t}\r\n\r\n\t\treturn $stat['mime'] == 'directory'\r\n\t\t\t? $this->childsByAttr($path, $attr, $val) \r\n\t\t\t: false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return first found children with required attr == $val\r\n\t *\r\n\t * @param  string   $path  file path\r\n\t * @param  string   $attr  attribute name\r\n\t * @param  bool     $val   attribute value\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function childsByAttr($path, $attr, $val) {\r\n\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\tif (($_p = $this->closestByAttr($p, $attr, $val)) != false) {\r\n\t\t\t\treturn $_p;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*****************  get content *******************/\r\n\r\n\t/**\r\n\t * Return required dir's files info.\r\n\t * If onlyMimes is set - return only dirs and files of required mimes\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function getScandir($path) {\r\n\t\t$files = array();\r\n\r\n\t\t!isset($this->dirsCache[$path]) && $this->cacheDir($path);\r\n\r\n\t\tforeach ($this->dirsCache[$path] as $p) {\r\n\t\t\tif (($stat = $this->stat($p)) && empty($stat['hidden'])) {\r\n\t\t\t\t$files[] = $stat;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $files;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Return subdirs tree\r\n\t *\r\n\t * @param  string  $path  parent dir path\r\n\t * @param  int     $deep  tree deep\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function gettree($path, $deep, $exclude='') {\r\n\t\t$dirs = array();\r\n\r\n\t\t!isset($this->dirsCache[$path]) && $this->cacheDir($path);\r\n\r\n\t\tforeach ($this->dirsCache[$path] as $p) {\r\n\t\t\t$stat = $this->stat($p);\r\n\r\n\t\t\tif ($stat && empty($stat['hidden']) && $p != $exclude && $stat['mime'] == 'directory') {\r\n\t\t\t\t$dirs[] = $stat;\r\n\t\t\t\tif ($deep > 0 && !empty($stat['dirs'])) {\r\n\t\t\t\t\t$dirs = array_merge($dirs, $this->gettree($p, $deep-1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $dirs;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Recursive files search\r\n\t *\r\n\t * @param  string  $path   dir path\r\n\t * @param  string  $q      search string\r\n\t * @param  array   $mimes\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function doSearch($path, $q, $mimes) {\r\n\t\t$result = array();\r\n\r\n\t\tforeach($this->_scandir($path) as $p) {\r\n\t\t\t$stat = $this->stat($p);\r\n\r\n\t\t\tif (!$stat) { // invalid links\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (!empty($stat['hidden']) || !$this->mimeAccepted($stat['mime'])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t$name = $stat['name'];\r\n\r\n\t\t\tif ($this->stripos($name, $q) !== false) {\r\n\t\t\t\t$stat['path'] = $this->_path($p);\r\n\t\t\t\tif ($this->URL && !isset($stat['url'])) {\r\n\t\t\t\t\t$stat['url'] = $this->URL . str_replace($this->separator, '/', substr($p, strlen($this->root) + 1));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$result[] = $stat;\r\n\t\t\t}\r\n\t\t\tif ($stat['mime'] == 'directory' && $stat['read'] && !isset($stat['alias'])) {\r\n\t\t\t\t$result = array_merge($result, $this->doSearch($p, $q, $mimes));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $result;\r\n\t}\r\n\r\n\t/**********************  manuipulations  ******************/\r\n\r\n\t/**\r\n\t * Copy file/recursive copy dir only in current volume.\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  string  $src   source path\r\n\t * @param  string  $dst   destination dir path\r\n\t * @param  string  $name  new file name (optionaly)\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function copy($src, $dst, $name) {\r\n\t\t$srcStat = $this->stat($src);\r\n\t\t$this->clearcache();\r\n\r\n\t\tif (!empty($srcStat['thash'])) {\r\n\t\t\t$target = $this->decode($srcStat['thash']);\r\n\t\t\t$stat   = $this->stat($target);\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $stat && $this->_symlink($target, $dst, $name)\r\n\t\t\t\t? $this->_joinPath($dst, $name)\r\n\t\t\t\t: $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t\t} \r\n\r\n\t\tif ($srcStat['mime'] == 'directory') {\r\n\t\t\t$test = $this->stat($this->_joinPath($dst, $name));\r\n\r\n\t\t\tif (($test && $test['mime'] != 'directory') || !$this->_mkdir($dst, $name)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t\t\t}\r\n\r\n\t\t\t$dst = $this->_joinPath($dst, $name);\r\n\r\n\t\t\tforeach ($this->getScandir($src) as $stat) {\r\n\t\t\t\tif (empty($stat['hidden'])) {\r\n\t\t\t\t\t$name = $stat['name'];\r\n\t\t\t\t\tif (!$this->copy($this->_joinPath($src, $name), $dst, $name)) {\r\n\t\t\t\t\t\t$this->remove($dst, true); // fall back\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $dst;\r\n\t\t} \r\n\r\n\t\treturn $this->_copy($src, $dst, $name) \r\n\t\t\t? $this->_joinPath($dst, $name) \r\n\t\t\t: $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t}\r\n\r\n\t/**\r\n\t * Move file\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  string  $src   source path\r\n\t * @param  string  $dst   destination dir path\r\n\t * @param  string  $name  new file name \r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function move($src, $dst, $name) {\r\n\t\t$stat = $this->stat($src);\r\n\t\t$stat['realpath'] = $src;\r\n\t\t$this->rmTmb($stat); // can not do rmTmb() after _move()\r\n\t\t$this->clearcache();\r\n\r\n\t\tif ($this->_move($src, $dst, $name)) {\r\n\t\t\t$this->removed[] = $stat;\r\n\r\n\t\t\treturn $this->_joinPath($dst, $name);\r\n\t\t}\r\n\r\n\t\treturn $this->setError(elFinder::ERROR_MOVE, $this->_path($src));\r\n\t}\r\n\r\n\t/**\r\n\t * Copy file from another volume.\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  Object  $volume       source volume\r\n\t * @param  string  $src          source file hash\r\n\t * @param  string  $destination  destination dir path\r\n\t * @param  string  $name         file name\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function copyFrom($volume, $src, $destination, $name) {\r\n\r\n\t\tif (($source = $volume->file($src)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, '#'.$src, $volume->error());\r\n\t\t}\r\n\r\n\t\t$errpath = $volume->path($src);\r\n\r\n\t\tif (!$this->nameAccepted($source['name'])) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\tif (!$source['read']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif ($source['mime'] == 'directory') {\r\n\t\t\t$stat = $this->stat($this->_joinPath($destination, $name));\r\n\t\t\t$this->clearcache();\r\n\t\t\tif ((!$stat || $stat['mime'] != 'directory') && !$this->_mkdir($destination, $name)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath);\r\n\t\t\t}\r\n\r\n\t\t\t$path = $this->_joinPath($destination, $name);\r\n\r\n\t\t\tforeach ($volume->scandir($src) as $entr) {\r\n\t\t\t\tif (!$this->copyFrom($volume, $entr['hash'], $path, $entr['name'])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t// $mime = $source['mime'];\r\n\t\t\t// $w = $h = 0;\r\n\t\t\tif (($dim = $volume->dimensions($src))) {\r\n\t\t\t\t$s = explode('x', $dim);\r\n\t\t\t\t$source['width']  = $s[0];\r\n\t\t\t\t$source['height'] = $s[1];\r\n\t\t\t}\r\n\r\n\t\t\tif (($fp = $volume->open($src)) == false\r\n\t\t\t|| ($path = $this->_save($fp, $destination, $name, $source)) == false) {\r\n\t\t\t\t$fp && $volume->close($fp, $src);\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath);\r\n\t\t\t}\r\n\t\t\t$volume->close($fp, $src);\r\n\t\t}\r\n\r\n\t\treturn $path;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove file/ recursive remove dir\r\n\t *\r\n\t * @param  string  $path   file path\r\n\t * @param  bool    $force  try to remove even if file locked\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function remove($path, $force = false) {\r\n\t\t$stat = $this->stat($path);\r\n\t\t$stat['realpath'] = $path;\r\n\t\t$this->rmTmb($stat);\r\n\t\t$this->clearcache();\r\n\r\n\t\tif (empty($stat)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path), elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif (!$force && !empty($stat['locked'])) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($path));\r\n\t\t}\r\n\r\n\t\tif ($stat['mime'] == 'directory') {\r\n\t\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\t\t$name = $this->_basename($p);\r\n\t\t\t\tif ($name != '.' && $name != '..' && !$this->remove($p)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!$this->_rmdir($path)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path));\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tif (!$this->_unlink($path)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$this->removed[] = $stat;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/************************* thumbnails **************************/\r\n\r\n\t/**\r\n\t * Return thumbnail file name for required file\r\n\t *\r\n\t * @param  array  $stat  file stat\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function tmbname($stat) {\r\n\t\treturn $stat['hash'].$stat['ts'].'.png';\r\n\t}\r\n\r\n\t/**\r\n\t * Return thumnbnail name if exists\r\n\t *\r\n\t * @param  string  $path file path\r\n\t * @param  array   $stat file stat\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function gettmb($path, $stat) {\r\n\t\tif ($this->tmbURL && $this->tmbPath) {\r\n\t\t\t// file itself thumnbnail\r\n\t\t\tif (strpos($path, $this->tmbPath) === 0) {\r\n\t\t\t\treturn basename($path);\r\n\t\t\t}\r\n\r\n\t\t\t$name = $this->tmbname($stat);\r\n\t\t\tif (file_exists($this->tmbPath.DIRECTORY_SEPARATOR.$name)) {\r\n\t\t\t\treturn $name;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if thumnbnail for required file can be created\r\n\t *\r\n\t * @param  string  $path  thumnbnail path \r\n\t * @param  array   $stat  file stat\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function canCreateTmb($path, $stat) {\r\n\t\treturn $this->tmbPathWritable \r\n\t\t\t&& strpos($path, $this->tmbPath) === false // do not create thumnbnail for thumnbnail\r\n\t\t\t&& $this->imgLib \r\n\t\t\t&& strpos($stat['mime'], 'image') === 0 \r\n\t\t\t&& ($this->imgLib == 'gd' ? $stat['mime'] == 'image/jpeg' || $stat['mime'] == 'image/png' || $stat['mime'] == 'image/gif' : true);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if required file can be resized.\r\n\t * By default - the same as canCreateTmb\r\n\t *\r\n\t * @param  string  $path  thumnbnail path \r\n\t * @param  array   $stat  file stat\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function canResize($path, $stat) {\r\n\t\treturn $this->canCreateTmb($path, $stat);\r\n\t}\r\n\r\n\t/**\r\n\t * Create thumnbnail and return it's URL on success\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  string  $mime  file mime type\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function createTmb($path, $stat) {\r\n\t\tif (!$stat || !$this->canCreateTmb($path, $stat)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$name = $this->tmbname($stat);\r\n\t\t$tmb  = $this->tmbPath.DIRECTORY_SEPARATOR.$name;\r\n\r\n\t\t// copy image into tmbPath so some drivers does not store files on local fs\r\n\t\tif (($src = $this->_fopen($path, 'rb')) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (($trg = fopen($tmb, 'wb')) == false) {\r\n\t\t\t$this->_fclose($src, $path);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\twhile (!feof($src)) {\r\n\t\t\tfwrite($trg, fread($src, 8192));\r\n\t\t}\r\n\r\n\t\t$this->_fclose($src, $path);\r\n\t\tfclose($trg);\r\n\r\n\t\t$result = false;\r\n\r\n\t\t$tmbSize = $this->tmbSize;\r\n\r\n  \t\tif (($s = getimagesize($tmb)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n    \r\n    \t\t/* If image smaller or equal thumbnail size - just fitting to thumbnail square */\r\n    \t\tif ($s[0] <= $tmbSize && $s[1]  <= $tmbSize) {\r\n     \t   \t\t$result = $this->imgSquareFit($tmb, $tmbSize, $tmbSize, 'center', 'middle', $this->options['tmbBgColor'], 'png' );\r\n\t    \t} else {\r\n\r\n\t    \t\tif ($this->options['tmbCrop']) {\r\n        \r\n        \t\t\t/* Resize and crop if image bigger than thumbnail */\r\n\t        \t\tif (!(($s[0] > $tmbSize && $s[1] <= $tmbSize) || ($s[0] <= $tmbSize && $s[1] > $tmbSize) ) || ($s[0] > $tmbSize && $s[1] > $tmbSize)) {\r\n    \t\t\t\t\t$result = $this->imgResize($tmb, $tmbSize, $tmbSize, true, false, 'png');\r\n\t        \t\t}\r\n\r\n\t\t\t\tif (($s = getimagesize($tmb)) != false) {\r\n\t\t\t\t\t$x = $s[0] > $tmbSize ? intval(($s[0] - $tmbSize)/2) : 0;\r\n\t\t\t\t\t$y = $s[1] > $tmbSize ? intval(($s[1] - $tmbSize)/2) : 0;\r\n\t\t\t\t\t$result = $this->imgCrop($tmb, $tmbSize, $tmbSize, $x, $y, 'png');\r\n\t\t\t\t}\r\n\r\n    \t\t\t} else {\r\n        \t\t\t$result = $this->imgResize($tmb, $tmbSize, $tmbSize, true, true, 'png');\r\n      \t\t\t}\r\n\r\n\t\t\t$result = $this->imgSquareFit($tmb, $tmbSize, $tmbSize, 'center', 'middle', $this->options['tmbBgColor'], 'png' );\r\n\t\t}\r\n\r\n\t\tif (!$result) {\r\n\t\t\tunlink($tmb);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $name;\r\n\t}\r\n\r\n\t/**\r\n\t * Resize image\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $width              new width\r\n\t * @param  int      $height             new height\r\n\t * @param  bool\t    $keepProportions    crop image\r\n\t * @param  bool\t    $resizeByBiggerSide resize image based on bigger side if true\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n  \tprotected function imgResize($path, $width, $height, $keepProportions = false, $resizeByBiggerSide = true, $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n    \t$result = false;\r\n    \t\r\n\t\tlist($size_w, $size_h) = array($width, $height);\r\n    \r\n    \tif ($keepProportions == true) {\r\n           \r\n      \t\tlist($orig_w, $orig_h, $new_w, $new_h) = array($s[0], $s[1], $width, $height);\r\n        \r\n      \t\t/* Calculating image scale width and height */\r\n      \t\t$xscale = $orig_w / $new_w;\r\n      \t\t$yscale = $orig_h / $new_h;\r\n\r\n      \t\t/* Resizing by biggest side */\r\n\r\n\t\t\tif ($resizeByBiggerSide) {\r\n\r\n\t\t        if ($orig_w > $orig_h) {\r\n\t\t\t\t\t$size_h = $orig_h * $width / $orig_w;\r\n\t\t\t\t\t$size_w = $width;\r\n        \t\t} else {\r\n          \t\t\t$size_w = $orig_w * $height / $orig_h;\r\n          \t\t\t$size_h = $height;\r\n\t\t\t\t}\r\n      \r\n\t\t\t} else {\r\n        \t\tif ($orig_w > $orig_h) {\r\n          \t\t\t$size_w = $orig_w * $height / $orig_h;\r\n          \t\t\t$size_h = $height;\r\n\t\t        } else {\r\n\t\t\t\t\t$size_h = $orig_h * $width / $orig_w;\r\n\t\t\t\t\t$size_w = $width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img->resizeImage($size_w, $size_h, Imagick::FILTER_LANCZOS, true);\r\n\r\n\t\t\t\t$result = $img->writeImage($path);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($size_w, $size_h))) {\r\n\r\n\t\t\t\t\tself::gdImageBackground($tmp,$this->options['tmbBgColor']);\r\n\r\n\t\t\t\t\tif (!imagecopyresampled($tmp, $img, 0, 0, 0, 0, $size_w, $size_h, $s[0], $s[1])) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\t\timagedestroy($img);\r\n\t\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n  \t}\r\n  \r\n\t/**\r\n\t * Crop image\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $width              crop width\r\n\t * @param  int      $height             crop height\r\n\t * @param  bool\t    $x                  crop left offset\r\n\t * @param  bool\t    $y                  crop top offset\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n  \tprotected function imgCrop($path, $width, $height, $x, $y, $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$result = false;\r\n\r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img->cropImage($width, $height, $x, $y);\r\n\r\n\t\t\t\t$result = $img->writeImage($path);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($width, $height))) {\r\n\r\n\t\t\t\t\tself::gdImageBackground($tmp,$this->options['tmbBgColor']);\r\n\r\n\t\t\t\t\t$size_w = $width;\r\n\t\t\t\t\t$size_h = $height;\r\n\r\n\t\t\t\t\tif ($s[0] < $width || $s[1] < $height) {\r\n\t\t\t\t\t\t$size_w = $s[0];\r\n\t\t\t\t\t\t$size_h = $s[1];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!imagecopy($tmp, $img, 0, 0, $x, $y, $size_w, $size_h)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\t\timagedestroy($img);\r\n\t\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Put image to square\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $width              square width\r\n\t * @param  int      $height             square height\r\n\t * @param  int\t    $align              reserved\r\n\t * @param  int \t    $valign             reserved\r\n\t * @param  string   $bgcolor            square background color in #rrggbb format\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tprotected function imgSquareFit($path, $width, $height, $align = 'center', $valign = 'middle', $bgcolor = '#0000ff', $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$result = false;\r\n\r\n\t\t/* Coordinates for image over square aligning */\r\n\t\t$y = ceil(abs($height - $s[1]) / 2); \r\n\t\t$x = ceil(abs($width - $s[0]) / 2);\r\n    \r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img1 = new Imagick();\r\n\t\t\t\t$img1->newImage($width, $height, new ImagickPixel($bgcolor));\r\n\t\t\t\t$img1->setImageColorspace($img->getImageColorspace());\r\n\t\t\t\t$img1->setImageFormat($destformat != null ? $destformat : $img->getFormat());\r\n\t\t\t\t$img1->compositeImage( $img, imagick::COMPOSITE_OVER, $x, $y );\r\n\t\t\t\t$result = $img1->writeImage($path);\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($width, $height))) {\r\n\r\n\t\t\t\t\tself::gdImageBackground($tmp,$bgcolor);\r\n\r\n\t\t\t\t\tif (!imagecopy($tmp, $img, $x, $y, 0, 0, $s[0], $s[1])) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\t\timagedestroy($img);\r\n\t\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\t\treturn $result ? $path : false;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Rotate image\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $degree             rotete degrees\r\n\t * @param  string   $bgcolor            square background color in #rrggbb format\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author nao-pon\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function imgRotate($path, $degree, $bgcolor = '#ffffff', $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$result = false;\r\n\r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img->rotateImage(new ImagickPixel($bgcolor), $degree);\r\n\t\t\t\t$result = $img->writeImage($path);\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\t$degree = 360 - $degree;\r\n\t\t\t\tlist($r, $g, $b) = sscanf($bgcolor, \"#%02x%02x%02x\");\r\n\t\t\t\t$bgcolor = imagecolorallocate($img, $r, $g, $b);\r\n\t\t\t\t$tmp = imageRotate($img, $degree, (int)$bgcolor);\r\n\r\n\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\timageDestroy($img);\r\n\t\t\t\timageDestroy($tmp);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Execute shell command\r\n\t *\r\n\t * @param  string  $command       command line\r\n\t * @param  array   $output        stdout strings\r\n\t * @param  array   $return_var    process exit code\r\n\t * @param  array   $error_output  stderr strings\r\n\t * @return int     exit code\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tprotected function procExec($command , array &$output = null, &$return_var = -1, array &$error_output = null) {\r\n\r\n\t\t$descriptorspec = array(\r\n\t\t\t0 => array(\"pipe\", \"r\"),  // stdin\r\n\t\t\t1 => array(\"pipe\", \"w\"),  // stdout\r\n\t\t\t2 => array(\"pipe\", \"w\")   // stderr\r\n\t\t);\r\n\r\n\t\t$process = proc_open($command, $descriptorspec, $pipes, null, null);\r\n\r\n\t\tif (is_resource($process)) {\r\n\r\n\t\t\tfclose($pipes[0]);\r\n\r\n\t\t\t$tmpout = '';\r\n\t\t\t$tmperr = '';\r\n\r\n\t\t\t$output = stream_get_contents($pipes[1]);\r\n\t\t\t$error_output = stream_get_contents($pipes[2]);\r\n\r\n\t\t\tfclose($pipes[1]);\r\n\t\t\tfclose($pipes[2]);\r\n\t\t\t$return_var = proc_close($process);\r\n\r\n\r\n\t\t}\r\n\r\n\t\treturn $return_var;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Remove thumbnail, also remove recursively if stat is directory\r\n\t *\r\n\t * @param  string  $stat  file stat\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Naoki Sawada\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function rmTmb($stat) {\r\n\t\tif ($stat['mime'] === 'directory') {\r\n\t\t\tforeach ($this->_scandir($this->decode($stat['hash'])) as $p) {\r\n\t\t\t\t$name = $this->_basename($p);\r\n\t\t\t\t$name != '.' && $name != '..' && $this->rmTmb($this->stat($p));\r\n\t\t\t}\r\n\t\t} else if (!empty($stat['tmb']) && $stat['tmb'] != \"1\") {\r\n\t\t\t$tmb = $this->tmbPath.DIRECTORY_SEPARATOR.$stat['tmb'];\r\n\t\t\tfile_exists($tmb) && @unlink($tmb);\r\n\t\t\tclearstatcache();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an gd image according to the specified mime type\r\n\t *\r\n\t * @param string $path image file\r\n\t * @param string $mime\r\n\t * @return gd image resource identifier\r\n\t */\r\n\tprotected function gdImageCreate($path,$mime){\r\n\t\tswitch($mime){\r\n\t\t\tcase 'image/jpeg':\r\n\t\t\treturn imagecreatefromjpeg($path);\r\n\r\n\t\t\tcase 'image/png':\r\n\t\t\treturn imagecreatefrompng($path);\r\n\r\n\t\t\tcase 'image/gif':\r\n\t\t\treturn imagecreatefromgif($path);\r\n\r\n\t\t\tcase 'image/xbm':\r\n\t\t\treturn imagecreatefromxbm($path);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Output gd image to file\r\n\t *\r\n\t * @param resource $image gd image resource\r\n\t * @param string $filename The path to save the file to.\r\n\t * @param string $destformat The Image type to use for $filename\r\n\t * @param string $mime The original image mime type\r\n\t */\r\n\tprotected function gdImage($image, $filename, $destformat, $mime ){\r\n\r\n\t\tif ($destformat == 'jpg' || ($destformat == null && $mime == 'image/jpeg')) {\r\n\t\t\treturn imagejpeg($image, $filename, 100);\r\n\t\t}\r\n\r\n\t\tif ($destformat == 'gif' || ($destformat == null && $mime == 'image/gif')) {\r\n\t\t\treturn imagegif($image, $filename, 7);\r\n\t\t}\r\n\r\n\t\treturn imagepng($image, $filename, 7);\r\n\t}\r\n\r\n\t/**\r\n\t * Assign the proper background to a gd image\r\n\t *\r\n\t * @param resource $image gd image resource\r\n\t * @param string $bgcolor background color in #rrggbb format\r\n\t */\r\n\tprotected function gdImageBackground($image, $bgcolor){\r\n\r\n\t\tif( $bgcolor == 'transparent' ){\r\n\t\t\timagesavealpha($image,true);\r\n\t\t\t$bgcolor1 = imagecolorallocatealpha($image, 255, 255, 255, 127);\r\n\r\n\t\t}else{\r\n\t\t\tlist($r, $g, $b) = sscanf($bgcolor, \"#%02x%02x%02x\");\r\n\t\t\t$bgcolor1 = imagecolorallocate($image, $r, $g, $b);\r\n\t\t}\r\n\r\n\t\timagefill($image, 0, 0, $bgcolor1);\r\n\t}\r\n\r\n\t/*********************** misc *************************/\r\n\r\n\t/**\r\n\t * Return smart formatted date\r\n\t *\r\n\t * @param  int     $ts  file timestamp\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\t// protected function formatDate($ts) {\r\n\t// \tif ($ts > $this->today) {\r\n\t// \t\treturn 'Today '.date($this->options['timeFormat'], $ts);\r\n\t// \t}\r\n\t// \t\r\n\t// \tif ($ts > $this->yesterday) {\r\n\t// \t\treturn 'Yesterday '.date($this->options['timeFormat'], $ts);\r\n\t// \t} \r\n\t// \t\r\n\t// \treturn date($this->options['dateFormat'], $ts);\r\n\t// }\r\n\r\n\t/**\r\n\t* Find position of first occurrence of string in a string with multibyte support\r\n\t*\r\n\t* @param  string  $haystack  The string being checked.\r\n\t* @param  string  $needle    The string to find in haystack.\r\n\t* @param  int     $offset    The search offset. If it is not specified, 0 is used.\r\n\t* @return int|bool\r\n\t* @author Alexey Sukhotin\r\n\t**/\r\n\tprotected function stripos($haystack , $needle , $offset = 0) {\r\n\t\tif (function_exists('mb_stripos')) {\r\n\t\t\treturn mb_stripos($haystack , $needle , $offset);\r\n\t\t} else if (function_exists('mb_strtolower') && function_exists('mb_strpos')) {\r\n\t\t\treturn mb_strpos(mb_strtolower($haystack), mb_strtolower($needle), $offset);\r\n\t\t} \r\n\t\treturn stripos($haystack , $needle , $offset);\r\n\t}\r\n\r\n\t/**==================================* abstract methods *====================================**/\r\n\r\n\t/*********************** paths/urls *************************/\r\n\r\n\t/**\r\n\t * Return parent directory path\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _dirname($path);\r\n\r\n\t/**\r\n\t * Return file name\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _basename($path);\r\n\r\n\t/**\r\n\t * Join dir name and file name and return full path.\r\n\t * Some drivers (db) use int as path - so we give to concat path to driver itself\r\n\t *\r\n\t * @param  string  $dir   dir path\r\n\t * @param  string  $name  file name\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _joinPath($dir, $name);\r\n\r\n\t/**\r\n\t * Return normalized path \r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _normpath($path);\r\n\r\n\t/**\r\n\t * Return file path related to root dir\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _relpath($path);\r\n\r\n\t/**\r\n\t * Convert path related to root dir into real path\r\n\t *\r\n\t * @param  string  $path  rel file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _abspath($path);\r\n\r\n\t/**\r\n\t * Return fake path started from root dir.\r\n\t * Required to show path on client side.\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _path($path);\r\n\r\n\t/**\r\n\t * Return true if $path is children of $parent\r\n\t *\r\n\t * @param  string  $path    path to check\r\n\t * @param  string  $parent  parent path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _inpath($path, $parent);\r\n\r\n\t/**\r\n\t * Return stat for given path.\r\n\t * Stat contains following fields:\r\n\t * - (int)    size    file size in b. required\r\n\t * - (int)    ts      file modification time in unix time. required\r\n\t * - (string) mime    mimetype. required for folders, others - optionally\r\n\t * - (bool)   read    read permissions. required\r\n\t * - (bool)   write   write permissions. required\r\n\t * - (bool)   locked  is object locked. optionally\r\n\t * - (bool)   hidden  is object hidden. optionally\r\n\t * - (string) alias   for symlinks - link target path relative to root path. optionally\r\n\t * - (string) target  for symlinks - link target path. optionally\r\n\t *\r\n\t * If file does not exists - returns empty array or false.\r\n\t *\r\n\t * @param  string  $path    file path \r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _stat($path);\r\n\r\n\r\n\t/***************** file stat ********************/\r\n\r\n\r\n\t/**\r\n\t * Return true if path is dir and has at least one childs directory\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _subdirs($path);\r\n\r\n\t/**\r\n\t * Return object width and height\r\n\t * Ususaly used for images, but can be realize for video etc...\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  string  $mime  file mime type\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _dimensions($path, $mime);\r\n\r\n\t/******************** file/dir content *********************/\r\n\r\n\t/**\r\n\t * Return files list in directory\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _scandir($path);\r\n\r\n\t/**\r\n\t * Open file and return file pointer\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  bool    $write open file for writing\r\n\t * @return resource|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _fopen($path, $mode=\"rb\");\r\n\r\n\t/**\r\n\t * Close opened file\r\n\t * \r\n\t * @param  resource  $fp    file pointer\r\n\t * @param  string    $path  file path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _fclose($fp, $path='');\r\n\r\n\t/********************  file/dir manipulations *************************/\r\n\r\n\t/**\r\n\t * Create dir and return created dir path or false on failed\r\n\t *\r\n\t * @param  string  $path  parent dir path\r\n\t * @param string  $name  new directory name\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _mkdir($path, $name);\r\n\r\n\t/**\r\n\t * Create file and return it's path or false on failed\r\n\t *\r\n\t * @param  string  $path  parent dir path\r\n\t * @param string  $name  new file name\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _mkfile($path, $name);\r\n\r\n\t/**\r\n\t * Create symlink\r\n\t *\r\n\t * @param  string  $source     file to link to\r\n\t * @param  string  $targetDir  folder to create link in\r\n\t * @param  string  $name       symlink name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _symlink($source, $targetDir, $name);\r\n\r\n\t/**\r\n\t * Copy file into another file (only inside one volume)\r\n\t *\r\n\t * @param  string  $source  source file path\r\n\t * @param  string  $target  target dir path\r\n\t * @param  string  $name    file name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _copy($source, $targetDir, $name);\r\n\r\n\t/**\r\n\t * Move file into another parent dir.\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  string  $source  source file path\r\n\t * @param  string  $target  target dir path\r\n\t * @param  string  $name    file name\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _move($source, $targetDir, $name);\r\n\r\n\t/**\r\n\t * Remove file\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _unlink($path);\r\n\r\n\t/**\r\n\t * Remove dir\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _rmdir($path);\r\n\r\n\t/**\r\n\t * Create new file and write into it from file pointer.\r\n\t * Return new file path or false on error.\r\n\t *\r\n\t * @param  resource  $fp   file pointer\r\n\t * @param  string    $dir  target dir path\r\n\t * @param  string    $name file name\r\n\t * @param  array     $stat file stat (required by some virtual fs)\r\n\t * @return bool|string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _save($fp, $dir, $name, $stat);\r\n\r\n\t/**\r\n\t * Get file contents\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _getContents($path);\r\n\r\n\t/**\r\n\t * Write a string to a file\r\n\t *\r\n\t * @param  string  $path     file path\r\n\t * @param  string  $content  new file content\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _filePutContents($path, $content);\r\n\r\n\t/**\r\n\t * Extract files from archive\r\n\t *\r\n\t * @param  string  $path file path\r\n\t * @param  array   $arc  archiver options\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tabstract protected function _extract($path, $arc);\r\n\r\n\t/**\r\n\t * Create archive and return its path\r\n\t *\r\n\t * @param  string  $dir    target dir\r\n\t * @param  array   $files  files names list\r\n\t * @param  string  $name   archive name\r\n\t * @param  array   $arc    archiver options\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tabstract protected function _archive($dir, $files, $name, $arc);\r\n\r\n\t/**\r\n\t * Detect available archivers\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tabstract protected function _checkArchivers();\r\n\r\n} // END class"]],"start1":0,"start2":0,"length1":0,"length2":95655}]],"length":95655,"saved":false}
{"ts":1364833307407,"patch":[[{"diffs":[[0,"= false;\r\n    \r\n"],[1,"    /**\r\n\t * Root directory path\r\n\t *\r\n\t * @var string\r\n\t **/\r\n"],[0,"    this.root = "]],"start1":141,"start2":141,"length1":32,"length2":95},{"diffs":[[0,"\r\n\r\n"],[-1,"\tprotected $mounted = false;\r\n\r\n\t/**\r\n\t * Root directory path\r\n\t *\r\n\t * @var string\r\n\t **/"],[0,"\r\n\tp"]],"start1":305,"start2":305,"length1":98,"length2":8}]],"length":95628,"saved":false}
{"ts":1364833315800,"patch":[[{"diffs":[[0,"    "],[-1,"this.rootName = '';\r\n    \r\n    this.startPath = '';\r\n}\r\n\r\n\r\n\tprotected $root = '';\r\n\r\n\t"],[0,"/**\r"]],"start1":247,"start2":247,"length1":95,"length2":8},{"diffs":[[0,"\n\t **/\r\n"],[-1,"\tprotected $"],[1,"    this."],[0,"rootName"]],"start1":304,"start2":304,"length1":28,"length2":25},{"diffs":[[0,"rootName = '';\r\n"],[1,"    \r\n    this.startPath = '';\r\n}\r\n\r\n\r\n\r\n"],[0,"\r\n\t/**\r\n\t * Defa"]],"start1":321,"start2":321,"length1":32,"length2":73}]],"length":95579,"saved":false}
{"ts":1364833322196,"patch":[[{"diffs":[[0,"';\r\n"],[-1,"    "],[0,"\r\n    "],[-1,"this.startPath = '';\r\n}\r\n\r\n\r\n\r\n\r\n\t"],[0,"/**\r"]],"start1":333,"start2":333,"length1":52,"length2":14},{"diffs":[[0,"ar string\r\n\t **/"],[1,"    \r\n    this.startPath = '';\r\n}\r\n\r\n\r\n\r\n"],[0,"\r\n\tprotected $st"]],"start1":390,"start2":390,"length1":32,"length2":73}]],"length":95582,"saved":false}
{"ts":1364833340235,"patch":[[{"diffs":[[0,"';\r\n"],[-1,"}\r\n\r\n\r\n\r\n\r\n\tprotected $startPath = '';\r\n\r\n\t"],[1,"    \r\n    "],[0,"/**\r"]],"start1":434,"start2":434,"length1":51,"length2":18},{"diffs":[[0,"ar string\r\n\t **/"],[1,"    \r\n    this.URL = '';\r\n}\r\n\r\n\r\n"],[0,"\r\n\tprotected $UR"]],"start1":478,"start2":478,"length1":32,"length2":65}]],"length":95582,"saved":false}
{"ts":1364833350121,"patch":[[{"diffs":[[0,"';\r\n"],[-1,"}\r\n\r\n\r\n\r\n\tprotected $URL = '';"],[1,"    \r\n    this.tmbPath = '';\r\n}\r\n\r\n\r\n"],[0,"\r\n\r\n"]],"start1":516,"start2":516,"length1":38,"length2":45}]],"length":95589,"saved":false}
{"ts":1364833374210,"patch":[[{"diffs":[[0,"    "],[-1,"this.tmbPath = '';\r\n}\r\n\r\n\r\n\r\n\r\n\t"],[0,"/**\r\n"],[1,""],[0,"\t * "]],"start1":526,"start2":526,"length1":45,"length2":13},{"diffs":[[0,"tring\r\n\t **/"],[-1,"\r\n\tprotected $"],[1,"    \r\n    this."],[0,"tmbPath = ''"]],"start1":575,"start2":575,"length1":38,"length2":39},{"diffs":[[0,".tmbPath = '';\r\n"],[-1,"\r\n\t"],[1,"    \r\n    "],[0,"/**\r\n\t * Is thum"]],"start1":601,"start2":601,"length1":35,"length2":42},{"diffs":[[0," @var bool\r\n"],[-1,""],[0,"\t **/"],[1,"    \r\n    this.tmbPathWritable = false;\r\n}\r\n\r\n\r\n"],[0,"\r\n\tprotected"]],"start1":672,"start2":672,"length1":29,"length2":77}]],"length":95613,"saved":false}
{"ts":1364833401281,"patch":[[{"diffs":[[0,"e;\r\n"],[-1,"}\r\n\r\n\r\n\r\n\tprotected $tmbPathWritable = false;\r\n\r\n\t"],[1,"    \r\n    "],[0,"/**\r"]],"start1":726,"start2":726,"length1":58,"length2":18},{"diffs":[[0,"\n\t **/\r\n"],[-1,"\tprotected $"],[1,"     this."],[0,"tmbURL ="]],"start1":791,"start2":791,"length1":28,"length2":26},{"diffs":[[0,"s.tmbURL = '';\r\n"],[-1,"\r\n\t"],[1,"     \r\n    "],[0,"/**\r\n\t * Thumbna"]],"start1":807,"start2":807,"length1":35,"length2":43},{"diffs":[[0,"\r\n\t * @var int\r\n"],[-1,""],[0,"\t **/"],[1,"     \r\n     this.tmbSize = 48;\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],[0,"\r\n\tprotected $tm"]],"start1":869,"start2":869,"length1":37,"length2":88}]],"length":95630,"saved":false}
{"ts":1364833417675,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\tprotected $tmbSize = 48;\r\n\r\n\t"],[1,"    "],[0,"/**\r"]],"start1":924,"start2":924,"length1":53,"length2":12},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"imgLib ="]],"start1":1021,"start2":1021,"length1":27,"length2":21},{"diffs":[[0,"gLib = 'auto';\r\n"],[1,"    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],[0,"\r\n\t/**\r\n\t * Libr"]],"start1":1036,"start2":1036,"length1":32,"length2":53}]],"length":95604,"saved":false}
{"ts":1364833433266,"patch":[[{"diffs":[[0,";\r\n "],[1,"\r\n"],[0,"   "],[-1,"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t"],[1," "],[0,"/**\r"]],"start1":1049,"start2":1049,"length1":31,"length2":14},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"cryptLib"]],"start1":1119,"start2":1119,"length1":27,"length2":21},{"diffs":[[0,"tLib = '';\r\n"],[1," \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],[0,"\r\n\t/**\r\n\t * "]],"start1":1136,"start2":1136,"length1":24,"length2":44}]],"length":95601,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364833727842,"patch":[[{"diffs":[[0,"';\r\n"],[-1," \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t"],[1,"\r\n    "],[0,"/**\r"]],"start1":1144,"start2":1144,"length1":31,"length2":14},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"archiver"]],"start1":1202,"start2":1202,"length1":27,"length2":21},{"diffs":[[0,"archivers = "],[-1,"array("],[1,"{"],[0,"\r\n\t\t'create'"]],"start1":1215,"start2":1215,"length1":30,"length2":25},{"diffs":[[0,"'create'"],[-1,"  => array()"],[1,": {}"],[0,",\r\n\t\t'ex"]],"start1":1232,"start2":1232,"length1":28,"length2":20},{"diffs":[[0,"act'"],[-1," => array()\r\n\t);"],[1,": {}\r\n\t};\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],[0,"\r\n\r\n"]],"start1":1254,"start2":1254,"length1":24,"length2":38}]],"length":95579,"saved":false}
{"ts":1364833816660,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t"],[1,"    "],[0,"/**\r"]],"start1":1267,"start2":1267,"length1":30,"length2":12},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"treeDeep"]],"start1":1344,"start2":1344,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"error = "]],"start1":1437,"start2":1437,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"today = "]],"start1":1522,"start2":1522,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"yesterda"]],"start1":1605,"start2":1605,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"options "]],"start1":1689,"start2":1689,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"defaults"]],"start1":5514,"start2":5514,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"attribut"]],"start1":5700,"start2":5700,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"access ="]],"start1":5800,"start2":5800,"length1":27,"length2":21},{"diffs":[[0,"ay\r\n\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"uploadAllow "]],"start1":5888,"start2":5888,"length1":35,"length2":29},{"diffs":[[0,"ay\r\n\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"uploadDeny ="]],"start1":5987,"start2":5987,"length1":35,"length2":29},{"diffs":[[0,"ay\r\n\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"uploadOrder "]],"start1":6102,"start2":6102,"length1":35,"length2":29},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"uploadMa"]],"start1":6277,"start2":6277,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"mimeDete"]],"start1":6368,"start2":6368,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"finfo = "]],"start1":6608,"start2":6608,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"diabled "]],"start1":6705,"start2":6705,"length1":27,"length2":21},{"diffs":[[0,"d = array();\r\n\r\n"],[1,"}\r\n\r\n\r\n"],[0,"\t/**\r\n\t * defaul"]],"start1":6724,"start2":6724,"length1":32,"length2":39},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"separato"]],"start1":11932,"start2":11932,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"onlyMime"]],"start1":12042,"start2":12042,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"removed "]],"start1":12154,"start2":12154,"length1":27,"length2":21},{"diffs":[[0,"\t **/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"cache = "]],"start1":12235,"start2":12235,"length1":27,"length2":21},{"diffs":[[0,"/\r\n\t"],[-1,"protected $"],[1,"this."],[0,"dirs"]],"start1":12321,"start2":12321,"length1":19,"length2":13}]],"length":95448,"saved":false}
{"ts":1364835852774,"patch":[[{"diffs":[[0,"d'              "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t// root "]],"start1":1724,"start2":1724,"length1":34,"length2":33},{"diffs":[[0,"ath'            "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t// open "]],"start1":1777,"start2":1777,"length1":34,"length2":33},{"diffs":[[0,"Path'       "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t// h"]],"start1":1869,"start2":1869,"length1":26,"length2":25},{"diffs":[[0,"        "],[-1,"=>"],[1,":"],[0," 1,\r\n\t\t/"]],"start1":1949,"start2":1949,"length1":18,"length2":17},{"diffs":[[0,"RL'             "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t// direc"]],"start1":2063,"start2":2063,"length1":34,"length2":33},{"diffs":[[0,"'       "],[-1,"=>"],[1,":"],[0," DIRECTO"]],"start1":2168,"start2":2168,"length1":18,"length2":17},{"diffs":[[0,"ryptLib'        "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t// how t"]],"start1":2265,"start2":2265,"length1":34,"length2":33},{"diffs":[[0,"etect'      "],[-1,"=>"],[1,":"],[0," 'auto',\r\n\t\t"]],"start1":2373,"start2":2373,"length1":26,"length2":25},{"diffs":[[0,"imefile'        "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t// direc"]],"start1":2454,"start2":2454,"length1":34,"length2":33},{"diffs":[[0,"        "],[-1,"=>"],[1,":"],[0," '.tmb',"]],"start1":2520,"start2":2520,"length1":18,"length2":17},{"diffs":[[0,"de'     "],[-1,"=>"],[1,":"],[0," 0777,\r\n"]],"start1":2587,"start2":2587,"length1":18,"length2":17},{"diffs":[[0,"        "],[-1,"=>"],[1,":"],[0," '',\r\n\t\t"]],"start1":2692,"start2":2692,"length1":18,"length2":17},{"diffs":[[0,"        "],[-1,"=>"],[1,":"],[0," 48,\r\n\t\t"]],"start1":2746,"start2":2746,"length1":18,"length2":17},{"diffs":[[0,"mbCrop'         "],[-1,"=>"],[1,":"],[0," true,\r\n\t\t// thu"]],"start1":2844,"start2":2844,"length1":34,"length2":33},{"diffs":[[0,"r'      "],[-1,"=>"],[1,":"],[0," '#fffff"]],"start1":2946,"start2":2946,"length1":18,"length2":17},{"diffs":[[0,"        "],[-1,"=>"],[1,":"],[0," 'auto',"]],"start1":3014,"start2":3014,"length1":18,"length2":17},{"diffs":[[0,"verwrite'   "],[-1,"=>"],[1,":"],[0," true,\r\n\t\t//"]],"start1":3168,"start2":3168,"length1":26,"length2":25},{"diffs":[[0,"opyJoin'        "],[-1,"=>"],[1,":"],[0," true,\r\n\t\t// on "]],"start1":3255,"start2":3255,"length1":34,"length2":33},{"diffs":[[0,"rwrite' "],[-1,"=>"],[1,":"],[0," true,\r\n"]],"start1":3415,"start2":3415,"length1":18,"length2":17},{"diffs":[[0,"dAllow'     "],[-1,"=>"],[1,":"],[0," array(),\r\n\t"]],"start1":3474,"start2":3474,"length1":26,"length2":25},{"diffs":[[0,"dDeny'      "],[-1,"=>"],[1,":"],[0," array(),\r\n\t"]],"start1":3544,"start2":3544,"length1":26,"length2":25},{"diffs":[[0,"dOrder'     "],[-1,"=>"],[1,":"],[0," array('deny"]],"start1":3635,"start2":3635,"length1":26,"length2":25},{"diffs":[[0,"Size'   "],[-1,"=>"],[1,":"],[0," 0,\r\n\t\t/"]],"start1":3763,"start2":3763,"length1":18,"length2":17},{"diffs":[[0,"t'      "],[-1,"=>"],[1,":"],[0," 'j M Y "]],"start1":3814,"start2":3814,"length1":18,"length2":17},{"diffs":[[0,"t'      "],[-1,"=>"],[1,":"],[0," 'H:i',\r"]],"start1":3874,"start2":3874,"length1":18,"length2":17},{"diffs":[[0,"olders' "],[-1,"=>"],[1,":"],[0," true,\r\n"]],"start1":4027,"start2":4027,"length1":18,"length2":17},{"diffs":[[0,"opyFrom'        "],[-1,"=>"],[1,":"],[0," true,\r\n\t\t// all"]],"start1":4100,"start2":4100,"length1":34,"length2":33},{"diffs":[[0,"        "],[-1,"=>"],[1,":"],[0," true,\r\n"]],"start1":4189,"start2":4189,"length1":18,"length2":17},{"diffs":[[0,"led'        "],[-1,"=>"],[1,":"],[0," array(),\r\n\t"]],"start1":4259,"start2":4259,"length1":26,"length2":25},{"diffs":[[0,"ame'    "],[-1,"=>"],[1,":"],[0," '/^[^\\."]],"start1":4351,"start2":4351,"length1":18,"length2":17},{"diffs":[[0,"trol'   "],[-1,"=>"],[1,":"],[0," null,\r\n"]],"start1":4509,"start2":4509,"length1":18,"length2":17},{"diffs":[[0,"olData' "],[-1,"=>"],[1,":"],[0," null,\r\n"]],"start1":4583,"start2":4583,"length1":18,"length2":17},{"diffs":[[0,"faults'     "],[-1,"=>"],[1,":"],[0," array(\r\n\t\t\t"]],"start1":4676,"start2":4676,"length1":26,"length2":25},{"diffs":[[0,"y(\r\n\t\t\t'read'   "],[-1,"=>"],[1,":"],[0," true,\r\n\t\t\t'writ"]],"start1":4694,"start2":4694,"length1":34,"length2":33},{"diffs":[[0,"\t\t\t'write'  "],[-1,"=>"],[1,":"],[0," true\r\n\t\t),\r"]],"start1":4719,"start2":4719,"length1":26,"length2":25},{"diffs":[[0,"utes'   "],[-1,"=>"],[1,":"],[0," array()"]],"start1":4777,"start2":4777,"length1":18,"length2":17},{"diffs":[[0,"eMimes' "],[-1,"=>"],[1,":"],[0," array()"]],"start1":4888,"start2":4888,"length1":18,"length2":17},{"diffs":[[0,"chivers'    "],[-1,"=>"],[1,":"],[0," array(),\r\n\t"]],"start1":4995,"start2":4995,"length1":26,"length2":25},{"diffs":[[0,"f8fix'      "],[-1,"=>"],[1,":"],[0," false,\r\n\t\t "]],"start1":5059,"start2":5059,"length1":26,"length2":25},{"diffs":[[0,"tterns' "],[-1,"=>"],[1,":"],[0," array(\""]],"start1":5199,"start2":5199,"length1":18,"length2":17},{"diffs":[[0,"f8replace'  "],[-1,"=>"],[1,":"],[0," array(\"\\u04"]],"start1":5307,"start2":5307,"length1":26,"length2":25},{"diffs":[[0,"read'   "],[-1,"=>"],[1,":"],[0," true,\r\n"]],"start1":5508,"start2":5508,"length1":18,"length2":17},{"diffs":[[0,"write'  "],[-1,"=>"],[1,":"],[0," true,\r\n"]],"start1":5528,"start2":5528,"length1":18,"length2":17},{"diffs":[[0,"locked' "],[-1,"=>"],[1,":"],[0," false,\r"]],"start1":5548,"start2":5548,"length1":18,"length2":17},{"diffs":[[0,"hidden' "],[-1,"=>"],[1,":"],[0," false\r\n"]],"start1":5569,"start2":5569,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'ai'    "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":6856,"start2":6856,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'eps'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":6895,"start2":6895,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'exe'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":6934,"start2":6934,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'doc'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":6975,"start2":6975,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xls'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7015,"start2":7015,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ppt'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7056,"start2":7056,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'pps'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7102,"start2":7102,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'pdf'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7148,"start2":7148,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xml'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7180,"start2":7180,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'swf'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7212,"start2":7212,"length1":26,"length2":25},{"diffs":[[0,"orrent' "],[-1,"=>"],[1,":"],[0," 'applic"]],"start1":7264,"start2":7264,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'jar'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7301,"start2":7301,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odt'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7387,"start2":7387,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ott'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7443,"start2":7443,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'oth'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7508,"start2":7508,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odm'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7568,"start2":7568,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odg'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7631,"start2":7631,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'otg'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7691,"start2":7691,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odp'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7760,"start2":7760,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'otp'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7824,"start2":7824,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ods'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7897,"start2":7897,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ots'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":7960,"start2":7960,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odc'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8032,"start2":8032,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odf'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8089,"start2":8089,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odb'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8148,"start2":8148,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'odi'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8208,"start2":8208,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'oxt'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8265,"start2":8265,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'docx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8376,"start2":8376,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'docm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8464,"start2":8464,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'dotx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8529,"start2":8529,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'dotm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8617,"start2":8617,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xlsx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8682,"start2":8682,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xlsm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8764,"start2":8764,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xltx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8827,"start2":8827,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xltm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":8912,"start2":8912,"length1":26,"length2":25},{"diffs":[[0,"'xlsb'  "],[-1,"=>"],[1,":"],[0," 'applic"]],"start1":8982,"start2":8982,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'xlam'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9048,"start2":9048,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'pptx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9111,"start2":9111,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'pptm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9201,"start2":9201,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ppsx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9276,"start2":9276,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ppsm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9363,"start2":9363,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'potx'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9435,"start2":9435,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'potm'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9521,"start2":9521,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ppam'  "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9592,"start2":9592,"length1":26,"length2":25},{"diffs":[[0,"'sldx'  "],[-1,"=>"],[1,":"],[0," 'applic"]],"start1":9664,"start2":9664,"length1":18,"length2":17},{"diffs":[[0,"'sldm'  "],[-1,"=>"],[1,":"],[0," 'applic"]],"start1":9747,"start2":9747,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'gz'    "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9826,"start2":9826,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'tgz'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9861,"start2":9861,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'bz'    "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9896,"start2":9896,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'bz2'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9932,"start2":9932,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'tbz'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":9968,"start2":9968,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'zip'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":10004,"start2":10004,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'rar'   "],[-1,"=>"],[1,":"],[0," 'applicatio"]],"start1":10036,"start2":10036,"length1":26,"length2":25},{"diffs":[[0,"'tar'   "],[-1,"=>"],[1,":"],[0," 'applic"]],"start1":10074,"start2":10074,"length1":18,"length2":17},{"diffs":[[0,"'7z'    "],[-1,"=>"],[1,":"],[0," 'applic"]],"start1":10108,"start2":10108,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'txt'   "],[-1,"=>"],[1,":"],[0," 'text/plain"]],"start1":10160,"start2":10160,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'php'   "],[-1,"=>"],[1,":"],[0," 'text/x-php"]],"start1":10187,"start2":10187,"length1":26,"length2":25},{"diffs":[[0,"'html'  "],[-1,"=>"],[1,":"],[0," 'text/h"]],"start1":10218,"start2":10218,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'htm'   "],[-1,"=>"],[1,":"],[0," 'text/html'"]],"start1":10240,"start2":10240,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'js'    "],[-1,"=>"],[1,":"],[0," 'text/javas"]],"start1":10266,"start2":10266,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'css'   "],[-1,"=>"],[1,":"],[0," 'text/css',"]],"start1":10298,"start2":10298,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'rtf'   "],[-1,"=>"],[1,":"],[0," 'text/rtf',"]],"start1":10323,"start2":10323,"length1":26,"length2":25},{"diffs":[[0,"'rtfd'  "],[-1,"=>"],[1,":"],[0," 'text/r"]],"start1":10352,"start2":10352,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'py'    "],[-1,"=>"],[1,":"],[0," 'text/x-pyt"]],"start1":10374,"start2":10374,"length1":26,"length2":25},{"diffs":[[0,"'java'  "],[-1,"=>"],[1,":"],[0," 'text/x"]],"start1":10408,"start2":10408,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'rb'    "],[-1,"=>"],[1,":"],[0," 'text/x-rub"]],"start1":10439,"start2":10439,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'sh'    "],[-1,"=>"],[1,":"],[0," 'text/x-she"]],"start1":10467,"start2":10467,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'pl'    "],[-1,"=>"],[1,":"],[0," 'text/x-per"]],"start1":10502,"start2":10502,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'xml'   "],[-1,"=>"],[1,":"],[0," 'text/xml',"]],"start1":10530,"start2":10530,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'sql'   "],[-1,"=>"],[1,":"],[0," 'text/x-sql"]],"start1":10555,"start2":10555,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'c'     "],[-1,"=>"],[1,":"],[0," 'text/x-csr"]],"start1":10582,"start2":10582,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'h'     "],[-1,"=>"],[1,":"],[0," 'text/x-chd"]],"start1":10610,"start2":10610,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'cpp'   "],[-1,"=>"],[1,":"],[0," 'text/x-c++"]],"start1":10638,"start2":10638,"length1":26,"length2":25},{"diffs":[[0,"'hh'    "],[-1,"=>"],[1,":"],[0," 'text/x"]],"start1":10672,"start2":10672,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'log'   "],[-1,"=>"],[1,":"],[0," 'text/plain"]],"start1":10698,"start2":10698,"length1":26,"length2":25},{"diffs":[[0,"'csv'   "],[-1,"=>"],[1,":"],[0," 'text/x"]],"start1":10729,"start2":10729,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'bmp'   "],[-1,"=>"],[1,":"],[0," 'image/x-ms"]],"start1":10784,"start2":10784,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'jpg'   "],[-1,"=>"],[1,":"],[0," 'image/jpeg"]],"start1":10815,"start2":10815,"length1":26,"length2":25},{"diffs":[[0,"'jpeg'  "],[-1,"=>"],[1,":"],[0," 'image/"]],"start1":10846,"start2":10846,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'gif'   "],[-1,"=>"],[1,":"],[0," 'image/gif'"]],"start1":10869,"start2":10869,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'png'   "],[-1,"=>"],[1,":"],[0," 'image/png'"]],"start1":10895,"start2":10895,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'tif'   "],[-1,"=>"],[1,":"],[0," 'image/tiff"]],"start1":10921,"start2":10921,"length1":26,"length2":25},{"diffs":[[0,"'tiff'  "],[-1,"=>"],[1,":"],[0," 'image/"]],"start1":10952,"start2":10952,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'tga'   "],[-1,"=>"],[1,":"],[0," 'image/x-ta"]],"start1":10975,"start2":10975,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'psd'   "],[-1,"=>"],[1,":"],[0," 'image/vnd."]],"start1":11005,"start2":11005,"length1":26,"length2":25},{"diffs":[[0,"'ai'    "],[-1,"=>"],[1,":"],[0," 'image/"]],"start1":11051,"start2":11051,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'xbm'   "],[-1,"=>"],[1,":"],[0," 'image/xbm'"]],"start1":11089,"start2":11089,"length1":26,"length2":25},{"diffs":[[0,"'pxm'   "],[-1,"=>"],[1,":"],[0," 'image/"]],"start1":11119,"start2":11119,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'mp3'   "],[-1,"=>"],[1,":"],[0," 'audio/mpeg"]],"start1":11152,"start2":11152,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'mid'   "],[-1,"=>"],[1,":"],[0," 'audio/midi"]],"start1":11179,"start2":11179,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'ogg'   "],[-1,"=>"],[1,":"],[0," 'audio/ogg'"]],"start1":11206,"start2":11206,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'oga'   "],[-1,"=>"],[1,":"],[0," 'audio/ogg'"]],"start1":11232,"start2":11232,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'm4a'   "],[-1,"=>"],[1,":"],[0," 'audio/x-m4"]],"start1":11258,"start2":11258,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'wav'   "],[-1,"=>"],[1,":"],[0," 'audio/wav'"]],"start1":11286,"start2":11286,"length1":26,"length2":25},{"diffs":[[0,"'wma'   "],[-1,"=>"],[1,":"],[0," 'audio/"]],"start1":11316,"start2":11316,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'avi'   "],[-1,"=>"],[1,":"],[0," 'video/x-ms"]],"start1":11355,"start2":11355,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'dv'    "],[-1,"=>"],[1,":"],[0," 'video/x-dv"]],"start1":11387,"start2":11387,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'mp4'   "],[-1,"=>"],[1,":"],[0," 'video/mp4'"]],"start1":11414,"start2":11414,"length1":26,"length2":25},{"diffs":[[0,"'mpeg'  "],[-1,"=>"],[1,":"],[0," 'video/"]],"start1":11444,"start2":11444,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'mpg'   "],[-1,"=>"],[1,":"],[0," 'video/mpeg"]],"start1":11467,"start2":11467,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'mov'   "],[-1,"=>"],[1,":"],[0," 'video/quic"]],"start1":11494,"start2":11494,"length1":26,"length2":25},{"diffs":[[0,"'wm'    "],[-1,"=>"],[1,":"],[0," 'video/"]],"start1":11530,"start2":11530,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'flv'   "],[-1,"=>"],[1,":"],[0," 'video/x-fl"]],"start1":11557,"start2":11557,"length1":26,"length2":25},{"diffs":[[0,"\r\n\t\t'mkv'   "],[-1,"=>"],[1,":"],[0," 'video/x-ma"]],"start1":11585,"start2":11585,"length1":26,"length2":25},{"diffs":[[0,"'webm'  "],[-1,"=>"],[1,":"],[0," 'video/"]],"start1":11622,"start2":11622,"length1":18,"length2":17},{"diffs":[[0,"\r\n\t\t'ogv'   "],[-1,"=>"],[1,":"],[0," 'video/ogg'"]],"start1":11645,"start2":11645,"length1":26,"length2":25},{"diffs":[[0,"'ogm'   "],[-1,"=>"],[1,":"],[0," 'video/"]],"start1":11675,"start2":11675,"length1":18,"length2":17},{"diffs":[[0,"\t\t\t'id'         "],[-1,"=>"],[1,":"],[0," $this->id(),\r\n\t"]],"start1":14297,"start2":14297,"length1":34,"length2":33},{"diffs":[[0,"'       "],[-1,"=>"],[1,":"],[0," strtolo"]],"start1":14337,"start2":14337,"length1":18,"length2":17},{"diffs":[[0,"Detect' "],[-1,"=>"],[1,":"],[0," $this->"]],"start1":14420,"start2":14420,"length1":18,"length2":17},{"diffs":[[0,"imgLib'     "],[-1,"=>"],[1,":"],[0," $this->imgL"]],"start1":14454,"start2":14454,"length1":26,"length2":25},{"diffs":[[0,"ead'    "],[-1,"=>"],[1,":"],[0," isset($"]],"start1":15251,"start2":15251,"length1":18,"length2":17},{"diffs":[[0,"rite'   "],[-1,"=>"],[1,":"],[0," isset($"]],"start1":15358,"start2":15358,"length1":18,"length2":17},{"diffs":[[0,"ocked'  "],[-1,"=>"],[1,":"],[0," false,\r"]],"start1":15465,"start2":15465,"length1":18,"length2":17},{"diffs":[[0,",\r\n\t\t\t'hidden'  "],[-1,"=>"],[1,":"],[0," false\r\n\t\t);\r\n\r\n"]],"start1":15480,"start2":15480,"length1":34,"length2":33},{"diffs":[[0,"attern' "],[-1,"=>"],[1,":"],[0," '~^'.pr"]],"start1":15572,"start2":15572,"length1":18,"length2":17},{"diffs":[[0,"ocked'  "],[-1,"=>"],[1,":"],[0," true,\r\n"]],"start1":15631,"start2":15631,"length1":18,"length2":17},{"diffs":[[0,"idden'  "],[-1,"=>"],[1,":"],[0," false\r\n"]],"start1":15653,"start2":15653,"length1":18,"length2":17},{"diffs":[[0,"ine_num "],[-1,"=>"],[1,":"],[0," $line) "]],"start1":19489,"start2":19489,"length1":18,"length2":17},{"diffs":[[0,"attern' "],[-1,"=>"],[1,":"],[0," '/.*/',"]],"start1":20987,"start2":20987,"length1":18,"length2":17},{"diffs":[[0,"ead'    "],[-1,"=>"],[1,":"],[0," false\r\n"]],"start1":21012,"start2":21012,"length1":18,"length2":17},{"diffs":[[0,"s $mime "],[-1,"=>"],[1,":"],[0," $v) {\r\n"]],"start1":21912,"start2":21912,"length1":18,"length2":17},{"diffs":[[0,"eate'] as $mime "],[-1,"=>"],[1,":"],[0," $conf) {\r\n\t\t\t\ti"]],"start1":22236,"start2":22236,"length1":34,"length2":33},{"diffs":[[0,"s $mime "],[-1,"=>"],[1,":"],[0," $conf) "]],"start1":22682,"start2":22682,"length1":18,"length2":17},{"diffs":[[0,"'path'          "],[-1,"=>"],[1,":"],[0," $this->_path($t"]],"start1":24273,"start2":24273,"length1":34,"length2":33},{"diffs":[[0,"'url'           "],[-1,"=>"],[1,":"],[0," $this->URL,\r\n\t\t"]],"start1":24331,"start2":24331,"length1":34,"length2":33},{"diffs":[[0,"Url'        "],[-1,"=>"],[1,":"],[0," $this->tmbU"]],"start1":24369,"start2":24369,"length1":26,"length2":25},{"diffs":[[0,"abled'      "],[-1,"=>"],[1,":"],[0," $this->disa"]],"start1":24406,"start2":24406,"length1":26,"length2":25},{"diffs":[[0,"or'     "],[-1,"=>"],[1,":"],[0," $this->"]],"start1":24449,"start2":24449,"length1":18,"length2":17},{"diffs":[[0,"rwrite' "],[-1,"=>"],[1,":"],[0," intval("]],"start1":24489,"start2":24489,"length1":18,"length2":17},{"diffs":[[0,"rs'     "],[-1,"=>"],[1,":"],[0," array(\r"]],"start1":24552,"start2":24552,"length1":18,"length2":17},{"diffs":[[0,"reate'  "],[-1,"=>"],[1,":"],[0," array_k"]],"start1":24579,"start2":24579,"length1":18,"length2":17},{"diffs":[[0,"xtract' "],[-1,"=>"],[1,":"],[0," array_k"]],"start1":24639,"start2":24639,"length1":18,"length2":17},{"diffs":[[0,"reate'  "],[-1,"=>"],[1,":"],[0," is_arra"]],"start1":24697,"start2":24697,"length1":18,"length2":17},{"diffs":[[0,"xtract' "],[-1,"=>"],[1,":"],[0," is_arra"]],"start1":24805,"start2":24805,"length1":18,"length2":17},{"diffs":[[0,"mime'   "],[-1,"=>"],[1,":"],[0," $mime, "]],"start1":39436,"start2":39436,"length1":18,"length2":17},{"diffs":[[0,"width'  "],[-1,"=>"],[1,":"],[0," 0, \r\n\t\t"]],"start1":39459,"start2":39459,"length1":18,"length2":17},{"diffs":[[0,"height' "],[-1,"=>"],[1,":"],[0," 0, \r\n\t\t"]],"start1":39478,"start2":39478,"length1":18,"length2":17},{"diffs":[[0,"size'   "],[-1,"=>"],[1,":"],[0," filesiz"]],"start1":39497,"start2":39497,"length1":18,"length2":17},{"diffs":[[0,"(\r\n\t\t\t0 "],[-1,"=>"],[1,":"],[0," array(\""]],"start1":83085,"start2":83085,"length1":18,"length2":17},{"diffs":[[0,"n\r\n\t\t\t1 "],[-1,"=>"],[1,":"],[0," array(\""]],"start1":83123,"start2":83123,"length1":18,"length2":17},{"diffs":[[0,"\t\t2 "],[-1,"=>"],[1,":"],[0," arr"]],"start1":83166,"start2":83166,"length1":10,"length2":9}]],"length":95261,"saved":false}
{"ts":1364835861459,"patch":[[{"diffs":[[0,"/\r\n\t"],[-1,"protected static "],[1,"this."],[0,"$mim"]],"start1":6797,"start2":6797,"length1":25,"length2":13},{"diffs":[[0,"mimetypes = "],[-1,"array("],[1,"{"],[0,"\r\n\t\t// appli"]],"start1":6807,"start2":6807,"length1":30,"length2":25}]],"length":95244,"saved":false}
{"ts":1364835868187,"patch":[[{"diffs":[[0,"/ogg'\r\n\t"],[-1,"\t)"],[1,"}"],[0,";\r\n\r\n\t/*"]],"start1":11674,"start2":11674,"length1":18,"length2":17}]],"length":95243,"saved":false}
{"ts":1364835907486,"patch":[[{"diffs":[[1,"var _ = require('underscore'),\r\n    DIRECTORY_SEPARATOR = require('path').sep;\r\n\r\n"],[0,"var ElFinder"]],"start1":0,"start2":0,"length1":12,"length2":94},{"diffs":[[0,"s.options = "],[-1,"array("],[1,"{"],[0,"\r\n\t\t'id'    "]],"start1":1782,"start2":1782,"length1":30,"length2":25}]],"length":95320,"saved":false}
{"ts":1364835917707,"patch":[[{"diffs":[[0,"  : "],[1,"'"],[0,"0777"],[1,"'"],[0,",\r\n\t"]],"start1":2670,"start2":2670,"length1":12,"length2":14}]],"length":95322,"saved":false}
{"ts":1364835938090,"patch":[[{"diffs":[[0,"ults'     : "],[-1,"array("],[1,"{"],[0,"\r\n\t\t\t'read' "]],"start1":4757,"start2":4757,"length1":30,"length2":25},{"diffs":[[0,"true\r\n\t\t"],[-1,")"],[1,"}"],[0,",\r\n\t\t// "]],"start1":4807,"start2":4807,"length1":17,"length2":17},{"diffs":[[0,"erns' : "],[-1,"array("],[1,"["],[0,"\"\\u0438\\"]],"start1":5275,"start2":5275,"length1":22,"length2":17},{"diffs":[[0,"\"\\u030a\""],[-1,")"],[1,"]"],[0,",\r\n\t\t'ut"]],"start1":5359,"start2":5359,"length1":17,"length2":17},{"diffs":[[0,"ace'  : "],[-1,"array("],[1,"["],[0,"\"\\u0439\""]],"start1":5382,"start2":5382,"length1":22,"length2":17},{"diffs":[[0,"\"\\u00c5\""],[-1,")"],[1,"]"],[0,"\r\n\t);\r\n\r"]],"start1":5466,"start2":5466,"length1":17,"length2":17}]],"length":95307,"saved":false}
{"ts":1364835947782,"patch":[[{"diffs":[[0,"0c5\"]\r\n\t"],[-1,")"],[1,"}"],[0,";\r\n\r\n\t/*"]],"start1":5470,"start2":5470,"length1":17,"length2":17}]],"length":95307,"saved":false}
{"ts":1364835953875,"patch":[[{"diffs":[[0,".defaults = "],[-1,"array("],[1,"{"],[0,"\r\n\t\t'read'  "]],"start1":5549,"start2":5549,"length1":30,"length2":25},{"diffs":[[0,"false\r\n\t"],[-1,")"],[1,"}"],[0,";\r\n\r\n\t/*"]],"start1":5638,"start2":5638,"length1":17,"length2":17}]],"length":95302,"saved":false}
{"ts":1364835970086,"patch":[[{"diffs":[[0,"ttributes = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/**\r\n\t"]],"start1":5728,"start2":5728,"length1":31,"length2":26}]],"length":95297,"saved":false}
{"ts":1364835992773,"patch":[[{"diffs":[[0,"Allow = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/*"]],"start1":5920,"start2":5920,"length1":23,"length2":18},{"diffs":[[0,"dDeny = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/*"]],"start1":6013,"start2":6013,"length1":23,"length2":18},{"diffs":[[0,"loadOrder = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/**\r\n\t"]],"start1":6120,"start2":6120,"length1":31,"length2":26},{"diffs":[[0,"/\r\n\t"],[-1,"private static "],[1,"this."],[0,"$mim"]],"start1":6482,"start2":6482,"length1":23,"length2":13}]],"length":95272,"saved":false}
{"ts":1364835996984,"patch":[[{"diffs":[[0,"r bool\r\n\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"$mimetypesLoaded"]],"start1":6470,"start2":6470,"length1":37,"length2":36}]],"length":95271,"saved":false}
{"ts":1364836006445,"patch":[[{"diffs":[[0,"s.diabled = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n}\r\n\r\n\r\n"]],"start1":6699,"start2":6699,"length1":31,"length2":26}]],"length":95266,"saved":false}
{"ts":1364836053994,"patch":[[{"diffs":[[0," [];\r\n\r\n"],[-1,"}\r\n\r\n\r\n\t"],[1,"    "],[0,"/**\r\n\t *"]],"start1":6710,"start2":6710,"length1":24,"length2":20},{"diffs":[[0,"onlyMimes = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/**\r\n\t"]],"start1":11904,"start2":11904,"length1":31,"length2":26},{"diffs":[[0,"moved = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/*"]],"start1":12013,"start2":12013,"length1":23,"length2":18},{"diffs":[[0,"his.cache = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r\n\t/**\r\n\t"]],"start1":12083,"start2":12083,"length1":31,"length2":26},{"diffs":[[0,"dirsCache = "],[-1,"array();"],[1,"[];\r\n};\r\n\r\n\r\n"],[0,"\r\n\r\n\t/******"]],"start1":12164,"start2":12164,"length1":32,"length2":37}]],"length":95252,"saved":false}
{"ts":1364836132236,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\r\n\t/*********************************************************************/\r\n\t/*                            INITIALIZATION                         */\r\n\t/*********************************************************************/\r\n\r\n\t/**\r\n\t * Prepare driver before mount volume.\r\n\t * Return true if volume is ready.\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function init() {\r\n\t\treturn true;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Configure after successfull mount.\r\n\t * By default set thumbnails path and image manipulation library.\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function configure() {\r\n\t\t// set thumbnails path\r\n\t\t$path = $this->options['tmbPath'];\r\n\t\tif ($path) {\r\n\t\t\tif (!file_exists($path)) {\r\n\t\t\t\tif (@mkdir($path)) {\r\n\t\t\t\t\tchmod($path, $this->options['tmbPathMode']);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$path = '';\r\n\t\t\t\t}\r\n\t\t\t} \r\n\r\n\t\t\tif (is_dir($path) && is_readable($path)) {\r\n\t\t\t\t$this->tmbPath = $path;\r\n\t\t\t\t$this->tmbPathWritable = is_writable($path);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// set image manipulation library\r\n\t\t$type = preg_match('/^(imagick|gd|auto)$/i', $this->options['imgLib'])\r\n\t\t\t? strtolower($this->options['imgLib'])\r\n\t\t\t: 'auto';\r\n\r\n\t\tif (($type == 'imagick' || $type == 'auto') && extension_loaded('imagick')) {\r\n\t\t\t$this->imgLib = 'imagick';\r\n\t\t} else {\r\n\t\t\t$this->imgLib = function_exists('gd_info') ? 'gd' : '';\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/*********************************************************************/\r\n\t/*                              PUBLIC API                           */\r\n\t/*********************************************************************/\r\n\r\n\t/**\r\n\t * Return driver id. Used as a part of volume id.\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function driverId() {\r\n\t\treturn $this->driverId;\r\n\t}\r\n\r\n\t/**\r\n\t * Return volume id\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function id() {\r\n\t\treturn $this->id;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug info for client\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function debug() {\r\n\t\treturn array(\r\n\t\t\t'id'         : $this->id(),\r\n\t\t\t'name'       : strtolower(substr(get_class($this), strlen('elfinderdriver'))),\r\n\t\t\t'mimeDetect' : $this->mimeDetect,\r\n\t\t\t'imgLib'     : $this->imgLib\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * \"Mount\" volume.\r\n\t * Return true if volume available for read or write, \r\n\t * false - otherwise\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tpublic function mount(array $opts) {\r\n\t\tif (!isset($opts['path']) || $opts['path'] === '') {\r\n\t\t\treturn $this->setError('Path undefined.');;\r\n\t\t}\r\n\r\n\t\t$this->options = array_merge($this->options, $opts);\r\n\t\t$this->id = $this->driverId.(!empty($this->options['id']) ? $this->options['id'] : elFinder::$volumesCnt++).'_';\r\n\t\t$this->root = $this->_normpath($this->options['path']);\r\n\t\t$this->separator = isset($this->options['separator']) ? $this->options['separator'] : DIRECTORY_SEPARATOR;\r\n\r\n\t\t// default file attribute\r\n\t\t$this->defaults = array(\r\n\t\t\t'read'    : isset($this->options['defaults']['read'])  ? !!$this->options['defaults']['read']  : true,\r\n\t\t\t'write'   : isset($this->options['defaults']['write']) ? !!$this->options['defaults']['write'] : true,\r\n\t\t\t'locked'  : false,\r\n\t\t\t'hidden'  : false\r\n\t\t);\r\n\r\n\t\t// root attributes\r\n\t\t$this->attributes[] = array(\r\n\t\t\t'pattern' : '~^'.preg_quote(DIRECTORY_SEPARATOR).'$~',\r\n\t\t\t'locked'  : true,\r\n\t\t\t'hidden'  : false\r\n\t\t);\r\n\t\t// set files attributes\r\n\t\tif (!empty($this->options['attributes']) && is_array($this->options['attributes'])) {\r\n\r\n\t\t\tforeach ($this->options['attributes'] as $a) {\r\n\t\t\t\t// attributes must contain pattern and at least one rule\r\n\t\t\t\tif (!empty($a['pattern']) || count($a) > 1) {\r\n\t\t\t\t\t$this->attributes[] = $a;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!empty($this->options['accessControl']) && is_callable($this->options['accessControl'])) {\r\n\t\t\t$this->access = $this->options['accessControl'];\r\n\t\t}\r\n\r\n\t\t$this->today     = mktime(0,0,0, date('m'), date('d'), date('Y'));\r\n\t\t$this->yesterday = $this->today-86400;\r\n\r\n\t\t// debug($this->attributes);\r\n\t\tif (!$this->init()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// check some options is arrays\r\n\t\t$this->uploadAllow = isset($this->options['uploadAllow']) && is_array($this->options['uploadAllow'])\r\n\t\t\t? $this->options['uploadAllow']\r\n\t\t\t: array();\r\n\r\n\t\t$this->uploadDeny = isset($this->options['uploadDeny']) && is_array($this->options['uploadDeny'])\r\n\t\t\t? $this->options['uploadDeny']\r\n\t\t\t: array();\r\n\r\n\t\tif (is_string($this->options['uploadOrder'])) { // telephat_mode on, compatibility with 1.x\r\n\t\t\t$parts = explode(',', isset($this->options['uploadOrder']) ? $this->options['uploadOrder'] : 'deny,allow');\r\n\t\t\t$this->uploadOrder = array(trim($parts[0]), trim($parts[1]));\r\n\t\t} else { // telephat_mode off\r\n\t\t\t$this->uploadOrder = $this->options['uploadOrder'];\r\n\t\t}\r\n\r\n\t\tif (!empty($this->options['uploadMaxSize'])) {\r\n\t\t\t$size = ''.$this->options['uploadMaxSize'];\r\n\t\t\t$unit = strtolower(substr($size, strlen($size) - 1));\r\n\t\t\t$n = 1;\r\n\t\t\tswitch ($unit) {\r\n\t\t\t\tcase 'k':\r\n\t\t\t\t\t$n = 1024;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'm':\r\n\t\t\t\t\t$n = 1048576;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'g':\r\n\t\t\t\t\t$n = 1073741824;\r\n\t\t\t}\r\n\t\t\t$this->uploadMaxSize = intval($size)*$n;\r\n\t\t}\r\n\r\n\t\t$this->disabled = isset($this->options['disabled']) && is_array($this->options['disabled'])\r\n\t\t\t? $this->options['disabled']\r\n\t\t\t: array();\r\n\r\n\t\t$this->cryptLib   = $this->options['cryptLib'];\r\n\t\t$this->mimeDetect = $this->options['mimeDetect'];\r\n\r\n\t\t// find available mimetype detect method\r\n\t\t$type = strtolower($this->options['mimeDetect']);\r\n\t\t$type = preg_match('/^(finfo|mime_content_type|internal|auto)$/i', $type) ? $type : 'auto';\r\n\t\t$regexp = '/text\\/x\\-(php|c\\+\\+)/';\r\n\r\n\t\tif (($type == 'finfo' || $type == 'auto') \r\n\t\t&& class_exists('finfo')) {\r\n\t\t\t$tmpFileInfo = @explode(';', @finfo_file(finfo_open(FILEINFO_MIME), __FILE__));\r\n\t\t} else {\r\n\t\t\t$tmpFileInfo = false;\r\n\t\t}\r\n\r\n\t\tif ($tmpFileInfo && preg_match($regexp, array_shift($tmpFileInfo))) {\r\n\t\t\t$type = 'finfo';\r\n\t\t\t$this->finfo = finfo_open(FILEINFO_MIME);\r\n\t\t} elseif (($type == 'mime_content_type' || $type == 'auto') \r\n\t\t&& function_exists('mime_content_type')\r\n\t\t&& preg_match($regexp, array_shift(explode(';', mime_content_type(__FILE__))))) {\r\n\t\t\t$type = 'mime_content_type';\r\n\t\t} else {\r\n\t\t\t$type = 'internal';\r\n\t\t}\r\n\t\t$this->mimeDetect = $type;\r\n\r\n\t\t// load mimes from external file for mimeDetect == 'internal'\r\n\t\t// based on Alexey Sukhotin idea and patch: http://elrte.org/redmine/issues/163\r\n\t\t// file must be in file directory or in parent one \r\n\t\tif ($this->mimeDetect == 'internal' && !self::$mimetypesLoaded) {\r\n\t\t\tself::$mimetypesLoaded = true;\r\n\t\t\t$this->mimeDetect = 'internal';\r\n\t\t\t$file = false;\r\n\t\t\tif (!empty($this->options['mimefile']) && file_exists($this->options['mimefile'])) {\r\n\t\t\t\t$file = $this->options['mimefile'];\r\n\t\t\t} elseif (file_exists(dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t\t$file = dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t\t} elseif (file_exists(dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t\t$file = dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t\t}\r\n\r\n\t\t\tif ($file && file_exists($file)) {\r\n\t\t\t\t$mimecf = file($file);\r\n\r\n\t\t\t\tforeach ($mimecf as $line_num : $line) {\r\n\t\t\t\t\tif (!preg_match('/^\\s*#/', $line)) {\r\n\t\t\t\t\t\t$mime = preg_split('/\\s+/', $line, -1, PREG_SPLIT_NO_EMPTY);\r\n\t\t\t\t\t\tfor ($i = 1, $size = count($mime); $i < $size ; $i++) {\r\n\t\t\t\t\t\t\tif (!isset(self::$mimetypes[$mime[$i]])) {\r\n\t\t\t\t\t\t\t\tself::$mimetypes[$mime[$i]] = $mime[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$this->rootName = empty($this->options['alias']) ? $this->_basename($this->root) : $this->options['alias'];\r\n\t\t$root = $this->stat($this->root);\r\n\r\n\t\tif (!$root) {\r\n\t\t\treturn $this->setError('Root folder does not exists.');\r\n\t\t}\r\n\t\tif (!$root['read'] && !$root['write']) {\r\n\t\t\treturn $this->setError('Root folder has not read and write permissions.');\r\n\t\t}\r\n\r\n\t\t// debug($root);\r\n\r\n\t\tif ($root['read']) {\r\n\t\t\t// check startPath - path to open by default instead of root\r\n\t\t\tif ($this->options['startPath']) {\r\n\t\t\t\t$start = $this->stat($this->options['startPath']);\r\n\t\t\t\tif (!empty($start)\r\n\t\t\t\t&& $start['mime'] == 'directory'\r\n\t\t\t\t&& $start['read']\r\n\t\t\t\t&& empty($start['hidden'])\r\n\t\t\t\t&& $this->_inpath($this->options['startPath'], $this->root)) {\r\n\t\t\t\t\t$this->startPath = $this->options['startPath'];\r\n\t\t\t\t\tif (substr($this->startPath, -1, 1) == $this->options['separator']) {\r\n\t\t\t\t\t\t$this->startPath = substr($this->startPath, 0, -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t$this->options['URL']     = '';\r\n\t\t\t$this->options['tmbURL']  = '';\r\n\t\t\t$this->options['tmbPath'] = '';\r\n\t\t\t// read only volume\r\n\t\t\tarray_unshift($this->attributes, array(\r\n\t\t\t\t'pattern' : '/.*/',\r\n\t\t\t\t'read'    : false\r\n\t\t\t));\r\n\t\t}\r\n\t\t$this->treeDeep = $this->options['treeDeep'] > 0 ? (int)$this->options['treeDeep'] : 1;\r\n\t\t$this->tmbSize  = $this->options['tmbSize'] > 0 ? (int)$this->options['tmbSize'] : 48;\r\n\t\t$this->URL      = $this->options['URL'];\r\n\t\tif ($this->URL && preg_match(\"|[^/?&=]$|\", $this->URL)) {\r\n\t\t\t$this->URL .= '/';\r\n\t\t}\r\n\r\n\t\t$this->tmbURL   = !empty($this->options['tmbURL']) ? $this->options['tmbURL'] : '';\r\n\t\tif ($this->tmbURL && preg_match(\"|[^/?&=]$|\", $this->tmbURL)) {\r\n\t\t\t$this->tmbURL .= '/';\r\n\t\t}\r\n\r\n\t\t$this->nameValidator = is_string($this->options['acceptedName']) && !empty($this->options['acceptedName']) \r\n\t\t\t? $this->options['acceptedName']\r\n\t\t\t: '';\r\n\r\n\t\t$this->_checkArchivers();\r\n\t\t// manual control archive types to create\r\n\t\tif (!empty($this->options['archiveMimes']) && is_array($this->options['archiveMimes'])) {\r\n\t\t\tforeach ($this->archivers['create'] as $mime : $v) {\r\n\t\t\t\tif (!in_array($mime, $this->options['archiveMimes'])) {\r\n\t\t\t\t\tunset($this->archivers['create'][$mime]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// manualy add archivers\r\n\t\tif (!empty($this->options['archivers']['create']) && is_array($this->options['archivers']['create'])) {\r\n\t\t\tforeach ($this->options['archivers']['create'] as $mime : $conf) {\r\n\t\t\t\tif (strpos($mime, 'application/') === 0 \r\n\t\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t\t&& isset($conf['argc']) \r\n\t\t\t\t&& !empty($conf['ext'])\r\n\t\t\t\t&& !isset($this->archivers['create'][$mime])) {\r\n\t\t\t\t\t$this->archivers['create'][$mime] = $conf;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!empty($this->options['archivers']['extract']) && is_array($this->options['archivers']['extract'])) {\r\n\t\t\tforeach ($this->options['archivers']['extract'] as $mime : $conf) {\r\n\t\t\t\tif (strpos($mime, 'application/') === 0\r\n\t\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t\t&& isset($conf['argc']) \r\n\t\t\t\t&& !empty($conf['ext'])\r\n\t\t\t\t&& !isset($this->archivers['extract'][$mime])) {\r\n\t\t\t\t\t$this->archivers['extract'][$mime] = $conf;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$this->configure();\r\n\t\t// echo $this->uploadMaxSize;\r\n\t\t// echo $this->options['uploadMaxSize'];\r\n\t\treturn $this->mounted = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Some \"unmount\" stuffs - may be required by virtual fs\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function umount() {\r\n\t}\r\n\r\n\t/**\r\n\t * Return error message from last failed action\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function error() {\r\n\t\treturn $this->error;\r\n\t}\r\n\r\n\t/**\r\n\t * Set mimetypes allowed to display to client\r\n\t *\r\n\t * @param  array  $mimes\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function setMimesFilter($mimes) {\r\n\t\tif (is_array($mimes)) {\r\n\t\t\t$this->onlyMimes = $mimes;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return root folder hash\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function root() {\r\n\t\treturn $this->encode($this->root);\r\n\t}\r\n\r\n\t/**\r\n\t * Return root or startPath hash\r\n\t *\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function defaultPath() {\r\n\t\treturn $this->encode($this->startPath ? $this->startPath : $this->root);\r\n\t}\r\n\r\n\t/**\r\n\t * Return volume options required by client:\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function options($hash) {\r\n\t\treturn array(\r\n\t\t\t'path'          : $this->_path($this->decode($hash)),\r\n\t\t\t'url'           : $this->URL,\r\n\t\t\t'tmbUrl'        : $this->tmbURL,\r\n\t\t\t'disabled'      : $this->disabled,\r\n\t\t\t'separator'     : $this->separator,\r\n\t\t\t'copyOverwrite' : intval($this->options['copyOverwrite']),\r\n\t\t\t'archivers'     : array(\r\n\t\t\t\t// 'create'  : array_keys($this->archivers['create']),\r\n\t\t\t\t// 'extract' : array_keys($this->archivers['extract']),\r\n\t\t\t\t'create'  : is_array($this->archivers['create'])  ? array_keys($this->archivers['create'])  : array(),\r\n\t\t\t\t'extract' : is_array($this->archivers['extract']) ? array_keys($this->archivers['extract']) : array()\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if command disabled in options\r\n\t *\r\n\t * @param  string  $cmd  command name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function commandDisabled($cmd) {\r\n\t\treturn in_array($cmd, $this->disabled);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if mime is required mimes list\r\n\t *\r\n\t * @param  string     $mime   mime type to check\r\n\t * @param  array      $mimes  allowed mime types list or not set to use client mimes list\r\n\t * @param  bool|null  $empty  what to return on empty list\r\n\t * @return bool|null\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tpublic function mimeAccepted($mime, $mimes = array(), $empty = true) {\r\n\t\t$mimes = !empty($mimes) ? $mimes : $this->onlyMimes;\r\n\t\tif (empty($mimes)) {\r\n\t\t\treturn $empty;\r\n\t\t}\r\n\t\treturn $mime == 'directory'\r\n\t\t\t|| in_array('all', $mimes)\r\n\t\t\t|| in_array('All', $mimes)\r\n\t\t\t|| in_array($mime, $mimes)\r\n\t\t\t|| in_array(substr($mime, 0, strpos($mime, '/')), $mimes);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if voume is readable.\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function isReadable() {\r\n\t\t$stat = $this->stat($this->root);\r\n\t\treturn $stat['read'];\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if copy from this volume allowed\r\n\t *\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function copyFromAllowed() {\r\n\t\treturn !!$this->options['copyFrom'];\r\n\t}\r\n\r\n\t/**\r\n\t * Return file path related to root\r\n\t *\r\n\t * @param  string   $hash  file hash\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function path($hash) {\r\n\t\treturn $this->_path($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Return file real path if file exists\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function realpath($hash) {\r\n\t\t$path = $this->decode($hash);\r\n\t\treturn $this->stat($path) ? $path : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return list of moved/overwrited files\r\n\t *\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function removed() {\r\n\t\treturn $this->removed;\r\n\t}\r\n\r\n\t/**\r\n\t * Clean removed files list\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function resetRemoved() {\r\n\t\t$this->removed = array();\r\n\t}\r\n\r\n\t/**\r\n\t * Return file/dir hash or first founded child hash with required attr == $val\r\n\t *\r\n\t * @param  string   $hash  file hash\r\n\t * @param  string   $attr  attribute name\r\n\t * @param  bool     $val   attribute value\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function closest($hash, $attr, $val) {\r\n\t\treturn ($path = $this->closestByAttr($this->decode($hash), $attr, $val)) ? $this->encode($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return file info or false on error\r\n\t *\r\n\t * @param  string   $hash      file hash\r\n\t * @param  bool     $realpath  add realpath field to file info\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function file($hash) {\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\treturn ($file = $this->stat($path)) ? $file : $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\r\n\t\tif (($file = $this->stat($path)) != false) {\r\n\t\t\tif ($realpath) {\r\n\t\t\t\t$file['realpath'] = $path;\r\n\t\t\t}\r\n\t\t\treturn $file;\r\n\t\t}\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\t/**\r\n\t * Return folder info\r\n\t *\r\n\t * @param  string   $hash  folder hash\r\n\t * @param  bool     $hidden  return hidden file info\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function dir($hash, $resolveLink=false) {\r\n\t\tif (($dir = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_DIR_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif ($resolveLink && !empty($dir['thash'])) {\r\n\t\t\t$dir = $this->file($dir['thash']);\r\n\t\t}\r\n\r\n\t\treturn $dir && $dir['mime'] == 'directory' && empty($dir['hidden']) \r\n\t\t\t? $dir \r\n\t\t\t: $this->setError(elFinder::ERROR_NOT_DIR);\r\n\t}\r\n\r\n\t/**\r\n\t * Return directory content or false on error\r\n\t *\r\n\t * @param  string   $hash   file hash\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function scandir($hash) {\r\n\t\tif (($dir = $this->dir($hash)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $dir['read']\r\n\t\t\t? $this->getScandir($this->decode($hash))\r\n\t\t\t: $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t/**\r\n\t * Return dir files names list\r\n\t * \r\n\t * @param  string  $hash   file hash\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function ls($hash) {\r\n\t\tif (($dir = $this->dir($hash)) == false || !$dir['read']) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$list = array();\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\tforeach ($this->getScandir($path) as $stat) {\r\n\t\t\tif (empty($stat['hidden']) && $this->mimeAccepted($stat['mime'])) {\r\n\t\t\t\t$list[] = $stat['name'];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $list;\r\n\t}\r\n\r\n\t/**\r\n\t * Return subfolders for required folder or false on error\r\n\t *\r\n\t * @param  string   $hash  folder hash or empty string to get tree from root folder\r\n\t * @param  int      $deep  subdir deep\r\n\t * @param  string   $exclude  dir hash which subfolders must be exluded from result, required to not get stat twice on cwd subfolders\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function tree($hash='', $deep=0, $exclude='') {\r\n\t\t$path = $hash ? $this->decode($hash) : $this->root;\r\n\r\n\t\tif (($dir = $this->stat($path)) == false || $dir['mime'] != 'directory') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$dirs = $this->gettree($path, $deep > 0 ? $deep -1 : $this->treeDeep-1, $exclude ? $this->decode($exclude) : null);\r\n\t\tarray_unshift($dirs, $dir);\r\n\t\treturn $dirs;\r\n\t}\r\n\r\n\t/**\r\n\t * Return part of dirs tree from required dir up to root dir\r\n\t *\r\n\t * @param  string  $hash  directory hash\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function parents($hash) {\r\n\t\tif (($current = $this->dir($hash)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\t\t$tree = array();\r\n\r\n\t\twhile ($path && $path != $this->root) {\r\n\t\t\t$path = $this->_dirname($path);\r\n\t\t\t$stat = $this->stat($path);\r\n\t\t\tif (!empty($stat['hidden']) || !$stat['read']) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tarray_unshift($tree, $stat);\r\n\t\t\tif ($path != $this->root) {\r\n\t\t\t\tforeach ($this->gettree($path, 0) as $dir) {\r\n\t\t\t\t\tif (!in_array($dir, $tree)) {\r\n\t\t\t\t\t\t$tree[] = $dir;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $tree ? $tree : array($current);\r\n\t}\r\n\r\n\t/**\r\n\t * Create thumbnail for required file and return its name of false on failed\r\n\t *\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function tmb($hash) {\r\n\t\t$path = $this->decode($hash);\r\n\t\t$stat = $this->stat($path);\r\n\r\n\t\tif (isset($stat['tmb'])) {\r\n\t\t\treturn $stat['tmb'] == \"1\" ? $this->createTmb($path, $stat) : $stat['tmb'];\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return file size / total directory size\r\n\t *\r\n\t * @param  string   file hash\r\n\t * @return int\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function size($hash) {\r\n\t\treturn $this->countSize($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Open file for reading and return file pointer\r\n\t *\r\n\t * @param  string   file hash\r\n\t * @return Resource\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function open($hash) {\r\n\t\tif (($file = $this->file($hash)) == false\r\n\t\t|| $file['mime'] == 'directory') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $this->_fopen($this->decode($hash), 'rb');\r\n\t}\r\n\r\n\t/**\r\n\t * Close file pointer\r\n\t *\r\n\t * @param  Resource  $fp   file pointer\r\n\t * @param  string    $hash file hash\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function close($fp, $hash) {\r\n\t\t$this->_fclose($fp, $this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Create directory and return dir info\r\n\t *\r\n\t * @param  string   $dst  destination directory\r\n\t * @param  string   $name directory name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function mkdir($dst, $name) {\r\n\t\tif ($this->commandDisabled('mkdir')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\tif (!$dir['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($dst);\r\n\t\t$dst  = $this->_joinPath($path, $name);\r\n\t\t$stat = $this->stat($dst); \r\n\t\tif (!empty($stat)) { \r\n\t\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_mkdir($path, $name)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Create empty file and return its info\r\n\t *\r\n\t * @param  string   $dst  destination directory\r\n\t * @param  string   $name file name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function mkfile($dst, $name) {\r\n\t\tif ($this->commandDisabled('mkfile')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($dst);\r\n\r\n\t\tif (!$dir['write'] || !$this->allowCreate($path, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif ($this->stat($this->_joinPath($path, $name))) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t\t}\r\n\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_mkfile($path, $name)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Rename file and return file info\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @param  string  $name  new file name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function rename($hash, $name) {\r\n\t\tif ($this->commandDisabled('rename')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME, $name);\r\n\t\t}\r\n\r\n\t\tif (!($file = $this->file($hash))) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif ($name == $file['name']) {\r\n\t\t\treturn $file;\r\n\t\t}\r\n\r\n\t\tif (!empty($file['locked'])) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $file['name']);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\t\t$dir  = $this->_dirname($path);\r\n\t\t$stat = $this->stat($this->_joinPath($dir, $name));\r\n\t\tif ($stat) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t\t}\r\n\r\n\t\tif (!$this->allowCreate($dir, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$this->rmTmb($file); // remove old name tmbs, we cannot do this after dir move\r\n\r\n\r\n\t\tif (($path = $this->_move($path, $dir, $name))) {\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $this->stat($path);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Create file copy with suffix \"copy number\" and return its info\r\n\t *\r\n\t * @param  string   $hash    file hash\r\n\t * @param  string   $suffix  suffix to add to file name\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function duplicate($hash, $suffix='copy') {\r\n\t\tif ($this->commandDisabled('duplicate')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, '#'.$hash, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\t\t$dir  = $this->_dirname($path);\r\n\t\t$name = $this->uniqueName($dir, $this->_basename($path), ' '.$suffix.' ');\r\n\r\n\t\tif (!$this->allowCreate($dir, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\treturn ($path = $this->copy($path, $dir, $name)) == false\r\n\t\t\t? false\r\n\t\t\t: $this->stat($path);\r\n\t}\r\n\r\n\t/**\r\n\t * Save uploaded file. \r\n\t * On success return array with new file stat and with removed file hash (if existed file was replaced)\r\n\t *\r\n\t * @param  Resource $fp      file pointer\r\n\t * @param  string   $dst     destination folder hash\r\n\t * @param  string   $src     file name\r\n\t * @param  string   $tmpname file tmp name - required to detect mime type\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function upload($fp, $dst, $name, $tmpname) {\r\n\t\tif ($this->commandDisabled('upload')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\tif (!$dir['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (!$this->nameAccepted($name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\t$mime = $this->mimetype($this->mimeDetect == 'internal' ? $name : $tmpname, $name); \r\n\t\tif ($mime == 'unknown' && $this->mimeDetect == 'internal') {\r\n\t\t\t$mime = elFinderVolumeDriver::mimetypeInternalDetect($name);\r\n\t\t}\r\n\r\n\t\t// logic based on http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#order\r\n\t\t$allow  = $this->mimeAccepted($mime, $this->uploadAllow, null);\r\n\t\t$deny   = $this->mimeAccepted($mime, $this->uploadDeny,  null);\r\n\t\t$upload = true; // default to allow\r\n\t\tif (strtolower($this->uploadOrder[0]) == 'allow') { // array('allow', 'deny'), default is to 'deny'\r\n\t\t\t$upload = false; // default is deny\r\n\t\t\tif (!$deny && ($allow === true)) { // match only allow\r\n\t\t\t\t$upload = true;\r\n\t\t\t}// else (both match | no match | match only deny) { deny }\r\n\t\t} else { // array('deny', 'allow'), default is to 'allow' - this is the default rule\r\n\t\t\t$upload = true; // default is allow\r\n\t\t\tif (($deny === true) && !$allow) { // match only deny\r\n\t\t\t\t$upload = false;\r\n\t\t\t} // else (both match | no match | match only allow) { allow }\r\n\t\t}\r\n\t\tif (!$upload) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_MIME);\r\n\t\t}\r\n\r\n\t\tif ($this->uploadMaxSize > 0 && filesize($tmpname) > $this->uploadMaxSize) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_SIZE);\r\n\t\t}\r\n\r\n\t\t$dstpath = $this->decode($dst);\r\n\t\t$test    = $this->_joinPath($dstpath, $name);\r\n\r\n\t\t$file = $this->stat($test);\r\n\t\t$this->clearcache();\r\n\r\n\t\tif ($file) { // file exists\r\n\t\t\tif ($this->options['uploadOverwrite']) {\r\n\t\t\t\tif (!$file['write']) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t\t} elseif ($file['mime'] == 'directory') {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $name);\r\n\t\t\t\t} \r\n\t\t\t\t$this->remove($test);\r\n\t\t\t} else {\r\n\t\t\t\t$name = $this->uniqueName($dstpath, $name, '-', false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$stat = array(\r\n\t\t\t'mime'   : $mime, \r\n\t\t\t'width'  : 0, \r\n\t\t\t'height' : 0, \r\n\t\t\t'size'   : filesize($tmpname));\r\n\r\n\t\t// $w = $h = 0;\r\n\t\tif (strpos($mime, 'image') === 0 && ($s = getimagesize($tmpname))) {\r\n\t\t\t$stat['width'] = $s[0];\r\n\t\t\t$stat['height'] = $s[1];\r\n\t\t}\r\n\t\t// $this->clearcache();\r\n\t\tif (($path = $this->_save($fp, $dstpath, $name, $stat)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn $this->stat($path);\r\n\t}\r\n\r\n\t/**\r\n\t * Paste files\r\n\t *\r\n\t * @param  Object  $volume  source volume\r\n\t * @param  string  $source  file hash\r\n\t * @param  string  $dst     destination dir hash\r\n\t * @param  bool    $rmSrc   remove source after copy?\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function paste($volume, $src, $dst, $rmSrc = false) {\r\n\t\t$err = $rmSrc ? elFinder::ERROR_MOVE : elFinder::ERROR_COPY;\r\n\r\n\t\tif ($this->commandDisabled('paste')) {\r\n\t\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $volume->file($src, $rmSrc)) == false) {\r\n\t\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\t$name = $file['name'];\r\n\t\t$errpath = $volume->path($src);\r\n\r\n\t\tif (($dir = $this->dir($dst)) == false) {\r\n\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t\t}\r\n\r\n\t\tif (!$dir['write'] || !$file['read']) {\r\n\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$destination = $this->decode($dst);\r\n\r\n\t\tif (($test = $volume->closest($src, $rmSrc ? 'locked' : 'read', $rmSrc))) {\r\n\t\t\treturn $rmSrc\r\n\t\t\t\t? $this->setError($err, $errpath, elFinder::ERROR_LOCKED, $volume->path($test))\r\n\t\t\t\t: $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$test = $this->_joinPath($destination, $name);\r\n\t\t$stat = $this->stat($test);\r\n\t\t$this->clearcache();\r\n\t\tif ($stat) {\r\n\t\t\tif ($this->options['copyOverwrite']) {\r\n\t\t\t\t// do not replace file with dir or dir with file\r\n\t\t\t\tif (!$this->isSameType($file['mime'], $stat['mime'])) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $this->_path($test));\r\n\t\t\t\t}\r\n\t\t\t\t// existed file is not writable\r\n\t\t\t\tif (!$stat['write']) {\r\n\t\t\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t\t\t}\r\n\t\t\t\t// existed file locked or has locked child\r\n\t\t\t\tif (($locked = $this->closestByAttr($test, 'locked', true))) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($locked));\r\n\t\t\t\t}\r\n\t\t\t\t// target is entity file of alias\r\n\t\t\t\tif ($volume == $this && ($test == @$file['target'] || $test == $this->decode($src))) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $errpath);\r\n\t\t\t\t}\r\n\t\t\t\t// remove existed file\r\n\t\t\t\tif (!$this->remove($test)) {\r\n\t\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $this->_path($test));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$name = $this->uniqueName($destination, $name, ' ', false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// copy/move inside current volume\r\n\t\tif ($volume == $this) {\r\n\t\t\t$source = $this->decode($src);\r\n\t\t\t// do not copy into itself\r\n\t\t\tif ($this->_inpath($destination, $source)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY_INTO_ITSELF, $errpath);\r\n\t\t\t}\r\n\t\t\t$method = $rmSrc ? 'move' : 'copy';\r\n\t\t\treturn ($path = $this->$method($source, $destination, $name)) ? $this->stat($path) : false;\r\n\t\t}\r\n\r\n\t\t// copy/move from another volume\r\n\t\tif (!$this->options['copyTo'] || !$volume->copyFromAllowed()) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($path = $this->copyFrom($volume, $src, $destination, $name)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif ($rmSrc) {\r\n\t\t\tif ($volume->rm($src)) {\r\n\t\t\t\t$this->removed[] = $file;\r\n\t\t\t} else {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_MOVE, $errpath, elFinder::ERROR_RM_SRC);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $this->stat($path);\r\n\t}\r\n\r\n\t/**\r\n\t * Return file contents\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function getContents($hash) {\r\n\t\t$file = $this->file($hash);\r\n\r\n\t\tif (!$file) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif ($file['mime'] == 'directory') {\r\n\t\t\treturn $this->setError(elFinder::ERROR_NOT_FILE);\r\n\t\t}\r\n\r\n\t\tif (!$file['read']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\treturn $this->_getContents($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Put content in text file and return file info.\r\n\t *\r\n\t * @param  string  $hash     file hash\r\n\t * @param  string  $content  new file content\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function putContents($hash, $content) {\r\n\t\tif ($this->commandDisabled('edit')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\tif (!($file = $this->file($hash))) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif (!$file['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn $this->_filePutContents($path, $content) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Extract files from archive\r\n\t *\r\n\t * @param  string  $hash  archive hash\r\n\t * @return array|bool\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tpublic function extract($hash) {\r\n\t\tif ($this->commandDisabled('extract')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\t$archiver = isset($this->archivers['extract'][$file['mime']])\r\n\t\t\t? $this->archivers['extract'][$file['mime']]\r\n\t\t\t: false;\r\n\r\n\t\tif (!$archiver) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_NOT_ARCHIVE);\r\n\t\t}\r\n\r\n\t\t$path   = $this->decode($hash);\r\n\t\t$parent = $this->stat($this->_dirname($path));\r\n\r\n\t\tif (!$file['read'] || !$parent['write']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_extract($path, $archiver)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Add files to archive\r\n\t *\r\n\t * @return void\r\n\t **/\r\n\tpublic function archive($hashes, $mime) {\r\n\t\tif ($this->commandDisabled('archive')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$archiver = isset($this->archivers['create'][$mime])\r\n\t\t\t? $this->archivers['create'][$mime]\r\n\t\t\t: false;\r\n\r\n\t\tif (!$archiver) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_ARCHIVE_TYPE);\r\n\t\t}\r\n\r\n\t\t$files = array();\r\n\r\n\t\tforeach ($hashes as $hash) {\r\n\t\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\t\treturn $this->error(elFinder::ERROR_FILE_NOT_FOUND, '#'+$hash);\r\n\t\t\t}\r\n\t\t\tif (!$file['read']) {\r\n\t\t\t\treturn $this->error(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t}\r\n\t\t\t$path = $this->decode($hash);\r\n\t\t\tif (!isset($dir)) {\r\n\t\t\t\t$dir = $this->_dirname($path);\r\n\t\t\t\t$stat = $this->stat($dir);\r\n\t\t\t\tif (!$stat['write']) {\r\n\t\t\t\t\treturn $this->error(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$files[] = $this->_basename($path);\r\n\t\t}\r\n\r\n\t\t$name = (count($files) == 1 ? $files[0] : 'Archive').'.'.$archiver['ext'];\r\n\t\t$name = $this->uniqueName($dir, $name, '');\r\n\t\t$this->clearcache();\r\n\t\treturn ($path = $this->_archive($dir, $files, $name, $archiver)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Resize image\r\n\t *\r\n\t * @param  string   $hash    image file\r\n\t * @param  int      $width   new width\r\n\t * @param  int      $height  new height\r\n\t * @param  int      $x       X start poistion for crop\r\n\t * @param  int      $y       Y start poistion for crop\r\n\t * @param  string   $mode    action how to mainpulate image\r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t * @author nao-pon\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tpublic function resize($hash, $width, $height, $x, $y, $mode = 'resize', $bg = '', $degree = 0) {\r\n\t\tif ($this->commandDisabled('resize')) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif (!$file['write'] || !$file['read']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\t$path = $this->decode($hash);\r\n\r\n\t\tif (!$this->canResize($path, $file)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_UNSUPPORT_TYPE);\r\n\t\t}\r\n\r\n\t\tswitch($mode) {\r\n\r\n\t\t\tcase 'propresize':\r\n\t\t\t\t$result = $this->imgResize($path, $width, $height, true, true);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'crop':\r\n\t\t\t\t$result = $this->imgCrop($path, $width, $height, $x, $y);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'fitsquare':\r\n\t\t\t\t$result = $this->imgSquareFit($path, $width, $height, 'center', 'middle', ($bg ? $bg : $this->options['tmbBgColor']));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'rotate':\r\n\t\t\t\t$result = $this->imgRotate($path, $degree, ($bg ? $bg : $this->options['tmbBgColor']));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t$result = $this->imgResize($path, $width, $height, false, true);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ($result) {\r\n\t\t\t$this->rmTmb($file);\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $this->stat($path);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove file/dir\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function rm($hash) {\r\n\t\treturn $this->commandDisabled('rm')\r\n\t\t\t? array(elFinder::ERROR_ACCESS_DENIED)\r\n\t\t\t: $this->remove($this->decode($hash));\r\n\t}\r\n\r\n\t/**\r\n\t * Search files\r\n\t *\r\n\t * @param  string  $q  search string\r\n\t * @param  array   $mimes\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function search($q, $mimes) {\r\n\t\treturn $this->doSearch($this->root, $q, $mimes);\r\n\t}\r\n\r\n\t/**\r\n\t * Return image dimensions\r\n\t *\r\n\t * @param  string  $hash  file hash\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function dimensions($hash) {\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $this->_dimensions($this->decode($hash), $file['mime']);\r\n\t}\r\n\r\n\t/**\r\n\t * Save error message\r\n\t *\r\n\t * @param  array  error \r\n\t * @return false\r\n\t * @author Dmitry(dio) Levashov\r\n\t **/\r\n\tprotected function setError($error) {\r\n\r\n\t\t$this->error = array();\r\n\r\n\t\tforeach (func_get_args() as $err) {\r\n\t\t\tif (is_array($err)) {\r\n\t\t\t\t$this->error = array_merge($this->error, $err);\r\n\t\t\t} else {\r\n\t\t\t\t$this->error[] = $err;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// $this->error = is_array($error) ? $error : func_get_args();\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*********************************************************************/\r\n\t/*                               FS API                              */\r\n\t/*********************************************************************/\r\n\r\n\t/***************** paths *******************/\r\n\r\n\t/**\r\n\t * Encode path into hash\r\n\t *\r\n\t * @param  string  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function encode($path) {\r\n\t\tif ($path !== '') {\r\n\r\n\t\t\t// cut ROOT from $path for security reason, even if hacker decodes the path he will not know the root\r\n\t\t\t$p = $this->_relpath($path);\r\n\t\t\t// if reqesting root dir $path will be empty, then assign '/' as we cannot leave it blank for crypt\r\n\t\t\tif ($p === '')\t{\r\n\t\t\t\t$p = DIRECTORY_SEPARATOR;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO crypt path and return hash\r\n\t\t\t$hash = $this->crypt($p);\r\n\t\t\t// hash is used as id in HTML that means it must contain vaild chars\r\n\t\t\t// make base64 html safe and append prefix in begining\r\n\t\t\t$hash = strtr(base64_encode($hash), '+/=', '-_.');\r\n\t\t\t// remove dots '.' at the end, before it was '=' in base64\r\n\t\t\t$hash = rtrim($hash, '.'); \r\n\t\t\t// append volume id to make hash unique\r\n\t\t\treturn $this->id.$hash;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decode path from hash\r\n\t *\r\n\t * @param  string  file hash\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function decode($hash) {\r\n\t\tif (strpos($hash, $this->id) === 0) {\r\n\t\t\t// cut volume id after it was prepended in encode\r\n\t\t\t$h = substr($hash, strlen($this->id));\r\n\t\t\t// replace HTML safe base64 to normal\r\n\t\t\t$h = base64_decode(strtr($h, '-_.', '+/='));\r\n\t\t\t// TODO uncrypt hash and return path\r\n\t\t\t$path = $this->uncrypt($h); \r\n\t\t\t// append ROOT to path after it was cut in encode\r\n\t\t\treturn $this->_abspath($path);//$this->root.($path == DIRECTORY_SEPARATOR ? '' : DIRECTORY_SEPARATOR.$path); \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return crypted path \r\n\t * Not implemented\r\n\t *\r\n\t * @param  string  path\r\n\t * @return mixed\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function crypt($path) {\r\n\t\treturn $path;\r\n\t}\r\n\r\n\t/**\r\n\t * Return uncrypted path \r\n\t * Not implemented\r\n\t *\r\n\t * @param  mixed  hash\r\n\t * @return mixed\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function uncrypt($hash) {\r\n\t\treturn $hash;\r\n\t}\r\n\r\n\t/**\r\n\t * Validate file name based on $this->options['acceptedName'] regexp\r\n\t *\r\n\t * @param  string  $name  file name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function nameAccepted($name) {\r\n\t\tif ($this->nameValidator) {\r\n\t\t\tif (function_exists($this->nameValidator)) {\r\n\t\t\t\t$f = $this->nameValidator;\r\n\t\t\t\treturn $f($name);\r\n\t\t\t}\r\n\r\n\t\t\treturn preg_match($this->nameValidator, $name);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Return new unique name based on file name and suffix\r\n\t *\r\n\t * @param  string  $path    file path\r\n\t * @param  string  $suffix  suffix append to name\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tpublic function uniqueName($dir, $name, $suffix = ' copy', $checkNum=true) {\r\n\t\t$ext  = '';\r\n\r\n\t\tif (preg_match('/\\.((tar\\.(gz|bz|bz2|z|lzo))|cpio\\.gz|ps\\.gz|xcf\\.(gz|bz2)|[a-z0-9]{1,4})$/i', $name, $m)) {\r\n\t\t\t$ext  = '.'.$m[1];\r\n\t\t\t$name = substr($name, 0,  strlen($name)-strlen($m[0]));\r\n\t\t} \r\n\r\n\t\tif ($checkNum && preg_match('/('.$suffix.')(\\d*)$/i', $name, $m)) {\r\n\t\t\t$i    = (int)$m[2];\r\n\t\t\t$name = substr($name, 0, strlen($name)-strlen($m[2]));\r\n\t\t} else {\r\n\t\t\t$i     = 1;\r\n\t\t\t$name .= $suffix;\r\n\t\t}\r\n\t\t$max = $i+100000;\r\n\r\n\t\twhile ($i <= $max) {\r\n\t\t\t$n = $name.($i > 0 ? $i : '').$ext;\r\n\r\n\t\t\tif (!$this->stat($this->_joinPath($dir, $n))) {\r\n\t\t\t\t$this->clearcache();\r\n\t\t\t\treturn $n;\r\n\t\t\t}\r\n\t\t\t$i++;\r\n\t\t}\r\n\t\treturn $name.md5($dir).$ext;\r\n\t}\r\n\r\n\t/*********************** file stat *********************/\r\n\r\n\t/**\r\n\t * Check file attribute\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  string  $name  attribute name (read|write|locked|hidden)\r\n\t * @param  bool    $val   attribute value returned by file system\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function attr($path, $name, $val=null) {\r\n\t\tif (!isset($this->defaults[$name])) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\t\t$perm = null;\r\n\r\n\t\tif ($this->access) {\r\n\t\t\t$perm = call_user_func($this->access, $name, $path, $this->options['accessControlData'], $this);\r\n\r\n\t\t\tif ($perm !== null) {\r\n\t\t\t\treturn !!$perm;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($this->separator != '/') {\r\n\t\t\t$path = str_replace($this->separator, '/', $this->_relpath($path));\r\n\t\t} else {\r\n\t\t\t$path = $this->_relpath($path);\r\n\t\t}\r\n\r\n\t\t$path = '/'.$path;\r\n\r\n\t\tfor ($i = 0, $c = count($this->attributes); $i < $c; $i++) {\r\n\t\t\t$attrs = $this->attributes[$i];\r\n\r\n\t\t\tif (isset($attrs[$name]) && isset($attrs['pattern']) && preg_match($attrs['pattern'], $path)) {\r\n\t\t\t\t$perm = $attrs[$name];\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\treturn $perm === null ? (is_null($val)? $this->defaults[$name] : $val) : !!$perm;\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if file with given name can be created in given folder.\r\n\t *\r\n\t * @param string $dir  parent dir path\r\n\t * @param string $name new file name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function allowCreate($dir, $name) {\r\n\t\t$path = $this->_joinPath($dir, $name);\r\n\t\t$perm = null;\r\n\r\n\t\tif ($this->access) {\r\n\t\t\t$perm = call_user_func($this->access, 'write', $path, $this->options['accessControlData'], $this);\t\t\t\r\n\t\t\tif ($perm !== null) {\r\n\t\t\t\treturn !!$perm;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$testPath = $this->separator.$this->_relpath($path);\r\n\r\n\t\tfor ($i = 0, $c = count($this->attributes); $i < $c; $i++) {\r\n\t\t\t$attrs = $this->attributes[$i];\r\n\r\n\t\t\tif (isset($attrs['write']) && isset($attrs['pattern']) && preg_match($attrs['pattern'], $testPath)) {\r\n\t\t\t\t$perm = $attrs['write'];\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\treturn $perm === null ? true : $perm;\r\n\t}\r\n\r\n\t/**\r\n\t * Return fileinfo \r\n\t *\r\n\t * @param  string  $path  file cache\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function stat($path) {\r\n\t\tif ($path === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn isset($this->cache[$path])\r\n\t\t\t? $this->cache[$path]\r\n\t\t\t: $this->updateCache($path, $this->_stat($path));\r\n\t}\r\n\r\n\t/**\r\n\t * Put file stat in cache and return it\r\n\t *\r\n\t * @param  string  $path   file path\r\n\t * @param  array   $stat   file stat\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function updateCache($path, $stat) {\r\n\t\tif (empty($stat) || !is_array($stat)) {\r\n\t\t\treturn $this->cache[$path] = array();\r\n\t\t}\r\n\r\n\t\t$stat['hash'] = $this->encode($path);\r\n\r\n\t\t$root = $path == $this->root;\r\n\r\n\t\tif ($root) {\r\n\t\t\t$stat['volumeid'] = $this->id;\r\n\t\t\tif ($this->rootName) {\r\n\t\t\t\t$stat['name'] = $this->rootName;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (!isset($stat['name']) || !strlen($stat['name'])) {\r\n\t\t\t\t$stat['name'] = $this->_basename($path);\r\n\t\t\t}\r\n\t\t\tif (empty($stat['phash'])) {\r\n\t\t\t\t$stat['phash'] = $this->encode($this->_dirname($path));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// fix name if required\r\n\t\tif ($this->options['utf8fix'] && $this->options['utf8patterns'] && $this->options['utf8replace']) {\r\n\t\t\t$stat['name'] = json_decode(str_replace($this->options['utf8patterns'], $this->options['utf8replace'], json_encode($stat['name'])));\r\n\t\t}\r\n\r\n\r\n\t\tif (empty($stat['mime'])) {\r\n\t\t\t$stat['mime'] = $this->mimetype($stat['name']);\r\n\t\t}\r\n\r\n\t\t// @todo move dateformat to client\r\n\t\t// $stat['date'] = isset($stat['ts'])\r\n\t\t// \t? $this->formatDate($stat['ts'])\r\n\t\t// \t: 'unknown';\r\n\r\n\t\tif (!isset($stat['size'])) {\r\n\t\t\t$stat['size'] = 'unknown';\r\n\t\t}\t\r\n\r\n\t\t$stat['read']  = intval($this->attr($path, 'read', isset($stat['read']) ? !!$stat['read'] : null));\r\n\t\t$stat['write'] = intval($this->attr($path, 'write', isset($stat['write']) ? !!$stat['write'] : null));\r\n\t\tif ($root) {\r\n\t\t\t$stat['locked'] = 1;\r\n\t\t} elseif ($this->attr($path, 'locked', !empty($stat['locked']))) {\r\n\t\t\t$stat['locked'] = 1;\r\n\t\t} else {\r\n\t\t\tunset($stat['locked']);\r\n\t\t}\r\n\r\n\t\tif ($root) {\r\n\t\t\tunset($stat['hidden']);\r\n\t\t} elseif ($this->attr($path, 'hidden', !empty($stat['hidden'])) \r\n\t\t|| !$this->mimeAccepted($stat['mime'])) {\r\n\t\t\t$stat['hidden'] = $root ? 0 : 1;\r\n\t\t} else {\r\n\t\t\tunset($stat['hidden']);\r\n\t\t}\r\n\r\n\t\tif ($stat['read'] && empty($stat['hidden'])) {\r\n\r\n\t\t\tif ($stat['mime'] == 'directory') {\r\n\t\t\t\t// for dir - check for subdirs\r\n\r\n\t\t\t\tif ($this->options['checkSubfolders']) {\r\n\t\t\t\t\tif (isset($stat['dirs'])) {\r\n\t\t\t\t\t\tif ($stat['dirs']) {\r\n\t\t\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tunset($stat['dirs']);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} elseif (!empty($stat['alias']) && !empty($stat['target'])) {\r\n\t\t\t\t\t\t$stat['dirs'] = isset($this->cache[$stat['target']])\r\n\t\t\t\t\t\t\t? intval(isset($this->cache[$stat['target']]['dirs']))\r\n\t\t\t\t\t\t\t: $this->_subdirs($stat['target']);\r\n\r\n\t\t\t\t\t} elseif ($this->_subdirs($path)) {\r\n\t\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// for files - check for thumbnails\r\n\t\t\t\t$p = isset($stat['target']) ? $stat['target'] : $path;\r\n\t\t\t\tif ($this->tmbURL && !isset($stat['tmb']) && $this->canCreateTmb($p, $stat)) {\r\n\t\t\t\t\t$tmb = $this->gettmb($p, $stat);\r\n\t\t\t\t\t$stat['tmb'] = $tmb ? $tmb : 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!empty($stat['alias']) && !empty($stat['target'])) {\r\n\t\t\t$stat['thash'] = $this->encode($stat['target']);\r\n\t\t\tunset($stat['target']);\r\n\t\t}\r\n\r\n\t\treturn $this->cache[$path] = $stat;\r\n\t}\r\n\r\n\t/**\r\n\t * Get stat for folder content and put in cache\r\n\t *\r\n\t * @param  string  $path\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function cacheDir($path) {\r\n\t\t$this->dirsCache[$path] = array();\r\n\r\n\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\tif (($stat = $this->stat($p)) && empty($stat['hidden'])) {\r\n\t\t\t\t$this->dirsCache[$path][] = $p;\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Clean cache\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function clearcache() {\r\n\t\t$this->cache = $this->dirsCache = array();\r\n\t}\r\n\r\n\t/**\r\n\t * Return file mimetype\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function mimetype($path, $name = '') {\r\n\t\t$type = '';\r\n\r\n\t\tif ($this->mimeDetect == 'finfo') {\r\n\t\t\tif ($type = @finfo_file($this->finfo, $path)) {\r\n\t\t\t\tif ($name === '') {\r\n\t\t\t\t\t$name = $path;\r\n\t\t\t\t}\r\n\t\t\t\t$ext = (false === $pos = strrpos($name, '.')) ? '' : substr($name, $pos + 1);\r\n\t\t\t\tif ($ext && preg_match('~^application/(?:octet-stream|(?:x-)?zip)~', $type)) {\r\n\t\t\t\t\tif (isset(elFinderVolumeDriver::$mimetypes[$ext])) $type = elFinderVolumeDriver::$mimetypes[$ext];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} elseif ($type == 'mime_content_type') {\r\n\t\t\t$type = mime_content_type($path);\r\n\t\t} else {\r\n\t\t\t$type = elFinderVolumeDriver::mimetypeInternalDetect($path);\r\n\t\t}\r\n\r\n\t\t$type = explode(';', $type);\r\n\t\t$type = trim($type[0]);\r\n\r\n\t\tif (in_array($type, array('application/x-empty', 'inode/x-empty'))) {\r\n\t\t\t// finfo return this mime for empty files\r\n\t\t\t$type = 'text/plain';\r\n\t\t} elseif ($type == 'application/x-zip') {\r\n\t\t\t// http://elrte.org/redmine/issues/163\r\n\t\t\t$type = 'application/zip';\r\n\t\t}\r\n\r\n\t\treturn $type == 'unknown' && $this->mimeDetect != 'internal'\r\n\t\t\t? elFinderVolumeDriver::mimetypeInternalDetect($path)\r\n\t\t\t: $type;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Detect file mimetype using \"internal\" method\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tstatic protected function mimetypeInternalDetect($path) {\r\n\t\t$pinfo = pathinfo($path); \r\n\t\t$ext   = isset($pinfo['extension']) ? strtolower($pinfo['extension']) : '';\r\n\t\treturn isset(elFinderVolumeDriver::$mimetypes[$ext]) ? elFinderVolumeDriver::$mimetypes[$ext] : 'unknown';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Return file/total directory size\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return int\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function countSize($path) {\r\n\t\t$stat = $this->stat($path);\r\n\r\n\t\tif (empty($stat) || !$stat['read'] || !empty($stat['hidden'])) {\r\n\t\t\treturn 'unknown';\r\n\t\t}\r\n\r\n\t\tif ($stat['mime'] != 'directory') {\r\n\t\t\treturn $stat['size'];\r\n\t\t}\r\n\r\n\t\t$subdirs = $this->options['checkSubfolders'];\r\n\t\t$this->options['checkSubfolders'] = true;\r\n\t\t$result = 0;\r\n\t\tforeach ($this->getScandir($path) as $stat) {\r\n\t\t\t$size = $stat['mime'] == 'directory' && $stat['read'] \r\n\t\t\t\t? $this->countSize($this->_joinPath($path, $stat['name'])) \r\n\t\t\t\t: (isset($stat['size']) ? intval($stat['size']) : 0);\r\n\t\t\tif ($size > 0) {\r\n\t\t\t\t$result += $size;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$this->options['checkSubfolders'] = $subdirs;\r\n\t\treturn $result;\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if all mimes is directory or files\r\n\t *\r\n\t * @param  string  $mime1  mimetype\r\n\t * @param  string  $mime2  mimetype\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function isSameType($mime1, $mime2) {\r\n\t\treturn ($mime1 == 'directory' && $mime1 == $mime2) || ($mime1 != 'directory' && $mime2 != 'directory');\r\n\t}\r\n\r\n\t/**\r\n\t * If file has required attr == $val - return file path,\r\n\t * If dir has child with has required attr == $val - return child path\r\n\t *\r\n\t * @param  string   $path  file path\r\n\t * @param  string   $attr  attribute name\r\n\t * @param  bool     $val   attribute value\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function closestByAttr($path, $attr, $val) {\r\n\t\t$stat = $this->stat($path);\r\n\r\n\t\tif (empty($stat)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$v = isset($stat[$attr]) ? $stat[$attr] : false;\r\n\r\n\t\tif ($v == $val) {\r\n\t\t\treturn $path;\r\n\t\t}\r\n\r\n\t\treturn $stat['mime'] == 'directory'\r\n\t\t\t? $this->childsByAttr($path, $attr, $val) \r\n\t\t\t: false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return first found children with required attr == $val\r\n\t *\r\n\t * @param  string   $path  file path\r\n\t * @param  string   $attr  attribute name\r\n\t * @param  bool     $val   attribute value\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function childsByAttr($path, $attr, $val) {\r\n\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\tif (($_p = $this->closestByAttr($p, $attr, $val)) != false) {\r\n\t\t\t\treturn $_p;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*****************  get content *******************/\r\n\r\n\t/**\r\n\t * Return required dir's files info.\r\n\t * If onlyMimes is set - return only dirs and files of required mimes\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function getScandir($path) {\r\n\t\t$files = array();\r\n\r\n\t\t!isset($this->dirsCache[$path]) && $this->cacheDir($path);\r\n\r\n\t\tforeach ($this->dirsCache[$path] as $p) {\r\n\t\t\tif (($stat = $this->stat($p)) && empty($stat['hidden'])) {\r\n\t\t\t\t$files[] = $stat;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $files;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Return subdirs tree\r\n\t *\r\n\t * @param  string  $path  parent dir path\r\n\t * @param  int     $deep  tree deep\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function gettree($path, $deep, $exclude='') {\r\n\t\t$dirs = array();\r\n\r\n\t\t!isset($this->dirsCache[$path]) && $this->cacheDir($path);\r\n\r\n\t\tforeach ($this->dirsCache[$path] as $p) {\r\n\t\t\t$stat = $this->stat($p);\r\n\r\n\t\t\tif ($stat && empty($stat['hidden']) && $p != $exclude && $stat['mime'] == 'directory') {\r\n\t\t\t\t$dirs[] = $stat;\r\n\t\t\t\tif ($deep > 0 && !empty($stat['dirs'])) {\r\n\t\t\t\t\t$dirs = array_merge($dirs, $this->gettree($p, $deep-1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $dirs;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Recursive files search\r\n\t *\r\n\t * @param  string  $path   dir path\r\n\t * @param  string  $q      search string\r\n\t * @param  array   $mimes\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function doSearch($path, $q, $mimes) {\r\n\t\t$result = array();\r\n\r\n\t\tforeach($this->_scandir($path) as $p) {\r\n\t\t\t$stat = $this->stat($p);\r\n\r\n\t\t\tif (!$stat) { // invalid links\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (!empty($stat['hidden']) || !$this->mimeAccepted($stat['mime'])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t$name = $stat['name'];\r\n\r\n\t\t\tif ($this->stripos($name, $q) !== false) {\r\n\t\t\t\t$stat['path'] = $this->_path($p);\r\n\t\t\t\tif ($this->URL && !isset($stat['url'])) {\r\n\t\t\t\t\t$stat['url'] = $this->URL . str_replace($this->separator, '/', substr($p, strlen($this->root) + 1));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$result[] = $stat;\r\n\t\t\t}\r\n\t\t\tif ($stat['mime'] == 'directory' && $stat['read'] && !isset($stat['alias'])) {\r\n\t\t\t\t$result = array_merge($result, $this->doSearch($p, $q, $mimes));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $result;\r\n\t}\r\n\r\n\t/**********************  manuipulations  ******************/\r\n\r\n\t/**\r\n\t * Copy file/recursive copy dir only in current volume.\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  string  $src   source path\r\n\t * @param  string  $dst   destination dir path\r\n\t * @param  string  $name  new file name (optionaly)\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function copy($src, $dst, $name) {\r\n\t\t$srcStat = $this->stat($src);\r\n\t\t$this->clearcache();\r\n\r\n\t\tif (!empty($srcStat['thash'])) {\r\n\t\t\t$target = $this->decode($srcStat['thash']);\r\n\t\t\t$stat   = $this->stat($target);\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $stat && $this->_symlink($target, $dst, $name)\r\n\t\t\t\t? $this->_joinPath($dst, $name)\r\n\t\t\t\t: $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t\t} \r\n\r\n\t\tif ($srcStat['mime'] == 'directory') {\r\n\t\t\t$test = $this->stat($this->_joinPath($dst, $name));\r\n\r\n\t\t\tif (($test && $test['mime'] != 'directory') || !$this->_mkdir($dst, $name)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t\t\t}\r\n\r\n\t\t\t$dst = $this->_joinPath($dst, $name);\r\n\r\n\t\t\tforeach ($this->getScandir($src) as $stat) {\r\n\t\t\t\tif (empty($stat['hidden'])) {\r\n\t\t\t\t\t$name = $stat['name'];\r\n\t\t\t\t\tif (!$this->copy($this->_joinPath($src, $name), $dst, $name)) {\r\n\t\t\t\t\t\t$this->remove($dst, true); // fall back\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $dst;\r\n\t\t} \r\n\r\n\t\treturn $this->_copy($src, $dst, $name) \r\n\t\t\t? $this->_joinPath($dst, $name) \r\n\t\t\t: $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t}\r\n\r\n\t/**\r\n\t * Move file\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  string  $src   source path\r\n\t * @param  string  $dst   destination dir path\r\n\t * @param  string  $name  new file name \r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function move($src, $dst, $name) {\r\n\t\t$stat = $this->stat($src);\r\n\t\t$stat['realpath'] = $src;\r\n\t\t$this->rmTmb($stat); // can not do rmTmb() after _move()\r\n\t\t$this->clearcache();\r\n\r\n\t\tif ($this->_move($src, $dst, $name)) {\r\n\t\t\t$this->removed[] = $stat;\r\n\r\n\t\t\treturn $this->_joinPath($dst, $name);\r\n\t\t}\r\n\r\n\t\treturn $this->setError(elFinder::ERROR_MOVE, $this->_path($src));\r\n\t}\r\n\r\n\t/**\r\n\t * Copy file from another volume.\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  Object  $volume       source volume\r\n\t * @param  string  $src          source file hash\r\n\t * @param  string  $destination  destination dir path\r\n\t * @param  string  $name         file name\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function copyFrom($volume, $src, $destination, $name) {\r\n\r\n\t\tif (($source = $volume->file($src)) == false) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, '#'.$src, $volume->error());\r\n\t\t}\r\n\r\n\t\t$errpath = $volume->path($src);\r\n\r\n\t\tif (!$this->nameAccepted($source['name'])) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_INVALID_NAME);\r\n\t\t}\r\n\r\n\t\tif (!$source['read']) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\r\n\t\tif ($source['mime'] == 'directory') {\r\n\t\t\t$stat = $this->stat($this->_joinPath($destination, $name));\r\n\t\t\t$this->clearcache();\r\n\t\t\tif ((!$stat || $stat['mime'] != 'directory') && !$this->_mkdir($destination, $name)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath);\r\n\t\t\t}\r\n\r\n\t\t\t$path = $this->_joinPath($destination, $name);\r\n\r\n\t\t\tforeach ($volume->scandir($src) as $entr) {\r\n\t\t\t\tif (!$this->copyFrom($volume, $entr['hash'], $path, $entr['name'])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t// $mime = $source['mime'];\r\n\t\t\t// $w = $h = 0;\r\n\t\t\tif (($dim = $volume->dimensions($src))) {\r\n\t\t\t\t$s = explode('x', $dim);\r\n\t\t\t\t$source['width']  = $s[0];\r\n\t\t\t\t$source['height'] = $s[1];\r\n\t\t\t}\r\n\r\n\t\t\tif (($fp = $volume->open($src)) == false\r\n\t\t\t|| ($path = $this->_save($fp, $destination, $name, $source)) == false) {\r\n\t\t\t\t$fp && $volume->close($fp, $src);\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath);\r\n\t\t\t}\r\n\t\t\t$volume->close($fp, $src);\r\n\t\t}\r\n\r\n\t\treturn $path;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove file/ recursive remove dir\r\n\t *\r\n\t * @param  string  $path   file path\r\n\t * @param  bool    $force  try to remove even if file locked\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function remove($path, $force = false) {\r\n\t\t$stat = $this->stat($path);\r\n\t\t$stat['realpath'] = $path;\r\n\t\t$this->rmTmb($stat);\r\n\t\t$this->clearcache();\r\n\r\n\t\tif (empty($stat)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path), elFinder::ERROR_FILE_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tif (!$force && !empty($stat['locked'])) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($path));\r\n\t\t}\r\n\r\n\t\tif ($stat['mime'] == 'directory') {\r\n\t\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\t\t$name = $this->_basename($p);\r\n\t\t\t\tif ($name != '.' && $name != '..' && !$this->remove($p)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!$this->_rmdir($path)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path));\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tif (!$this->_unlink($path)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$this->removed[] = $stat;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/************************* thumbnails **************************/\r\n\r\n\t/**\r\n\t * Return thumbnail file name for required file\r\n\t *\r\n\t * @param  array  $stat  file stat\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function tmbname($stat) {\r\n\t\treturn $stat['hash'].$stat['ts'].'.png';\r\n\t}\r\n\r\n\t/**\r\n\t * Return thumnbnail name if exists\r\n\t *\r\n\t * @param  string  $path file path\r\n\t * @param  array   $stat file stat\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function gettmb($path, $stat) {\r\n\t\tif ($this->tmbURL && $this->tmbPath) {\r\n\t\t\t// file itself thumnbnail\r\n\t\t\tif (strpos($path, $this->tmbPath) === 0) {\r\n\t\t\t\treturn basename($path);\r\n\t\t\t}\r\n\r\n\t\t\t$name = $this->tmbname($stat);\r\n\t\t\tif (file_exists($this->tmbPath.DIRECTORY_SEPARATOR.$name)) {\r\n\t\t\t\treturn $name;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if thumnbnail for required file can be created\r\n\t *\r\n\t * @param  string  $path  thumnbnail path \r\n\t * @param  array   $stat  file stat\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function canCreateTmb($path, $stat) {\r\n\t\treturn $this->tmbPathWritable \r\n\t\t\t&& strpos($path, $this->tmbPath) === false // do not create thumnbnail for thumnbnail\r\n\t\t\t&& $this->imgLib \r\n\t\t\t&& strpos($stat['mime'], 'image') === 0 \r\n\t\t\t&& ($this->imgLib == 'gd' ? $stat['mime'] == 'image/jpeg' || $stat['mime'] == 'image/png' || $stat['mime'] == 'image/gif' : true);\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if required file can be resized.\r\n\t * By default - the same as canCreateTmb\r\n\t *\r\n\t * @param  string  $path  thumnbnail path \r\n\t * @param  array   $stat  file stat\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function canResize($path, $stat) {\r\n\t\treturn $this->canCreateTmb($path, $stat);\r\n\t}\r\n\r\n\t/**\r\n\t * Create thumnbnail and return it's URL on success\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  string  $mime  file mime type\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tprotected function createTmb($path, $stat) {\r\n\t\tif (!$stat || !$this->canCreateTmb($path, $stat)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$name = $this->tmbname($stat);\r\n\t\t$tmb  = $this->tmbPath.DIRECTORY_SEPARATOR.$name;\r\n\r\n\t\t// copy image into tmbPath so some drivers does not store files on local fs\r\n\t\tif (($src = $this->_fopen($path, 'rb')) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (($trg = fopen($tmb, 'wb')) == false) {\r\n\t\t\t$this->_fclose($src, $path);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\twhile (!feof($src)) {\r\n\t\t\tfwrite($trg, fread($src, 8192));\r\n\t\t}\r\n\r\n\t\t$this->_fclose($src, $path);\r\n\t\tfclose($trg);\r\n\r\n\t\t$result = false;\r\n\r\n\t\t$tmbSize = $this->tmbSize;\r\n\r\n  \t\tif (($s = getimagesize($tmb)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n    \r\n    \t\t/* If image smaller or equal thumbnail size - just fitting to thumbnail square */\r\n    \t\tif ($s[0] <= $tmbSize && $s[1]  <= $tmbSize) {\r\n     \t   \t\t$result = $this->imgSquareFit($tmb, $tmbSize, $tmbSize, 'center', 'middle', $this->options['tmbBgColor'], 'png' );\r\n\t    \t} else {\r\n\r\n\t    \t\tif ($this->options['tmbCrop']) {\r\n        \r\n        \t\t\t/* Resize and crop if image bigger than thumbnail */\r\n\t        \t\tif (!(($s[0] > $tmbSize && $s[1] <= $tmbSize) || ($s[0] <= $tmbSize && $s[1] > $tmbSize) ) || ($s[0] > $tmbSize && $s[1] > $tmbSize)) {\r\n    \t\t\t\t\t$result = $this->imgResize($tmb, $tmbSize, $tmbSize, true, false, 'png');\r\n\t        \t\t}\r\n\r\n\t\t\t\tif (($s = getimagesize($tmb)) != false) {\r\n\t\t\t\t\t$x = $s[0] > $tmbSize ? intval(($s[0] - $tmbSize)/2) : 0;\r\n\t\t\t\t\t$y = $s[1] > $tmbSize ? intval(($s[1] - $tmbSize)/2) : 0;\r\n\t\t\t\t\t$result = $this->imgCrop($tmb, $tmbSize, $tmbSize, $x, $y, 'png');\r\n\t\t\t\t}\r\n\r\n    \t\t\t} else {\r\n        \t\t\t$result = $this->imgResize($tmb, $tmbSize, $tmbSize, true, true, 'png');\r\n      \t\t\t}\r\n\r\n\t\t\t$result = $this->imgSquareFit($tmb, $tmbSize, $tmbSize, 'center', 'middle', $this->options['tmbBgColor'], 'png' );\r\n\t\t}\r\n\r\n\t\tif (!$result) {\r\n\t\t\tunlink($tmb);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn $name;\r\n\t}\r\n\r\n\t/**\r\n\t * Resize image\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $width              new width\r\n\t * @param  int      $height             new height\r\n\t * @param  bool\t    $keepProportions    crop image\r\n\t * @param  bool\t    $resizeByBiggerSide resize image based on bigger side if true\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n  \tprotected function imgResize($path, $width, $height, $keepProportions = false, $resizeByBiggerSide = true, $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n    \t$result = false;\r\n    \t\r\n\t\tlist($size_w, $size_h) = array($width, $height);\r\n    \r\n    \tif ($keepProportions == true) {\r\n           \r\n      \t\tlist($orig_w, $orig_h, $new_w, $new_h) = array($s[0], $s[1], $width, $height);\r\n        \r\n      \t\t/* Calculating image scale width and height */\r\n      \t\t$xscale = $orig_w / $new_w;\r\n      \t\t$yscale = $orig_h / $new_h;\r\n\r\n      \t\t/* Resizing by biggest side */\r\n\r\n\t\t\tif ($resizeByBiggerSide) {\r\n\r\n\t\t        if ($orig_w > $orig_h) {\r\n\t\t\t\t\t$size_h = $orig_h * $width / $orig_w;\r\n\t\t\t\t\t$size_w = $width;\r\n        \t\t} else {\r\n          \t\t\t$size_w = $orig_w * $height / $orig_h;\r\n          \t\t\t$size_h = $height;\r\n\t\t\t\t}\r\n      \r\n\t\t\t} else {\r\n        \t\tif ($orig_w > $orig_h) {\r\n          \t\t\t$size_w = $orig_w * $height / $orig_h;\r\n          \t\t\t$size_h = $height;\r\n\t\t        } else {\r\n\t\t\t\t\t$size_h = $orig_h * $width / $orig_w;\r\n\t\t\t\t\t$size_w = $width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img->resizeImage($size_w, $size_h, Imagick::FILTER_LANCZOS, true);\r\n\r\n\t\t\t\t$result = $img->writeImage($path);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($size_w, $size_h))) {\r\n\r\n\t\t\t\t\tself::gdImageBackground($tmp,$this->options['tmbBgColor']);\r\n\r\n\t\t\t\t\tif (!imagecopyresampled($tmp, $img, 0, 0, 0, 0, $size_w, $size_h, $s[0], $s[1])) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\t\timagedestroy($img);\r\n\t\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n  \t}\r\n  \r\n\t/**\r\n\t * Crop image\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $width              crop width\r\n\t * @param  int      $height             crop height\r\n\t * @param  bool\t    $x                  crop left offset\r\n\t * @param  bool\t    $y                  crop top offset\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n  \tprotected function imgCrop($path, $width, $height, $x, $y, $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$result = false;\r\n\r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img->cropImage($width, $height, $x, $y);\r\n\r\n\t\t\t\t$result = $img->writeImage($path);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($width, $height))) {\r\n\r\n\t\t\t\t\tself::gdImageBackground($tmp,$this->options['tmbBgColor']);\r\n\r\n\t\t\t\t\t$size_w = $width;\r\n\t\t\t\t\t$size_h = $height;\r\n\r\n\t\t\t\t\tif ($s[0] < $width || $s[1] < $height) {\r\n\t\t\t\t\t\t$size_w = $s[0];\r\n\t\t\t\t\t\t$size_h = $s[1];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!imagecopy($tmp, $img, 0, 0, $x, $y, $size_w, $size_h)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\t\timagedestroy($img);\r\n\t\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Put image to square\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $width              square width\r\n\t * @param  int      $height             square height\r\n\t * @param  int\t    $align              reserved\r\n\t * @param  int \t    $valign             reserved\r\n\t * @param  string   $bgcolor            square background color in #rrggbb format\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tprotected function imgSquareFit($path, $width, $height, $align = 'center', $valign = 'middle', $bgcolor = '#0000ff', $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$result = false;\r\n\r\n\t\t/* Coordinates for image over square aligning */\r\n\t\t$y = ceil(abs($height - $s[1]) / 2); \r\n\t\t$x = ceil(abs($width - $s[0]) / 2);\r\n    \r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img1 = new Imagick();\r\n\t\t\t\t$img1->newImage($width, $height, new ImagickPixel($bgcolor));\r\n\t\t\t\t$img1->setImageColorspace($img->getImageColorspace());\r\n\t\t\t\t$img1->setImageFormat($destformat != null ? $destformat : $img->getFormat());\r\n\t\t\t\t$img1->compositeImage( $img, imagick::COMPOSITE_OVER, $x, $y );\r\n\t\t\t\t$result = $img1->writeImage($path);\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($width, $height))) {\r\n\r\n\t\t\t\t\tself::gdImageBackground($tmp,$bgcolor);\r\n\r\n\t\t\t\t\tif (!imagecopy($tmp, $img, $x, $y, 0, 0, $s[0], $s[1])) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\t\timagedestroy($img);\r\n\t\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\t\treturn $result ? $path : false;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Rotate image\r\n\t *\r\n\t * @param  string   $path               image file\r\n\t * @param  int      $degree             rotete degrees\r\n\t * @param  string   $bgcolor            square background color in #rrggbb format\r\n\t * @param  string   $destformat         image destination format\r\n\t * @return string|false\r\n\t * @author nao-pon\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function imgRotate($path, $degree, $bgcolor = '#ffffff', $destformat = null) {\r\n\t\tif (($s = @getimagesize($path)) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$result = false;\r\n\r\n\t\tswitch ($this->imgLib) {\r\n\t\t\tcase 'imagick':\r\n\t\t\t\ttry {\r\n\t\t\t\t\t$img = new imagick($path);\r\n\t\t\t\t} catch (Exception $e) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$img->rotateImage(new ImagickPixel($bgcolor), $degree);\r\n\t\t\t\t$result = $img->writeImage($path);\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'gd':\r\n\t\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t\t$degree = 360 - $degree;\r\n\t\t\t\tlist($r, $g, $b) = sscanf($bgcolor, \"#%02x%02x%02x\");\r\n\t\t\t\t$bgcolor = imagecolorallocate($img, $r, $g, $b);\r\n\t\t\t\t$tmp = imageRotate($img, $degree, (int)$bgcolor);\r\n\r\n\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\timageDestroy($img);\r\n\t\t\t\timageDestroy($tmp);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Execute shell command\r\n\t *\r\n\t * @param  string  $command       command line\r\n\t * @param  array   $output        stdout strings\r\n\t * @param  array   $return_var    process exit code\r\n\t * @param  array   $error_output  stderr strings\r\n\t * @return int     exit code\r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tprotected function procExec($command , array &$output = null, &$return_var = -1, array &$error_output = null) {\r\n\r\n\t\t$descriptorspec = array(\r\n\t\t\t0 : array(\"pipe\", \"r\"),  // stdin\r\n\t\t\t1 : array(\"pipe\", \"w\"),  // stdout\r\n\t\t\t2 : array(\"pipe\", \"w\")   // stderr\r\n\t\t);\r\n\r\n\t\t$process = proc_open($command, $descriptorspec, $pipes, null, null);\r\n\r\n\t\tif (is_resource($process)) {\r\n\r\n\t\t\tfclose($pipes[0]);\r\n\r\n\t\t\t$tmpout = '';\r\n\t\t\t$tmperr = '';\r\n\r\n\t\t\t$output = stream_get_contents($pipes[1]);\r\n\t\t\t$error_output = stream_get_contents($pipes[2]);\r\n\r\n\t\t\tfclose($pipes[1]);\r\n\t\t\tfclose($pipes[2]);\r\n\t\t\t$return_var = proc_close($process);\r\n\r\n\r\n\t\t}\r\n\r\n\t\treturn $return_var;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Remove thumbnail, also remove recursively if stat is directory\r\n\t *\r\n\t * @param  string  $stat  file stat\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov\r\n\t * @author Naoki Sawada\r\n\t * @author Troex Nevelin\r\n\t **/\r\n\tprotected function rmTmb($stat) {\r\n\t\tif ($stat['mime'] === 'directory') {\r\n\t\t\tforeach ($this->_scandir($this->decode($stat['hash'])) as $p) {\r\n\t\t\t\t$name = $this->_basename($p);\r\n\t\t\t\t$name != '.' && $name != '..' && $this->rmTmb($this->stat($p));\r\n\t\t\t}\r\n\t\t} else if (!empty($stat['tmb']) && $stat['tmb'] != \"1\") {\r\n\t\t\t$tmb = $this->tmbPath.DIRECTORY_SEPARATOR.$stat['tmb'];\r\n\t\t\tfile_exists($tmb) && @unlink($tmb);\r\n\t\t\tclearstatcache();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an gd image according to the specified mime type\r\n\t *\r\n\t * @param string $path image file\r\n\t * @param string $mime\r\n\t * @return gd image resource identifier\r\n\t */\r\n\tprotected function gdImageCreate($path,$mime){\r\n\t\tswitch($mime){\r\n\t\t\tcase 'image/jpeg':\r\n\t\t\treturn imagecreatefromjpeg($path);\r\n\r\n\t\t\tcase 'image/png':\r\n\t\t\treturn imagecreatefrompng($path);\r\n\r\n\t\t\tcase 'image/gif':\r\n\t\t\treturn imagecreatefromgif($path);\r\n\r\n\t\t\tcase 'image/xbm':\r\n\t\t\treturn imagecreatefromxbm($path);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Output gd image to file\r\n\t *\r\n\t * @param resource $image gd image resource\r\n\t * @param string $filename The path to save the file to.\r\n\t * @param string $destformat The Image type to use for $filename\r\n\t * @param string $mime The original image mime type\r\n\t */\r\n\tprotected function gdImage($image, $filename, $destformat, $mime ){\r\n\r\n\t\tif ($destformat == 'jpg' || ($destformat == null && $mime == 'image/jpeg')) {\r\n\t\t\treturn imagejpeg($image, $filename, 100);\r\n\t\t}\r\n\r\n\t\tif ($destformat == 'gif' || ($destformat == null && $mime == 'image/gif')) {\r\n\t\t\treturn imagegif($image, $filename, 7);\r\n\t\t}\r\n\r\n\t\treturn imagepng($image, $filename, 7);\r\n\t}\r\n\r\n\t/**\r\n\t * Assign the proper background to a gd image\r\n\t *\r\n\t * @param resource $image gd image resource\r\n\t * @param string $bgcolor background color in #rrggbb format\r\n\t */\r\n\tprotected function gdImageBackground($image, $bgcolor){\r\n\r\n\t\tif( $bgcolor == 'transparent' ){\r\n\t\t\timagesavealpha($image,true);\r\n\t\t\t$bgcolor1 = imagecolorallocatealpha($image, 255, 255, 255, 127);\r\n\r\n\t\t}else{\r\n\t\t\tlist($r, $g, $b) = sscanf($bgcolor, \"#%02x%02x%02x\");\r\n\t\t\t$bgcolor1 = imagecolorallocate($image, $r, $g, $b);\r\n\t\t}\r\n\r\n\t\timagefill($image, 0, 0, $bgcolor1);\r\n\t}\r\n\r\n\t/*********************** misc *************************/\r\n\r\n\t/**\r\n\t * Return smart formatted date\r\n\t *\r\n\t * @param  int     $ts  file timestamp\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\t// protected function formatDate($ts) {\r\n\t// \tif ($ts > $this->today) {\r\n\t// \t\treturn 'Today '.date($this->options['timeFormat'], $ts);\r\n\t// \t}\r\n\t// \t\r\n\t// \tif ($ts > $this->yesterday) {\r\n\t// \t\treturn 'Yesterday '.date($this->options['timeFormat'], $ts);\r\n\t// \t} \r\n\t// \t\r\n\t// \treturn date($this->options['dateFormat'], $ts);\r\n\t// }\r\n\r\n\t/**\r\n\t* Find position of first occurrence of string in a string with multibyte support\r\n\t*\r\n\t* @param  string  $haystack  The string being checked.\r\n\t* @param  string  $needle    The string to find in haystack.\r\n\t* @param  int     $offset    The search offset. If it is not specified, 0 is used.\r\n\t* @return int|bool\r\n\t* @author Alexey Sukhotin\r\n\t**/\r\n\tprotected function stripos($haystack , $needle , $offset = 0) {\r\n\t\tif (function_exists('mb_stripos')) {\r\n\t\t\treturn mb_stripos($haystack , $needle , $offset);\r\n\t\t} else if (function_exists('mb_strtolower') && function_exists('mb_strpos')) {\r\n\t\t\treturn mb_strpos(mb_strtolower($haystack), mb_strtolower($needle), $offset);\r\n\t\t} \r\n\t\treturn stripos($haystack , $needle , $offset);\r\n\t}\r\n\r\n\t/**==================================* abstract methods *====================================**/\r\n\r\n\t/*********************** paths/urls *************************/\r\n\r\n\t/**\r\n\t * Return parent directory path\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _dirname($path);\r\n\r\n\t/**\r\n\t * Return file name\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _basename($path);\r\n\r\n\t/**\r\n\t * Join dir name and file name and return full path.\r\n\t * Some drivers (db) use int as path - so we give to concat path to driver itself\r\n\t *\r\n\t * @param  string  $dir   dir path\r\n\t * @param  string  $name  file name\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _joinPath($dir, $name);\r\n\r\n\t/**\r\n\t * Return normalized path \r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _normpath($path);\r\n\r\n\t/**\r\n\t * Return file path related to root dir\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _relpath($path);\r\n\r\n\t/**\r\n\t * Convert path related to root dir into real path\r\n\t *\r\n\t * @param  string  $path  rel file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _abspath($path);\r\n\r\n\t/**\r\n\t * Return fake path started from root dir.\r\n\t * Required to show path on client side.\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _path($path);\r\n\r\n\t/**\r\n\t * Return true if $path is children of $parent\r\n\t *\r\n\t * @param  string  $path    path to check\r\n\t * @param  string  $parent  parent path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _inpath($path, $parent);\r\n\r\n\t/**\r\n\t * Return stat for given path.\r\n\t * Stat contains following fields:\r\n\t * - (int)    size    file size in b. required\r\n\t * - (int)    ts      file modification time in unix time. required\r\n\t * - (string) mime    mimetype. required for folders, others - optionally\r\n\t * - (bool)   read    read permissions. required\r\n\t * - (bool)   write   write permissions. required\r\n\t * - (bool)   locked  is object locked. optionally\r\n\t * - (bool)   hidden  is object hidden. optionally\r\n\t * - (string) alias   for symlinks - link target path relative to root path. optionally\r\n\t * - (string) target  for symlinks - link target path. optionally\r\n\t *\r\n\t * If file does not exists - returns empty array or false.\r\n\t *\r\n\t * @param  string  $path    file path \r\n\t * @return array|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _stat($path);\r\n\r\n\r\n\t/***************** file stat ********************/\r\n\r\n\r\n\t/**\r\n\t * Return true if path is dir and has at least one childs directory\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _subdirs($path);\r\n\r\n\t/**\r\n\t * Return object width and height\r\n\t * Ususaly used for images, but can be realize for video etc...\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  string  $mime  file mime type\r\n\t * @return string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _dimensions($path, $mime);\r\n\r\n\t/******************** file/dir content *********************/\r\n\r\n\t/**\r\n\t * Return files list in directory\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return array\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _scandir($path);\r\n\r\n\t/**\r\n\t * Open file and return file pointer\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @param  bool    $write open file for writing\r\n\t * @return resource|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _fopen($path, $mode=\"rb\");\r\n\r\n\t/**\r\n\t * Close opened file\r\n\t * \r\n\t * @param  resource  $fp    file pointer\r\n\t * @param  string    $path  file path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _fclose($fp, $path='');\r\n\r\n\t/********************  file/dir manipulations *************************/\r\n\r\n\t/**\r\n\t * Create dir and return created dir path or false on failed\r\n\t *\r\n\t * @param  string  $path  parent dir path\r\n\t * @param string  $name  new directory name\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _mkdir($path, $name);\r\n\r\n\t/**\r\n\t * Create file and return it's path or false on failed\r\n\t *\r\n\t * @param  string  $path  parent dir path\r\n\t * @param string  $name  new file name\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _mkfile($path, $name);\r\n\r\n\t/**\r\n\t * Create symlink\r\n\t *\r\n\t * @param  string  $source     file to link to\r\n\t * @param  string  $targetDir  folder to create link in\r\n\t * @param  string  $name       symlink name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _symlink($source, $targetDir, $name);\r\n\r\n\t/**\r\n\t * Copy file into another file (only inside one volume)\r\n\t *\r\n\t * @param  string  $source  source file path\r\n\t * @param  string  $target  target dir path\r\n\t * @param  string  $name    file name\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _copy($source, $targetDir, $name);\r\n\r\n\t/**\r\n\t * Move file into another parent dir.\r\n\t * Return new file path or false.\r\n\t *\r\n\t * @param  string  $source  source file path\r\n\t * @param  string  $target  target dir path\r\n\t * @param  string  $name    file name\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _move($source, $targetDir, $name);\r\n\r\n\t/**\r\n\t * Remove file\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _unlink($path);\r\n\r\n\t/**\r\n\t * Remove dir\r\n\t *\r\n\t * @param  string  $path  dir path\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _rmdir($path);\r\n\r\n\t/**\r\n\t * Create new file and write into it from file pointer.\r\n\t * Return new file path or false on error.\r\n\t *\r\n\t * @param  resource  $fp   file pointer\r\n\t * @param  string    $dir  target dir path\r\n\t * @param  string    $name file name\r\n\t * @param  array     $stat file stat (required by some virtual fs)\r\n\t * @return bool|string\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _save($fp, $dir, $name, $stat);\r\n\r\n\t/**\r\n\t * Get file contents\r\n\t *\r\n\t * @param  string  $path  file path\r\n\t * @return string|false\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _getContents($path);\r\n\r\n\t/**\r\n\t * Write a string to a file\r\n\t *\r\n\t * @param  string  $path     file path\r\n\t * @param  string  $content  new file content\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov\r\n\t **/\r\n\tabstract protected function _filePutContents($path, $content);\r\n\r\n\t/**\r\n\t * Extract files from archive\r\n\t *\r\n\t * @param  string  $path file path\r\n\t * @param  array   $arc  archiver options\r\n\t * @return bool\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tabstract protected function _extract($path, $arc);\r\n\r\n\t/**\r\n\t * Create archive and return its path\r\n\t *\r\n\t * @param  string  $dir    target dir\r\n\t * @param  array   $files  files names list\r\n\t * @param  string  $name   archive name\r\n\t * @param  array   $arc    archiver options\r\n\t * @return string|bool\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tabstract protected function _archive($dir, $files, $name, $arc);\r\n\r\n\t/**\r\n\t * Detect available archivers\r\n\t *\r\n\t * @return void\r\n\t * @author Dmitry (dio) Levashov, \r\n\t * @author Alexey Sukhotin\r\n\t **/\r\n\tabstract protected function _checkArchivers();\r\n\r\n} // END class"],[1,"/*********************************************************************/\r\n/*                            INITIALIZATION                         */\r\n/*********************************************************************/\r\n\r\n/**\r\n * Prepare driver before mount volume.\r\n * Return true if volume is ready.\r\n *\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nElFinderVolumeDriver.prototype.init = function() {\r\n\treturn true;\r\n}\t\r\n\r\n/**\r\n * Configure after successfull mount.\r\n * By default set thumbnails path and image manipulation library.\r\n *\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function configure() {\r\n\t// set thumbnails path\r\n\t$path = $this->options['tmbPath'];\r\n\tif ($path) {\r\n\t\tif (!file_exists($path)) {\r\n\t\t\tif (@mkdir($path)) {\r\n\t\t\t\tchmod($path, $this->options['tmbPathMode']);\r\n\t\t\t} else {\r\n\t\t\t\t$path = '';\r\n\t\t\t}\r\n\t\t} \r\n\r\n\t\tif (is_dir($path) && is_readable($path)) {\r\n\t\t\t$this->tmbPath = $path;\r\n\t\t\t$this->tmbPathWritable = is_writable($path);\r\n\t\t}\r\n\t}\r\n\r\n\t// set image manipulation library\r\n\t$type = preg_match('/^(imagick|gd|auto)$/i', $this->options['imgLib'])\r\n\t\t? strtolower($this->options['imgLib'])\r\n\t\t: 'auto';\r\n\r\n\tif (($type == 'imagick' || $type == 'auto') && extension_loaded('imagick')) {\r\n\t\t$this->imgLib = 'imagick';\r\n\t} else {\r\n\t\t$this->imgLib = function_exists('gd_info') ? 'gd' : '';\r\n\t}\r\n\r\n}\r\n\r\n\r\n/*********************************************************************/\r\n/*                              PUBLIC API                           */\r\n/*********************************************************************/\r\n\r\n/**\r\n * Return driver id. Used as a part of volume id.\r\n *\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function driverId() {\r\n\treturn $this->driverId;\r\n}\r\n\r\n/**\r\n * Return volume id\r\n *\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function id() {\r\n\treturn $this->id;\r\n}\r\n\r\n/**\r\n * Return debug info for client\r\n *\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function debug() {\r\n\treturn array(\r\n\t\t'id'         : $this->id(),\r\n\t\t'name'       : strtolower(substr(get_class($this), strlen('elfinderdriver'))),\r\n\t\t'mimeDetect' : $this->mimeDetect,\r\n\t\t'imgLib'     : $this->imgLib\r\n\t);\r\n}\r\n\r\n/**\r\n * \"Mount\" volume.\r\n * Return true if volume available for read or write, \r\n * false - otherwise\r\n *\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n * @author Alexey Sukhotin\r\n **/\r\npublic function mount(array $opts) {\r\n\tif (!isset($opts['path']) || $opts['path'] === '') {\r\n\t\treturn $this->setError('Path undefined.');;\r\n\t}\r\n\r\n\t$this->options = array_merge($this->options, $opts);\r\n\t$this->id = $this->driverId.(!empty($this->options['id']) ? $this->options['id'] : elFinder::$volumesCnt++).'_';\r\n\t$this->root = $this->_normpath($this->options['path']);\r\n\t$this->separator = isset($this->options['separator']) ? $this->options['separator'] : DIRECTORY_SEPARATOR;\r\n\r\n\t// default file attribute\r\n\t$this->defaults = array(\r\n\t\t'read'    : isset($this->options['defaults']['read'])  ? !!$this->options['defaults']['read']  : true,\r\n\t\t'write'   : isset($this->options['defaults']['write']) ? !!$this->options['defaults']['write'] : true,\r\n\t\t'locked'  : false,\r\n\t\t'hidden'  : false\r\n\t);\r\n\r\n\t// root attributes\r\n\t$this->attributes[] = array(\r\n\t\t'pattern' : '~^'.preg_quote(DIRECTORY_SEPARATOR).'$~',\r\n\t\t'locked'  : true,\r\n\t\t'hidden'  : false\r\n\t);\r\n\t// set files attributes\r\n\tif (!empty($this->options['attributes']) && is_array($this->options['attributes'])) {\r\n\r\n\t\tforeach ($this->options['attributes'] as $a) {\r\n\t\t\t// attributes must contain pattern and at least one rule\r\n\t\t\tif (!empty($a['pattern']) || count($a) > 1) {\r\n\t\t\t\t$this->attributes[] = $a;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!empty($this->options['accessControl']) && is_callable($this->options['accessControl'])) {\r\n\t\t$this->access = $this->options['accessControl'];\r\n\t}\r\n\r\n\t$this->today     = mktime(0,0,0, date('m'), date('d'), date('Y'));\r\n\t$this->yesterday = $this->today-86400;\r\n\r\n\t// debug($this->attributes);\r\n\tif (!$this->init()) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// check some options is arrays\r\n\t$this->uploadAllow = isset($this->options['uploadAllow']) && is_array($this->options['uploadAllow'])\r\n\t\t? $this->options['uploadAllow']\r\n\t\t: array();\r\n\r\n\t$this->uploadDeny = isset($this->options['uploadDeny']) && is_array($this->options['uploadDeny'])\r\n\t\t? $this->options['uploadDeny']\r\n\t\t: array();\r\n\r\n\tif (is_string($this->options['uploadOrder'])) { // telephat_mode on, compatibility with 1.x\r\n\t\t$parts = explode(',', isset($this->options['uploadOrder']) ? $this->options['uploadOrder'] : 'deny,allow');\r\n\t\t$this->uploadOrder = array(trim($parts[0]), trim($parts[1]));\r\n\t} else { // telephat_mode off\r\n\t\t$this->uploadOrder = $this->options['uploadOrder'];\r\n\t}\r\n\r\n\tif (!empty($this->options['uploadMaxSize'])) {\r\n\t\t$size = ''.$this->options['uploadMaxSize'];\r\n\t\t$unit = strtolower(substr($size, strlen($size) - 1));\r\n\t\t$n = 1;\r\n\t\tswitch ($unit) {\r\n\t\t\tcase 'k':\r\n\t\t\t\t$n = 1024;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'm':\r\n\t\t\t\t$n = 1048576;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'g':\r\n\t\t\t\t$n = 1073741824;\r\n\t\t}\r\n\t\t$this->uploadMaxSize = intval($size)*$n;\r\n\t}\r\n\r\n\t$this->disabled = isset($this->options['disabled']) && is_array($this->options['disabled'])\r\n\t\t? $this->options['disabled']\r\n\t\t: array();\r\n\r\n\t$this->cryptLib   = $this->options['cryptLib'];\r\n\t$this->mimeDetect = $this->options['mimeDetect'];\r\n\r\n\t// find available mimetype detect method\r\n\t$type = strtolower($this->options['mimeDetect']);\r\n\t$type = preg_match('/^(finfo|mime_content_type|internal|auto)$/i', $type) ? $type : 'auto';\r\n\t$regexp = '/text\\/x\\-(php|c\\+\\+)/';\r\n\r\n\tif (($type == 'finfo' || $type == 'auto') \r\n\t&& class_exists('finfo')) {\r\n\t\t$tmpFileInfo = @explode(';', @finfo_file(finfo_open(FILEINFO_MIME), __FILE__));\r\n\t} else {\r\n\t\t$tmpFileInfo = false;\r\n\t}\r\n\r\n\tif ($tmpFileInfo && preg_match($regexp, array_shift($tmpFileInfo))) {\r\n\t\t$type = 'finfo';\r\n\t\t$this->finfo = finfo_open(FILEINFO_MIME);\r\n\t} elseif (($type == 'mime_content_type' || $type == 'auto') \r\n\t&& function_exists('mime_content_type')\r\n\t&& preg_match($regexp, array_shift(explode(';', mime_content_type(__FILE__))))) {\r\n\t\t$type = 'mime_content_type';\r\n\t} else {\r\n\t\t$type = 'internal';\r\n\t}\r\n\t$this->mimeDetect = $type;\r\n\r\n\t// load mimes from external file for mimeDetect == 'internal'\r\n\t// based on Alexey Sukhotin idea and patch: http://elrte.org/redmine/issues/163\r\n\t// file must be in file directory or in parent one \r\n\tif ($this->mimeDetect == 'internal' && !self::$mimetypesLoaded) {\r\n\t\tself::$mimetypesLoaded = true;\r\n\t\t$this->mimeDetect = 'internal';\r\n\t\t$file = false;\r\n\t\tif (!empty($this->options['mimefile']) && file_exists($this->options['mimefile'])) {\r\n\t\t\t$file = $this->options['mimefile'];\r\n\t\t} elseif (file_exists(dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t$file = dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t} elseif (file_exists(dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t$file = dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t}\r\n\r\n\t\tif ($file && file_exists($file)) {\r\n\t\t\t$mimecf = file($file);\r\n\r\n\t\t\tforeach ($mimecf as $line_num : $line) {\r\n\t\t\t\tif (!preg_match('/^\\s*#/', $line)) {\r\n\t\t\t\t\t$mime = preg_split('/\\s+/', $line, -1, PREG_SPLIT_NO_EMPTY);\r\n\t\t\t\t\tfor ($i = 1, $size = count($mime); $i < $size ; $i++) {\r\n\t\t\t\t\t\tif (!isset(self::$mimetypes[$mime[$i]])) {\r\n\t\t\t\t\t\t\tself::$mimetypes[$mime[$i]] = $mime[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$this->rootName = empty($this->options['alias']) ? $this->_basename($this->root) : $this->options['alias'];\r\n\t$root = $this->stat($this->root);\r\n\r\n\tif (!$root) {\r\n\t\treturn $this->setError('Root folder does not exists.');\r\n\t}\r\n\tif (!$root['read'] && !$root['write']) {\r\n\t\treturn $this->setError('Root folder has not read and write permissions.');\r\n\t}\r\n\r\n\t// debug($root);\r\n\r\n\tif ($root['read']) {\r\n\t\t// check startPath - path to open by default instead of root\r\n\t\tif ($this->options['startPath']) {\r\n\t\t\t$start = $this->stat($this->options['startPath']);\r\n\t\t\tif (!empty($start)\r\n\t\t\t&& $start['mime'] == 'directory'\r\n\t\t\t&& $start['read']\r\n\t\t\t&& empty($start['hidden'])\r\n\t\t\t&& $this->_inpath($this->options['startPath'], $this->root)) {\r\n\t\t\t\t$this->startPath = $this->options['startPath'];\r\n\t\t\t\tif (substr($this->startPath, -1, 1) == $this->options['separator']) {\r\n\t\t\t\t\t$this->startPath = substr($this->startPath, 0, -1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\t$this->options['URL']     = '';\r\n\t\t$this->options['tmbURL']  = '';\r\n\t\t$this->options['tmbPath'] = '';\r\n\t\t// read only volume\r\n\t\tarray_unshift($this->attributes, array(\r\n\t\t\t'pattern' : '/.*/',\r\n\t\t\t'read'    : false\r\n\t\t));\r\n\t}\r\n\t$this->treeDeep = $this->options['treeDeep'] > 0 ? (int)$this->options['treeDeep'] : 1;\r\n\t$this->tmbSize  = $this->options['tmbSize'] > 0 ? (int)$this->options['tmbSize'] : 48;\r\n\t$this->URL      = $this->options['URL'];\r\n\tif ($this->URL && preg_match(\"|[^/?&=]$|\", $this->URL)) {\r\n\t\t$this->URL .= '/';\r\n\t}\r\n\r\n\t$this->tmbURL   = !empty($this->options['tmbURL']) ? $this->options['tmbURL'] : '';\r\n\tif ($this->tmbURL && preg_match(\"|[^/?&=]$|\", $this->tmbURL)) {\r\n\t\t$this->tmbURL .= '/';\r\n\t}\r\n\r\n\t$this->nameValidator = is_string($this->options['acceptedName']) && !empty($this->options['acceptedName']) \r\n\t\t? $this->options['acceptedName']\r\n\t\t: '';\r\n\r\n\t$this->_checkArchivers();\r\n\t// manual control archive types to create\r\n\tif (!empty($this->options['archiveMimes']) && is_array($this->options['archiveMimes'])) {\r\n\t\tforeach ($this->archivers['create'] as $mime : $v) {\r\n\t\t\tif (!in_array($mime, $this->options['archiveMimes'])) {\r\n\t\t\t\tunset($this->archivers['create'][$mime]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// manualy add archivers\r\n\tif (!empty($this->options['archivers']['create']) && is_array($this->options['archivers']['create'])) {\r\n\t\tforeach ($this->options['archivers']['create'] as $mime : $conf) {\r\n\t\t\tif (strpos($mime, 'application/') === 0 \r\n\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t&& isset($conf['argc']) \r\n\t\t\t&& !empty($conf['ext'])\r\n\t\t\t&& !isset($this->archivers['create'][$mime])) {\r\n\t\t\t\t$this->archivers['create'][$mime] = $conf;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!empty($this->options['archivers']['extract']) && is_array($this->options['archivers']['extract'])) {\r\n\t\tforeach ($this->options['archivers']['extract'] as $mime : $conf) {\r\n\t\t\tif (strpos($mime, 'application/') === 0\r\n\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t&& isset($conf['argc']) \r\n\t\t\t&& !empty($conf['ext'])\r\n\t\t\t&& !isset($this->archivers['extract'][$mime])) {\r\n\t\t\t\t$this->archivers['extract'][$mime] = $conf;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$this->configure();\r\n\t// echo $this->uploadMaxSize;\r\n\t// echo $this->options['uploadMaxSize'];\r\n\treturn $this->mounted = true;\r\n}\r\n\r\n/**\r\n * Some \"unmount\" stuffs - may be required by virtual fs\r\n *\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function umount() {\r\n}\r\n\r\n/**\r\n * Return error message from last failed action\r\n *\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function error() {\r\n\treturn $this->error;\r\n}\r\n\r\n/**\r\n * Set mimetypes allowed to display to client\r\n *\r\n * @param  array  $mimes\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function setMimesFilter($mimes) {\r\n\tif (is_array($mimes)) {\r\n\t\t$this->onlyMimes = $mimes;\r\n\t}\r\n}\r\n\r\n/**\r\n * Return root folder hash\r\n *\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function root() {\r\n\treturn $this->encode($this->root);\r\n}\r\n\r\n/**\r\n * Return root or startPath hash\r\n *\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function defaultPath() {\r\n\treturn $this->encode($this->startPath ? $this->startPath : $this->root);\r\n}\r\n\r\n/**\r\n * Return volume options required by client:\r\n *\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function options($hash) {\r\n\treturn array(\r\n\t\t'path'          : $this->_path($this->decode($hash)),\r\n\t\t'url'           : $this->URL,\r\n\t\t'tmbUrl'        : $this->tmbURL,\r\n\t\t'disabled'      : $this->disabled,\r\n\t\t'separator'     : $this->separator,\r\n\t\t'copyOverwrite' : intval($this->options['copyOverwrite']),\r\n\t\t'archivers'     : array(\r\n\t\t\t// 'create'  : array_keys($this->archivers['create']),\r\n\t\t\t// 'extract' : array_keys($this->archivers['extract']),\r\n\t\t\t'create'  : is_array($this->archivers['create'])  ? array_keys($this->archivers['create'])  : array(),\r\n\t\t\t'extract' : is_array($this->archivers['extract']) ? array_keys($this->archivers['extract']) : array()\r\n\t\t)\r\n\t);\r\n}\r\n\r\n/**\r\n * Return true if command disabled in options\r\n *\r\n * @param  string  $cmd  command name\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function commandDisabled($cmd) {\r\n\treturn in_array($cmd, $this->disabled);\r\n}\r\n\r\n/**\r\n * Return true if mime is required mimes list\r\n *\r\n * @param  string     $mime   mime type to check\r\n * @param  array      $mimes  allowed mime types list or not set to use client mimes list\r\n * @param  bool|null  $empty  what to return on empty list\r\n * @return bool|null\r\n * @author Dmitry (dio) Levashov\r\n * @author Troex Nevelin\r\n **/\r\npublic function mimeAccepted($mime, $mimes = array(), $empty = true) {\r\n\t$mimes = !empty($mimes) ? $mimes : $this->onlyMimes;\r\n\tif (empty($mimes)) {\r\n\t\treturn $empty;\r\n\t}\r\n\treturn $mime == 'directory'\r\n\t\t|| in_array('all', $mimes)\r\n\t\t|| in_array('All', $mimes)\r\n\t\t|| in_array($mime, $mimes)\r\n\t\t|| in_array(substr($mime, 0, strpos($mime, '/')), $mimes);\r\n}\r\n\r\n/**\r\n * Return true if voume is readable.\r\n *\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function isReadable() {\r\n\t$stat = $this->stat($this->root);\r\n\treturn $stat['read'];\r\n}\r\n\r\n/**\r\n * Return true if copy from this volume allowed\r\n *\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function copyFromAllowed() {\r\n\treturn !!$this->options['copyFrom'];\r\n}\r\n\r\n/**\r\n * Return file path related to root\r\n *\r\n * @param  string   $hash  file hash\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function path($hash) {\r\n\treturn $this->_path($this->decode($hash));\r\n}\r\n\r\n/**\r\n * Return file real path if file exists\r\n *\r\n * @param  string  $hash  file hash\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function realpath($hash) {\r\n\t$path = $this->decode($hash);\r\n\treturn $this->stat($path) ? $path : false;\r\n}\r\n\r\n/**\r\n * Return list of moved/overwrited files\r\n *\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function removed() {\r\n\treturn $this->removed;\r\n}\r\n\r\n/**\r\n * Clean removed files list\r\n *\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function resetRemoved() {\r\n\t$this->removed = array();\r\n}\r\n\r\n/**\r\n * Return file/dir hash or first founded child hash with required attr == $val\r\n *\r\n * @param  string   $hash  file hash\r\n * @param  string   $attr  attribute name\r\n * @param  bool     $val   attribute value\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function closest($hash, $attr, $val) {\r\n\treturn ($path = $this->closestByAttr($this->decode($hash), $attr, $val)) ? $this->encode($path) : false;\r\n}\r\n\r\n/**\r\n * Return file info or false on error\r\n *\r\n * @param  string   $hash      file hash\r\n * @param  bool     $realpath  add realpath field to file info\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function file($hash) {\r\n\t$path = $this->decode($hash);\r\n\r\n\treturn ($file = $this->stat($path)) ? $file : $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\r\n\tif (($file = $this->stat($path)) != false) {\r\n\t\tif ($realpath) {\r\n\t\t\t$file['realpath'] = $path;\r\n\t\t}\r\n\t\treturn $file;\r\n\t}\r\n\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n}\r\n\r\n/**\r\n * Return folder info\r\n *\r\n * @param  string   $hash  folder hash\r\n * @param  bool     $hidden  return hidden file info\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function dir($hash, $resolveLink=false) {\r\n\tif (($dir = $this->file($hash)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_DIR_NOT_FOUND);\r\n\t}\r\n\r\n\tif ($resolveLink && !empty($dir['thash'])) {\r\n\t\t$dir = $this->file($dir['thash']);\r\n\t}\r\n\r\n\treturn $dir && $dir['mime'] == 'directory' && empty($dir['hidden']) \r\n\t\t? $dir \r\n\t\t: $this->setError(elFinder::ERROR_NOT_DIR);\r\n}\r\n\r\n/**\r\n * Return directory content or false on error\r\n *\r\n * @param  string   $hash   file hash\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function scandir($hash) {\r\n\tif (($dir = $this->dir($hash)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn $dir['read']\r\n\t\t? $this->getScandir($this->decode($hash))\r\n\t\t: $this->setError(elFinder::ERROR_PERM_DENIED);\r\n}\r\n\r\n/**\r\n * Return dir files names list\r\n * \r\n * @param  string  $hash   file hash\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function ls($hash) {\r\n\tif (($dir = $this->dir($hash)) == false || !$dir['read']) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$list = array();\r\n\t$path = $this->decode($hash);\r\n\r\n\tforeach ($this->getScandir($path) as $stat) {\r\n\t\tif (empty($stat['hidden']) && $this->mimeAccepted($stat['mime'])) {\r\n\t\t\t$list[] = $stat['name'];\r\n\t\t}\r\n\t}\r\n\r\n\treturn $list;\r\n}\r\n\r\n/**\r\n * Return subfolders for required folder or false on error\r\n *\r\n * @param  string   $hash  folder hash or empty string to get tree from root folder\r\n * @param  int      $deep  subdir deep\r\n * @param  string   $exclude  dir hash which subfolders must be exluded from result, required to not get stat twice on cwd subfolders\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function tree($hash='', $deep=0, $exclude='') {\r\n\t$path = $hash ? $this->decode($hash) : $this->root;\r\n\r\n\tif (($dir = $this->stat($path)) == false || $dir['mime'] != 'directory') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$dirs = $this->gettree($path, $deep > 0 ? $deep -1 : $this->treeDeep-1, $exclude ? $this->decode($exclude) : null);\r\n\tarray_unshift($dirs, $dir);\r\n\treturn $dirs;\r\n}\r\n\r\n/**\r\n * Return part of dirs tree from required dir up to root dir\r\n *\r\n * @param  string  $hash  directory hash\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function parents($hash) {\r\n\tif (($current = $this->dir($hash)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$path = $this->decode($hash);\r\n\t$tree = array();\r\n\r\n\twhile ($path && $path != $this->root) {\r\n\t\t$path = $this->_dirname($path);\r\n\t\t$stat = $this->stat($path);\r\n\t\tif (!empty($stat['hidden']) || !$stat['read']) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tarray_unshift($tree, $stat);\r\n\t\tif ($path != $this->root) {\r\n\t\t\tforeach ($this->gettree($path, 0) as $dir) {\r\n\t\t\t\tif (!in_array($dir, $tree)) {\r\n\t\t\t\t\t$tree[] = $dir;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn $tree ? $tree : array($current);\r\n}\r\n\r\n/**\r\n * Create thumbnail for required file and return its name of false on failed\r\n *\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function tmb($hash) {\r\n\t$path = $this->decode($hash);\r\n\t$stat = $this->stat($path);\r\n\r\n\tif (isset($stat['tmb'])) {\r\n\t\treturn $stat['tmb'] == \"1\" ? $this->createTmb($path, $stat) : $stat['tmb'];\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Return file size / total directory size\r\n *\r\n * @param  string   file hash\r\n * @return int\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function size($hash) {\r\n\treturn $this->countSize($this->decode($hash));\r\n}\r\n\r\n/**\r\n * Open file for reading and return file pointer\r\n *\r\n * @param  string   file hash\r\n * @return Resource\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function open($hash) {\r\n\tif (($file = $this->file($hash)) == false\r\n\t|| $file['mime'] == 'directory') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn $this->_fopen($this->decode($hash), 'rb');\r\n}\r\n\r\n/**\r\n * Close file pointer\r\n *\r\n * @param  Resource  $fp   file pointer\r\n * @param  string    $hash file hash\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function close($fp, $hash) {\r\n\t$this->_fclose($fp, $this->decode($hash));\r\n}\r\n\r\n/**\r\n * Create directory and return dir info\r\n *\r\n * @param  string   $dst  destination directory\r\n * @param  string   $name directory name\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function mkdir($dst, $name) {\r\n\tif ($this->commandDisabled('mkdir')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (!$this->nameAccepted($name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t}\r\n\r\n\tif (($dir = $this->dir($dst)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t}\r\n\r\n\tif (!$dir['write']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$path = $this->decode($dst);\r\n\t$dst  = $this->_joinPath($path, $name);\r\n\t$stat = $this->stat($dst); \r\n\tif (!empty($stat)) { \r\n\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t}\r\n\t$this->clearcache();\r\n\treturn ($path = $this->_mkdir($path, $name)) ? $this->stat($path) : false;\r\n}\r\n\r\n/**\r\n * Create empty file and return its info\r\n *\r\n * @param  string   $dst  destination directory\r\n * @param  string   $name file name\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function mkfile($dst, $name) {\r\n\tif ($this->commandDisabled('mkfile')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (!$this->nameAccepted($name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t}\r\n\r\n\tif (($dir = $this->dir($dst)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t}\r\n\r\n\t$path = $this->decode($dst);\r\n\r\n\tif (!$dir['write'] || !$this->allowCreate($path, $name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif ($this->stat($this->_joinPath($path, $name))) {\r\n\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t}\r\n\r\n\t$this->clearcache();\r\n\treturn ($path = $this->_mkfile($path, $name)) ? $this->stat($path) : false;\r\n}\r\n\r\n/**\r\n * Rename file and return file info\r\n *\r\n * @param  string  $hash  file hash\r\n * @param  string  $name  new file name\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function rename($hash, $name) {\r\n\tif ($this->commandDisabled('rename')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (!$this->nameAccepted($name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME, $name);\r\n\t}\r\n\r\n\tif (!($file = $this->file($hash))) {\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\tif ($name == $file['name']) {\r\n\t\treturn $file;\r\n\t}\r\n\r\n\tif (!empty($file['locked'])) {\r\n\t\treturn $this->setError(elFinder::ERROR_LOCKED, $file['name']);\r\n\t}\r\n\r\n\t$path = $this->decode($hash);\r\n\t$dir  = $this->_dirname($path);\r\n\t$stat = $this->stat($this->_joinPath($dir, $name));\r\n\tif ($stat) {\r\n\t\treturn $this->setError(elFinder::ERROR_EXISTS, $name);\r\n\t}\r\n\r\n\tif (!$this->allowCreate($dir, $name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$this->rmTmb($file); // remove old name tmbs, we cannot do this after dir move\r\n\r\n\r\n\tif (($path = $this->_move($path, $dir, $name))) {\r\n\t\t$this->clearcache();\r\n\t\treturn $this->stat($path);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Create file copy with suffix \"copy number\" and return its info\r\n *\r\n * @param  string   $hash    file hash\r\n * @param  string   $suffix  suffix to add to file name\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function duplicate($hash, $suffix='copy') {\r\n\tif ($this->commandDisabled('duplicate')) {\r\n\t\treturn $this->setError(elFinder::ERROR_COPY, '#'.$hash, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($file = $this->file($hash)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_COPY, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\t$path = $this->decode($hash);\r\n\t$dir  = $this->_dirname($path);\r\n\t$name = $this->uniqueName($dir, $this->_basename($path), ' '.$suffix.' ');\r\n\r\n\tif (!$this->allowCreate($dir, $name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\treturn ($path = $this->copy($path, $dir, $name)) == false\r\n\t\t? false\r\n\t\t: $this->stat($path);\r\n}\r\n\r\n/**\r\n * Save uploaded file. \r\n * On success return array with new file stat and with removed file hash (if existed file was replaced)\r\n *\r\n * @param  Resource $fp      file pointer\r\n * @param  string   $dst     destination folder hash\r\n * @param  string   $src     file name\r\n * @param  string   $tmpname file tmp name - required to detect mime type\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function upload($fp, $dst, $name, $tmpname) {\r\n\tif ($this->commandDisabled('upload')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($dir = $this->dir($dst)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t}\r\n\r\n\tif (!$dir['write']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (!$this->nameAccepted($name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t}\r\n\r\n\t$mime = $this->mimetype($this->mimeDetect == 'internal' ? $name : $tmpname, $name); \r\n\tif ($mime == 'unknown' && $this->mimeDetect == 'internal') {\r\n\t\t$mime = elFinderVolumeDriver::mimetypeInternalDetect($name);\r\n\t}\r\n\r\n\t// logic based on http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#order\r\n\t$allow  = $this->mimeAccepted($mime, $this->uploadAllow, null);\r\n\t$deny   = $this->mimeAccepted($mime, $this->uploadDeny,  null);\r\n\t$upload = true; // default to allow\r\n\tif (strtolower($this->uploadOrder[0]) == 'allow') { // array('allow', 'deny'), default is to 'deny'\r\n\t\t$upload = false; // default is deny\r\n\t\tif (!$deny && ($allow === true)) { // match only allow\r\n\t\t\t$upload = true;\r\n\t\t}// else (both match | no match | match only deny) { deny }\r\n\t} else { // array('deny', 'allow'), default is to 'allow' - this is the default rule\r\n\t\t$upload = true; // default is allow\r\n\t\tif (($deny === true) && !$allow) { // match only deny\r\n\t\t\t$upload = false;\r\n\t\t} // else (both match | no match | match only allow) { allow }\r\n\t}\r\n\tif (!$upload) {\r\n\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_MIME);\r\n\t}\r\n\r\n\tif ($this->uploadMaxSize > 0 && filesize($tmpname) > $this->uploadMaxSize) {\r\n\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_SIZE);\r\n\t}\r\n\r\n\t$dstpath = $this->decode($dst);\r\n\t$test    = $this->_joinPath($dstpath, $name);\r\n\r\n\t$file = $this->stat($test);\r\n\t$this->clearcache();\r\n\r\n\tif ($file) { // file exists\r\n\t\tif ($this->options['uploadOverwrite']) {\r\n\t\t\tif (!$file['write']) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t} elseif ($file['mime'] == 'directory') {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $name);\r\n\t\t\t} \r\n\t\t\t$this->remove($test);\r\n\t\t} else {\r\n\t\t\t$name = $this->uniqueName($dstpath, $name, '-', false);\r\n\t\t}\r\n\t}\r\n\r\n\t$stat = array(\r\n\t\t'mime'   : $mime, \r\n\t\t'width'  : 0, \r\n\t\t'height' : 0, \r\n\t\t'size'   : filesize($tmpname));\r\n\r\n\t// $w = $h = 0;\r\n\tif (strpos($mime, 'image') === 0 && ($s = getimagesize($tmpname))) {\r\n\t\t$stat['width'] = $s[0];\r\n\t\t$stat['height'] = $s[1];\r\n\t}\r\n\t// $this->clearcache();\r\n\tif (($path = $this->_save($fp, $dstpath, $name, $stat)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\r\n\treturn $this->stat($path);\r\n}\r\n\r\n/**\r\n * Paste files\r\n *\r\n * @param  Object  $volume  source volume\r\n * @param  string  $source  file hash\r\n * @param  string  $dst     destination dir hash\r\n * @param  bool    $rmSrc   remove source after copy?\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function paste($volume, $src, $dst, $rmSrc = false) {\r\n\t$err = $rmSrc ? elFinder::ERROR_MOVE : elFinder::ERROR_COPY;\r\n\r\n\tif ($this->commandDisabled('paste')) {\r\n\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($file = $volume->file($src, $rmSrc)) == false) {\r\n\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\t$name = $file['name'];\r\n\t$errpath = $volume->path($src);\r\n\r\n\tif (($dir = $this->dir($dst)) == false) {\r\n\t\treturn $this->setError($err, $errpath, elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t}\r\n\r\n\tif (!$dir['write'] || !$file['read']) {\r\n\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$destination = $this->decode($dst);\r\n\r\n\tif (($test = $volume->closest($src, $rmSrc ? 'locked' : 'read', $rmSrc))) {\r\n\t\treturn $rmSrc\r\n\t\t\t? $this->setError($err, $errpath, elFinder::ERROR_LOCKED, $volume->path($test))\r\n\t\t\t: $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$test = $this->_joinPath($destination, $name);\r\n\t$stat = $this->stat($test);\r\n\t$this->clearcache();\r\n\tif ($stat) {\r\n\t\tif ($this->options['copyOverwrite']) {\r\n\t\t\t// do not replace file with dir or dir with file\r\n\t\t\tif (!$this->isSameType($file['mime'], $stat['mime'])) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $this->_path($test));\r\n\t\t\t}\r\n\t\t\t// existed file is not writable\r\n\t\t\tif (!$stat['write']) {\r\n\t\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t\t}\r\n\t\t\t// existed file locked or has locked child\r\n\t\t\tif (($locked = $this->closestByAttr($test, 'locked', true))) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($locked));\r\n\t\t\t}\r\n\t\t\t// target is entity file of alias\r\n\t\t\tif ($volume == $this && ($test == @$file['target'] || $test == $this->decode($src))) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $errpath);\r\n\t\t\t}\r\n\t\t\t// remove existed file\r\n\t\t\tif (!$this->remove($test)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $this->_path($test));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t$name = $this->uniqueName($destination, $name, ' ', false);\r\n\t\t}\r\n\t}\r\n\r\n\t// copy/move inside current volume\r\n\tif ($volume == $this) {\r\n\t\t$source = $this->decode($src);\r\n\t\t// do not copy into itself\r\n\t\tif ($this->_inpath($destination, $source)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY_INTO_ITSELF, $errpath);\r\n\t\t}\r\n\t\t$method = $rmSrc ? 'move' : 'copy';\r\n\t\treturn ($path = $this->$method($source, $destination, $name)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t// copy/move from another volume\r\n\tif (!$this->options['copyTo'] || !$volume->copyFromAllowed()) {\r\n\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($path = $this->copyFrom($volume, $src, $destination, $name)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif ($rmSrc) {\r\n\t\tif ($volume->rm($src)) {\r\n\t\t\t$this->removed[] = $file;\r\n\t\t} else {\r\n\t\t\treturn $this->setError(elFinder::ERROR_MOVE, $errpath, elFinder::ERROR_RM_SRC);\r\n\t\t}\r\n\t}\r\n\treturn $this->stat($path);\r\n}\r\n\r\n/**\r\n * Return file contents\r\n *\r\n * @param  string  $hash  file hash\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function getContents($hash) {\r\n\t$file = $this->file($hash);\r\n\r\n\tif (!$file) {\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\tif ($file['mime'] == 'directory') {\r\n\t\treturn $this->setError(elFinder::ERROR_NOT_FILE);\r\n\t}\r\n\r\n\tif (!$file['read']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\treturn $this->_getContents($this->decode($hash));\r\n}\r\n\r\n/**\r\n * Put content in text file and return file info.\r\n *\r\n * @param  string  $hash     file hash\r\n * @param  string  $content  new file content\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function putContents($hash, $content) {\r\n\tif ($this->commandDisabled('edit')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$path = $this->decode($hash);\r\n\r\n\tif (!($file = $this->file($hash))) {\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\tif (!$file['write']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\t$this->clearcache();\r\n\treturn $this->_filePutContents($path, $content) ? $this->stat($path) : false;\r\n}\r\n\r\n/**\r\n * Extract files from archive\r\n *\r\n * @param  string  $hash  archive hash\r\n * @return array|bool\r\n * @author Dmitry (dio) Levashov, \r\n * @author Alexey Sukhotin\r\n **/\r\npublic function extract($hash) {\r\n\tif ($this->commandDisabled('extract')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($file = $this->file($hash)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\t$archiver = isset($this->archivers['extract'][$file['mime']])\r\n\t\t? $this->archivers['extract'][$file['mime']]\r\n\t\t: false;\r\n\r\n\tif (!$archiver) {\r\n\t\treturn $this->setError(elFinder::ERROR_NOT_ARCHIVE);\r\n\t}\r\n\r\n\t$path   = $this->decode($hash);\r\n\t$parent = $this->stat($this->_dirname($path));\r\n\r\n\tif (!$file['read'] || !$parent['write']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\t$this->clearcache();\r\n\treturn ($path = $this->_extract($path, $archiver)) ? $this->stat($path) : false;\r\n}\r\n\r\n/**\r\n * Add files to archive\r\n *\r\n * @return void\r\n **/\r\npublic function archive($hashes, $mime) {\r\n\tif ($this->commandDisabled('archive')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$archiver = isset($this->archivers['create'][$mime])\r\n\t\t? $this->archivers['create'][$mime]\r\n\t\t: false;\r\n\r\n\tif (!$archiver) {\r\n\t\treturn $this->setError(elFinder::ERROR_ARCHIVE_TYPE);\r\n\t}\r\n\r\n\t$files = array();\r\n\r\n\tforeach ($hashes as $hash) {\r\n\t\tif (($file = $this->file($hash)) == false) {\r\n\t\t\treturn $this->error(elFinder::ERROR_FILE_NOT_FOUND, '#'+$hash);\r\n\t\t}\r\n\t\tif (!$file['read']) {\r\n\t\t\treturn $this->error(elFinder::ERROR_PERM_DENIED);\r\n\t\t}\r\n\t\t$path = $this->decode($hash);\r\n\t\tif (!isset($dir)) {\r\n\t\t\t$dir = $this->_dirname($path);\r\n\t\t\t$stat = $this->stat($dir);\r\n\t\t\tif (!$stat['write']) {\r\n\t\t\t\treturn $this->error(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$files[] = $this->_basename($path);\r\n\t}\r\n\r\n\t$name = (count($files) == 1 ? $files[0] : 'Archive').'.'.$archiver['ext'];\r\n\t$name = $this->uniqueName($dir, $name, '');\r\n\t$this->clearcache();\r\n\treturn ($path = $this->_archive($dir, $files, $name, $archiver)) ? $this->stat($path) : false;\r\n}\r\n\r\n/**\r\n * Resize image\r\n *\r\n * @param  string   $hash    image file\r\n * @param  int      $width   new width\r\n * @param  int      $height  new height\r\n * @param  int      $x       X start poistion for crop\r\n * @param  int      $y       Y start poistion for crop\r\n * @param  string   $mode    action how to mainpulate image\r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n * @author Alexey Sukhotin\r\n * @author nao-pon\r\n * @author Troex Nevelin\r\n **/\r\npublic function resize($hash, $width, $height, $x, $y, $mode = 'resize', $bg = '', $degree = 0) {\r\n\tif ($this->commandDisabled('resize')) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($file = $this->file($hash)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\tif (!$file['write'] || !$file['read']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$path = $this->decode($hash);\r\n\r\n\tif (!$this->canResize($path, $file)) {\r\n\t\treturn $this->setError(elFinder::ERROR_UNSUPPORT_TYPE);\r\n\t}\r\n\r\n\tswitch($mode) {\r\n\r\n\t\tcase 'propresize':\r\n\t\t\t$result = $this->imgResize($path, $width, $height, true, true);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'crop':\r\n\t\t\t$result = $this->imgCrop($path, $width, $height, $x, $y);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'fitsquare':\r\n\t\t\t$result = $this->imgSquareFit($path, $width, $height, 'center', 'middle', ($bg ? $bg : $this->options['tmbBgColor']));\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'rotate':\r\n\t\t\t$result = $this->imgRotate($path, $degree, ($bg ? $bg : $this->options['tmbBgColor']));\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\t$result = $this->imgResize($path, $width, $height, false, true);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif ($result) {\r\n\t\t$this->rmTmb($file);\r\n\t\t$this->clearcache();\r\n\t\treturn $this->stat($path);\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Remove file/dir\r\n *\r\n * @param  string  $hash  file hash\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function rm($hash) {\r\n\treturn $this->commandDisabled('rm')\r\n\t\t? array(elFinder::ERROR_ACCESS_DENIED)\r\n\t\t: $this->remove($this->decode($hash));\r\n}\r\n\r\n/**\r\n * Search files\r\n *\r\n * @param  string  $q  search string\r\n * @param  array   $mimes\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function search($q, $mimes) {\r\n\treturn $this->doSearch($this->root, $q, $mimes);\r\n}\r\n\r\n/**\r\n * Return image dimensions\r\n *\r\n * @param  string  $hash  file hash\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function dimensions($hash) {\r\n\tif (($file = $this->file($hash)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn $this->_dimensions($this->decode($hash), $file['mime']);\r\n}\r\n\r\n/**\r\n * Save error message\r\n *\r\n * @param  array  error \r\n * @return false\r\n * @author Dmitry(dio) Levashov\r\n **/\r\nprotected function setError($error) {\r\n\r\n\t$this->error = array();\r\n\r\n\tforeach (func_get_args() as $err) {\r\n\t\tif (is_array($err)) {\r\n\t\t\t$this->error = array_merge($this->error, $err);\r\n\t\t} else {\r\n\t\t\t$this->error[] = $err;\r\n\t\t}\r\n\t}\r\n\r\n\t// $this->error = is_array($error) ? $error : func_get_args();\r\n\treturn false;\r\n}\r\n\r\n/*********************************************************************/\r\n/*                               FS API                              */\r\n/*********************************************************************/\r\n\r\n/***************** paths *******************/\r\n\r\n/**\r\n * Encode path into hash\r\n *\r\n * @param  string  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n * @author Troex Nevelin\r\n **/\r\nprotected function encode($path) {\r\n\tif ($path !== '') {\r\n\r\n\t\t// cut ROOT from $path for security reason, even if hacker decodes the path he will not know the root\r\n\t\t$p = $this->_relpath($path);\r\n\t\t// if reqesting root dir $path will be empty, then assign '/' as we cannot leave it blank for crypt\r\n\t\tif ($p === '')\t{\r\n\t\t\t$p = DIRECTORY_SEPARATOR;\r\n\t\t}\r\n\r\n\t\t// TODO crypt path and return hash\r\n\t\t$hash = $this->crypt($p);\r\n\t\t// hash is used as id in HTML that means it must contain vaild chars\r\n\t\t// make base64 html safe and append prefix in begining\r\n\t\t$hash = strtr(base64_encode($hash), '+/=', '-_.');\r\n\t\t// remove dots '.' at the end, before it was '=' in base64\r\n\t\t$hash = rtrim($hash, '.'); \r\n\t\t// append volume id to make hash unique\r\n\t\treturn $this->id.$hash;\r\n\t}\r\n}\r\n\r\n/**\r\n * Decode path from hash\r\n *\r\n * @param  string  file hash\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n * @author Troex Nevelin\r\n **/\r\nprotected function decode($hash) {\r\n\tif (strpos($hash, $this->id) === 0) {\r\n\t\t// cut volume id after it was prepended in encode\r\n\t\t$h = substr($hash, strlen($this->id));\r\n\t\t// replace HTML safe base64 to normal\r\n\t\t$h = base64_decode(strtr($h, '-_.', '+/='));\r\n\t\t// TODO uncrypt hash and return path\r\n\t\t$path = $this->uncrypt($h); \r\n\t\t// append ROOT to path after it was cut in encode\r\n\t\treturn $this->_abspath($path);//$this->root.($path == DIRECTORY_SEPARATOR ? '' : DIRECTORY_SEPARATOR.$path); \r\n\t}\r\n}\r\n\r\n/**\r\n * Return crypted path \r\n * Not implemented\r\n *\r\n * @param  string  path\r\n * @return mixed\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function crypt($path) {\r\n\treturn $path;\r\n}\r\n\r\n/**\r\n * Return uncrypted path \r\n * Not implemented\r\n *\r\n * @param  mixed  hash\r\n * @return mixed\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function uncrypt($hash) {\r\n\treturn $hash;\r\n}\r\n\r\n/**\r\n * Validate file name based on $this->options['acceptedName'] regexp\r\n *\r\n * @param  string  $name  file name\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function nameAccepted($name) {\r\n\tif ($this->nameValidator) {\r\n\t\tif (function_exists($this->nameValidator)) {\r\n\t\t\t$f = $this->nameValidator;\r\n\t\t\treturn $f($name);\r\n\t\t}\r\n\r\n\t\treturn preg_match($this->nameValidator, $name);\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Return new unique name based on file name and suffix\r\n *\r\n * @param  string  $path    file path\r\n * @param  string  $suffix  suffix append to name\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\npublic function uniqueName($dir, $name, $suffix = ' copy', $checkNum=true) {\r\n\t$ext  = '';\r\n\r\n\tif (preg_match('/\\.((tar\\.(gz|bz|bz2|z|lzo))|cpio\\.gz|ps\\.gz|xcf\\.(gz|bz2)|[a-z0-9]{1,4})$/i', $name, $m)) {\r\n\t\t$ext  = '.'.$m[1];\r\n\t\t$name = substr($name, 0,  strlen($name)-strlen($m[0]));\r\n\t} \r\n\r\n\tif ($checkNum && preg_match('/('.$suffix.')(\\d*)$/i', $name, $m)) {\r\n\t\t$i    = (int)$m[2];\r\n\t\t$name = substr($name, 0, strlen($name)-strlen($m[2]));\r\n\t} else {\r\n\t\t$i     = 1;\r\n\t\t$name .= $suffix;\r\n\t}\r\n\t$max = $i+100000;\r\n\r\n\twhile ($i <= $max) {\r\n\t\t$n = $name.($i > 0 ? $i : '').$ext;\r\n\r\n\t\tif (!$this->stat($this->_joinPath($dir, $n))) {\r\n\t\t\t$this->clearcache();\r\n\t\t\treturn $n;\r\n\t\t}\r\n\t\t$i++;\r\n\t}\r\n\treturn $name.md5($dir).$ext;\r\n}\r\n\r\n/*********************** file stat *********************/\r\n\r\n/**\r\n * Check file attribute\r\n *\r\n * @param  string  $path  file path\r\n * @param  string  $name  attribute name (read|write|locked|hidden)\r\n * @param  bool    $val   attribute value returned by file system\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function attr($path, $name, $val=null) {\r\n\tif (!isset($this->defaults[$name])) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t$perm = null;\r\n\r\n\tif ($this->access) {\r\n\t\t$perm = call_user_func($this->access, $name, $path, $this->options['accessControlData'], $this);\r\n\r\n\t\tif ($perm !== null) {\r\n\t\t\treturn !!$perm;\r\n\t\t}\r\n\t}\r\n\r\n\tif ($this->separator != '/') {\r\n\t\t$path = str_replace($this->separator, '/', $this->_relpath($path));\r\n\t} else {\r\n\t\t$path = $this->_relpath($path);\r\n\t}\r\n\r\n\t$path = '/'.$path;\r\n\r\n\tfor ($i = 0, $c = count($this->attributes); $i < $c; $i++) {\r\n\t\t$attrs = $this->attributes[$i];\r\n\r\n\t\tif (isset($attrs[$name]) && isset($attrs['pattern']) && preg_match($attrs['pattern'], $path)) {\r\n\t\t\t$perm = $attrs[$name];\r\n\t\t} \r\n\t}\r\n\r\n\treturn $perm === null ? (is_null($val)? $this->defaults[$name] : $val) : !!$perm;\r\n}\r\n\r\n/**\r\n * Return true if file with given name can be created in given folder.\r\n *\r\n * @param string $dir  parent dir path\r\n * @param string $name new file name\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function allowCreate($dir, $name) {\r\n\t$path = $this->_joinPath($dir, $name);\r\n\t$perm = null;\r\n\r\n\tif ($this->access) {\r\n\t\t$perm = call_user_func($this->access, 'write', $path, $this->options['accessControlData'], $this);\t\t\t\r\n\t\tif ($perm !== null) {\r\n\t\t\treturn !!$perm;\r\n\t\t}\r\n\t}\r\n\r\n\t$testPath = $this->separator.$this->_relpath($path);\r\n\r\n\tfor ($i = 0, $c = count($this->attributes); $i < $c; $i++) {\r\n\t\t$attrs = $this->attributes[$i];\r\n\r\n\t\tif (isset($attrs['write']) && isset($attrs['pattern']) && preg_match($attrs['pattern'], $testPath)) {\r\n\t\t\t$perm = $attrs['write'];\r\n\t\t} \r\n\t}\r\n\r\n\treturn $perm === null ? true : $perm;\r\n}\r\n\r\n/**\r\n * Return fileinfo \r\n *\r\n * @param  string  $path  file cache\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function stat($path) {\r\n\tif ($path === false) {\r\n\t\treturn false;\r\n\t}\r\n\treturn isset($this->cache[$path])\r\n\t\t? $this->cache[$path]\r\n\t\t: $this->updateCache($path, $this->_stat($path));\r\n}\r\n\r\n/**\r\n * Put file stat in cache and return it\r\n *\r\n * @param  string  $path   file path\r\n * @param  array   $stat   file stat\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function updateCache($path, $stat) {\r\n\tif (empty($stat) || !is_array($stat)) {\r\n\t\treturn $this->cache[$path] = array();\r\n\t}\r\n\r\n\t$stat['hash'] = $this->encode($path);\r\n\r\n\t$root = $path == $this->root;\r\n\r\n\tif ($root) {\r\n\t\t$stat['volumeid'] = $this->id;\r\n\t\tif ($this->rootName) {\r\n\t\t\t$stat['name'] = $this->rootName;\r\n\t\t}\r\n\t} else {\r\n\t\tif (!isset($stat['name']) || !strlen($stat['name'])) {\r\n\t\t\t$stat['name'] = $this->_basename($path);\r\n\t\t}\r\n\t\tif (empty($stat['phash'])) {\r\n\t\t\t$stat['phash'] = $this->encode($this->_dirname($path));\r\n\t\t}\r\n\t}\r\n\r\n\t// fix name if required\r\n\tif ($this->options['utf8fix'] && $this->options['utf8patterns'] && $this->options['utf8replace']) {\r\n\t\t$stat['name'] = json_decode(str_replace($this->options['utf8patterns'], $this->options['utf8replace'], json_encode($stat['name'])));\r\n\t}\r\n\r\n\r\n\tif (empty($stat['mime'])) {\r\n\t\t$stat['mime'] = $this->mimetype($stat['name']);\r\n\t}\r\n\r\n\t// @todo move dateformat to client\r\n\t// $stat['date'] = isset($stat['ts'])\r\n\t// \t? $this->formatDate($stat['ts'])\r\n\t// \t: 'unknown';\r\n\r\n\tif (!isset($stat['size'])) {\r\n\t\t$stat['size'] = 'unknown';\r\n\t}\t\r\n\r\n\t$stat['read']  = intval($this->attr($path, 'read', isset($stat['read']) ? !!$stat['read'] : null));\r\n\t$stat['write'] = intval($this->attr($path, 'write', isset($stat['write']) ? !!$stat['write'] : null));\r\n\tif ($root) {\r\n\t\t$stat['locked'] = 1;\r\n\t} elseif ($this->attr($path, 'locked', !empty($stat['locked']))) {\r\n\t\t$stat['locked'] = 1;\r\n\t} else {\r\n\t\tunset($stat['locked']);\r\n\t}\r\n\r\n\tif ($root) {\r\n\t\tunset($stat['hidden']);\r\n\t} elseif ($this->attr($path, 'hidden', !empty($stat['hidden'])) \r\n\t|| !$this->mimeAccepted($stat['mime'])) {\r\n\t\t$stat['hidden'] = $root ? 0 : 1;\r\n\t} else {\r\n\t\tunset($stat['hidden']);\r\n\t}\r\n\r\n\tif ($stat['read'] && empty($stat['hidden'])) {\r\n\r\n\t\tif ($stat['mime'] == 'directory') {\r\n\t\t\t// for dir - check for subdirs\r\n\r\n\t\t\tif ($this->options['checkSubfolders']) {\r\n\t\t\t\tif (isset($stat['dirs'])) {\r\n\t\t\t\t\tif ($stat['dirs']) {\r\n\t\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tunset($stat['dirs']);\r\n\t\t\t\t\t}\r\n\t\t\t\t} elseif (!empty($stat['alias']) && !empty($stat['target'])) {\r\n\t\t\t\t\t$stat['dirs'] = isset($this->cache[$stat['target']])\r\n\t\t\t\t\t\t? intval(isset($this->cache[$stat['target']]['dirs']))\r\n\t\t\t\t\t\t: $this->_subdirs($stat['target']);\r\n\r\n\t\t\t\t} elseif ($this->_subdirs($path)) {\r\n\t\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$stat['dirs'] = 1;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// for files - check for thumbnails\r\n\t\t\t$p = isset($stat['target']) ? $stat['target'] : $path;\r\n\t\t\tif ($this->tmbURL && !isset($stat['tmb']) && $this->canCreateTmb($p, $stat)) {\r\n\t\t\t\t$tmb = $this->gettmb($p, $stat);\r\n\t\t\t\t$stat['tmb'] = $tmb ? $tmb : 1;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tif (!empty($stat['alias']) && !empty($stat['target'])) {\r\n\t\t$stat['thash'] = $this->encode($stat['target']);\r\n\t\tunset($stat['target']);\r\n\t}\r\n\r\n\treturn $this->cache[$path] = $stat;\r\n}\r\n\r\n/**\r\n * Get stat for folder content and put in cache\r\n *\r\n * @param  string  $path\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function cacheDir($path) {\r\n\t$this->dirsCache[$path] = array();\r\n\r\n\tforeach ($this->_scandir($path) as $p) {\r\n\t\tif (($stat = $this->stat($p)) && empty($stat['hidden'])) {\r\n\t\t\t$this->dirsCache[$path][] = $p;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Clean cache\r\n *\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function clearcache() {\r\n\t$this->cache = $this->dirsCache = array();\r\n}\r\n\r\n/**\r\n * Return file mimetype\r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function mimetype($path, $name = '') {\r\n\t$type = '';\r\n\r\n\tif ($this->mimeDetect == 'finfo') {\r\n\t\tif ($type = @finfo_file($this->finfo, $path)) {\r\n\t\t\tif ($name === '') {\r\n\t\t\t\t$name = $path;\r\n\t\t\t}\r\n\t\t\t$ext = (false === $pos = strrpos($name, '.')) ? '' : substr($name, $pos + 1);\r\n\t\t\tif ($ext && preg_match('~^application/(?:octet-stream|(?:x-)?zip)~', $type)) {\r\n\t\t\t\tif (isset(elFinderVolumeDriver::$mimetypes[$ext])) $type = elFinderVolumeDriver::$mimetypes[$ext];\r\n\t\t\t}\r\n\t\t}\r\n\t} elseif ($type == 'mime_content_type') {\r\n\t\t$type = mime_content_type($path);\r\n\t} else {\r\n\t\t$type = elFinderVolumeDriver::mimetypeInternalDetect($path);\r\n\t}\r\n\r\n\t$type = explode(';', $type);\r\n\t$type = trim($type[0]);\r\n\r\n\tif (in_array($type, array('application/x-empty', 'inode/x-empty'))) {\r\n\t\t// finfo return this mime for empty files\r\n\t\t$type = 'text/plain';\r\n\t} elseif ($type == 'application/x-zip') {\r\n\t\t// http://elrte.org/redmine/issues/163\r\n\t\t$type = 'application/zip';\r\n\t}\r\n\r\n\treturn $type == 'unknown' && $this->mimeDetect != 'internal'\r\n\t\t? elFinderVolumeDriver::mimetypeInternalDetect($path)\r\n\t\t: $type;\r\n\r\n}\r\n\r\n/**\r\n * Detect file mimetype using \"internal\" method\r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nstatic protected function mimetypeInternalDetect($path) {\r\n\t$pinfo = pathinfo($path); \r\n\t$ext   = isset($pinfo['extension']) ? strtolower($pinfo['extension']) : '';\r\n\treturn isset(elFinderVolumeDriver::$mimetypes[$ext]) ? elFinderVolumeDriver::$mimetypes[$ext] : 'unknown';\r\n\r\n}\r\n\r\n/**\r\n * Return file/total directory size\r\n *\r\n * @param  string  $path  file path\r\n * @return int\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function countSize($path) {\r\n\t$stat = $this->stat($path);\r\n\r\n\tif (empty($stat) || !$stat['read'] || !empty($stat['hidden'])) {\r\n\t\treturn 'unknown';\r\n\t}\r\n\r\n\tif ($stat['mime'] != 'directory') {\r\n\t\treturn $stat['size'];\r\n\t}\r\n\r\n\t$subdirs = $this->options['checkSubfolders'];\r\n\t$this->options['checkSubfolders'] = true;\r\n\t$result = 0;\r\n\tforeach ($this->getScandir($path) as $stat) {\r\n\t\t$size = $stat['mime'] == 'directory' && $stat['read'] \r\n\t\t\t? $this->countSize($this->_joinPath($path, $stat['name'])) \r\n\t\t\t: (isset($stat['size']) ? intval($stat['size']) : 0);\r\n\t\tif ($size > 0) {\r\n\t\t\t$result += $size;\r\n\t\t}\r\n\t}\r\n\t$this->options['checkSubfolders'] = $subdirs;\r\n\treturn $result;\r\n}\r\n\r\n/**\r\n * Return true if all mimes is directory or files\r\n *\r\n * @param  string  $mime1  mimetype\r\n * @param  string  $mime2  mimetype\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function isSameType($mime1, $mime2) {\r\n\treturn ($mime1 == 'directory' && $mime1 == $mime2) || ($mime1 != 'directory' && $mime2 != 'directory');\r\n}\r\n\r\n/**\r\n * If file has required attr == $val - return file path,\r\n * If dir has child with has required attr == $val - return child path\r\n *\r\n * @param  string   $path  file path\r\n * @param  string   $attr  attribute name\r\n * @param  bool     $val   attribute value\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function closestByAttr($path, $attr, $val) {\r\n\t$stat = $this->stat($path);\r\n\r\n\tif (empty($stat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$v = isset($stat[$attr]) ? $stat[$attr] : false;\r\n\r\n\tif ($v == $val) {\r\n\t\treturn $path;\r\n\t}\r\n\r\n\treturn $stat['mime'] == 'directory'\r\n\t\t? $this->childsByAttr($path, $attr, $val) \r\n\t\t: false;\r\n}\r\n\r\n/**\r\n * Return first found children with required attr == $val\r\n *\r\n * @param  string   $path  file path\r\n * @param  string   $attr  attribute name\r\n * @param  bool     $val   attribute value\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function childsByAttr($path, $attr, $val) {\r\n\tforeach ($this->_scandir($path) as $p) {\r\n\t\tif (($_p = $this->closestByAttr($p, $attr, $val)) != false) {\r\n\t\t\treturn $_p;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/*****************  get content *******************/\r\n\r\n/**\r\n * Return required dir's files info.\r\n * If onlyMimes is set - return only dirs and files of required mimes\r\n *\r\n * @param  string  $path  dir path\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function getScandir($path) {\r\n\t$files = array();\r\n\r\n\t!isset($this->dirsCache[$path]) && $this->cacheDir($path);\r\n\r\n\tforeach ($this->dirsCache[$path] as $p) {\r\n\t\tif (($stat = $this->stat($p)) && empty($stat['hidden'])) {\r\n\t\t\t$files[] = $stat;\r\n\t\t}\r\n\t}\r\n\r\n\treturn $files;\r\n}\r\n\r\n\r\n/**\r\n * Return subdirs tree\r\n *\r\n * @param  string  $path  parent dir path\r\n * @param  int     $deep  tree deep\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function gettree($path, $deep, $exclude='') {\r\n\t$dirs = array();\r\n\r\n\t!isset($this->dirsCache[$path]) && $this->cacheDir($path);\r\n\r\n\tforeach ($this->dirsCache[$path] as $p) {\r\n\t\t$stat = $this->stat($p);\r\n\r\n\t\tif ($stat && empty($stat['hidden']) && $p != $exclude && $stat['mime'] == 'directory') {\r\n\t\t\t$dirs[] = $stat;\r\n\t\t\tif ($deep > 0 && !empty($stat['dirs'])) {\r\n\t\t\t\t$dirs = array_merge($dirs, $this->gettree($p, $deep-1));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn $dirs;\r\n}\t\r\n\r\n/**\r\n * Recursive files search\r\n *\r\n * @param  string  $path   dir path\r\n * @param  string  $q      search string\r\n * @param  array   $mimes\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function doSearch($path, $q, $mimes) {\r\n\t$result = array();\r\n\r\n\tforeach($this->_scandir($path) as $p) {\r\n\t\t$stat = $this->stat($p);\r\n\r\n\t\tif (!$stat) { // invalid links\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (!empty($stat['hidden']) || !$this->mimeAccepted($stat['mime'])) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t$name = $stat['name'];\r\n\r\n\t\tif ($this->stripos($name, $q) !== false) {\r\n\t\t\t$stat['path'] = $this->_path($p);\r\n\t\t\tif ($this->URL && !isset($stat['url'])) {\r\n\t\t\t\t$stat['url'] = $this->URL . str_replace($this->separator, '/', substr($p, strlen($this->root) + 1));\r\n\t\t\t}\r\n\r\n\t\t\t$result[] = $stat;\r\n\t\t}\r\n\t\tif ($stat['mime'] == 'directory' && $stat['read'] && !isset($stat['alias'])) {\r\n\t\t\t$result = array_merge($result, $this->doSearch($p, $q, $mimes));\r\n\t\t}\r\n\t}\r\n\r\n\treturn $result;\r\n}\r\n\r\n/**********************  manuipulations  ******************/\r\n\r\n/**\r\n * Copy file/recursive copy dir only in current volume.\r\n * Return new file path or false.\r\n *\r\n * @param  string  $src   source path\r\n * @param  string  $dst   destination dir path\r\n * @param  string  $name  new file name (optionaly)\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function copy($src, $dst, $name) {\r\n\t$srcStat = $this->stat($src);\r\n\t$this->clearcache();\r\n\r\n\tif (!empty($srcStat['thash'])) {\r\n\t\t$target = $this->decode($srcStat['thash']);\r\n\t\t$stat   = $this->stat($target);\r\n\t\t$this->clearcache();\r\n\t\treturn $stat && $this->_symlink($target, $dst, $name)\r\n\t\t\t? $this->_joinPath($dst, $name)\r\n\t\t\t: $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t} \r\n\r\n\tif ($srcStat['mime'] == 'directory') {\r\n\t\t$test = $this->stat($this->_joinPath($dst, $name));\r\n\r\n\t\tif (($test && $test['mime'] != 'directory') || !$this->_mkdir($dst, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n\t\t}\r\n\r\n\t\t$dst = $this->_joinPath($dst, $name);\r\n\r\n\t\tforeach ($this->getScandir($src) as $stat) {\r\n\t\t\tif (empty($stat['hidden'])) {\r\n\t\t\t\t$name = $stat['name'];\r\n\t\t\t\tif (!$this->copy($this->_joinPath($src, $name), $dst, $name)) {\r\n\t\t\t\t\t$this->remove($dst, true); // fall back\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t$this->clearcache();\r\n\t\treturn $dst;\r\n\t} \r\n\r\n\treturn $this->_copy($src, $dst, $name) \r\n\t\t? $this->_joinPath($dst, $name) \r\n\t\t: $this->setError(elFinder::ERROR_COPY, $this->_path($src));\r\n}\r\n\r\n/**\r\n * Move file\r\n * Return new file path or false.\r\n *\r\n * @param  string  $src   source path\r\n * @param  string  $dst   destination dir path\r\n * @param  string  $name  new file name \r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function move($src, $dst, $name) {\r\n\t$stat = $this->stat($src);\r\n\t$stat['realpath'] = $src;\r\n\t$this->rmTmb($stat); // can not do rmTmb() after _move()\r\n\t$this->clearcache();\r\n\r\n\tif ($this->_move($src, $dst, $name)) {\r\n\t\t$this->removed[] = $stat;\r\n\r\n\t\treturn $this->_joinPath($dst, $name);\r\n\t}\r\n\r\n\treturn $this->setError(elFinder::ERROR_MOVE, $this->_path($src));\r\n}\r\n\r\n/**\r\n * Copy file from another volume.\r\n * Return new file path or false.\r\n *\r\n * @param  Object  $volume       source volume\r\n * @param  string  $src          source file hash\r\n * @param  string  $destination  destination dir path\r\n * @param  string  $name         file name\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function copyFrom($volume, $src, $destination, $name) {\r\n\r\n\tif (($source = $volume->file($src)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_COPY, '#'.$src, $volume->error());\r\n\t}\r\n\r\n\t$errpath = $volume->path($src);\r\n\r\n\tif (!$this->nameAccepted($source['name'])) {\r\n\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_INVALID_NAME);\r\n\t}\r\n\r\n\tif (!$source['read']) {\r\n\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif ($source['mime'] == 'directory') {\r\n\t\t$stat = $this->stat($this->_joinPath($destination, $name));\r\n\t\t$this->clearcache();\r\n\t\tif ((!$stat || $stat['mime'] != 'directory') && !$this->_mkdir($destination, $name)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath);\r\n\t\t}\r\n\r\n\t\t$path = $this->_joinPath($destination, $name);\r\n\r\n\t\tforeach ($volume->scandir($src) as $entr) {\r\n\t\t\tif (!$this->copyFrom($volume, $entr['hash'], $path, $entr['name'])) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} else {\r\n\t\t// $mime = $source['mime'];\r\n\t\t// $w = $h = 0;\r\n\t\tif (($dim = $volume->dimensions($src))) {\r\n\t\t\t$s = explode('x', $dim);\r\n\t\t\t$source['width']  = $s[0];\r\n\t\t\t$source['height'] = $s[1];\r\n\t\t}\r\n\r\n\t\tif (($fp = $volume->open($src)) == false\r\n\t\t|| ($path = $this->_save($fp, $destination, $name, $source)) == false) {\r\n\t\t\t$fp && $volume->close($fp, $src);\r\n\t\t\treturn $this->setError(elFinder::ERROR_COPY, $errpath);\r\n\t\t}\r\n\t\t$volume->close($fp, $src);\r\n\t}\r\n\r\n\treturn $path;\r\n}\r\n\r\n/**\r\n * Remove file/ recursive remove dir\r\n *\r\n * @param  string  $path   file path\r\n * @param  bool    $force  try to remove even if file locked\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function remove($path, $force = false) {\r\n\t$stat = $this->stat($path);\r\n\t$stat['realpath'] = $path;\r\n\t$this->rmTmb($stat);\r\n\t$this->clearcache();\r\n\r\n\tif (empty($stat)) {\r\n\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path), elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n\r\n\tif (!$force && !empty($stat['locked'])) {\r\n\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($path));\r\n\t}\r\n\r\n\tif ($stat['mime'] == 'directory') {\r\n\t\tforeach ($this->_scandir($path) as $p) {\r\n\t\t\t$name = $this->_basename($p);\r\n\t\t\tif ($name != '.' && $name != '..' && !$this->remove($p)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!$this->_rmdir($path)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path));\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tif (!$this->_unlink($path)) {\r\n\t\t\treturn $this->setError(elFinder::ERROR_RM, $this->_path($path));\r\n\t\t}\r\n\t}\r\n\r\n\t$this->removed[] = $stat;\r\n\treturn true;\r\n}\r\n\r\n\r\n/************************* thumbnails **************************/\r\n\r\n/**\r\n * Return thumbnail file name for required file\r\n *\r\n * @param  array  $stat  file stat\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function tmbname($stat) {\r\n\treturn $stat['hash'].$stat['ts'].'.png';\r\n}\r\n\r\n/**\r\n * Return thumnbnail name if exists\r\n *\r\n * @param  string  $path file path\r\n * @param  array   $stat file stat\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function gettmb($path, $stat) {\r\n\tif ($this->tmbURL && $this->tmbPath) {\r\n\t\t// file itself thumnbnail\r\n\t\tif (strpos($path, $this->tmbPath) === 0) {\r\n\t\t\treturn basename($path);\r\n\t\t}\r\n\r\n\t\t$name = $this->tmbname($stat);\r\n\t\tif (file_exists($this->tmbPath.DIRECTORY_SEPARATOR.$name)) {\r\n\t\t\treturn $name;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Return true if thumnbnail for required file can be created\r\n *\r\n * @param  string  $path  thumnbnail path \r\n * @param  array   $stat  file stat\r\n * @return string|bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function canCreateTmb($path, $stat) {\r\n\treturn $this->tmbPathWritable \r\n\t\t&& strpos($path, $this->tmbPath) === false // do not create thumnbnail for thumnbnail\r\n\t\t&& $this->imgLib \r\n\t\t&& strpos($stat['mime'], 'image') === 0 \r\n\t\t&& ($this->imgLib == 'gd' ? $stat['mime'] == 'image/jpeg' || $stat['mime'] == 'image/png' || $stat['mime'] == 'image/gif' : true);\r\n}\r\n\r\n/**\r\n * Return true if required file can be resized.\r\n * By default - the same as canCreateTmb\r\n *\r\n * @param  string  $path  thumnbnail path \r\n * @param  array   $stat  file stat\r\n * @return string|bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function canResize($path, $stat) {\r\n\treturn $this->canCreateTmb($path, $stat);\r\n}\r\n\r\n/**\r\n * Create thumnbnail and return it's URL on success\r\n *\r\n * @param  string  $path  file path\r\n * @param  string  $mime  file mime type\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nprotected function createTmb($path, $stat) {\r\n\tif (!$stat || !$this->canCreateTmb($path, $stat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$name = $this->tmbname($stat);\r\n\t$tmb  = $this->tmbPath.DIRECTORY_SEPARATOR.$name;\r\n\r\n\t// copy image into tmbPath so some drivers does not store files on local fs\r\n\tif (($src = $this->_fopen($path, 'rb')) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (($trg = fopen($tmb, 'wb')) == false) {\r\n\t\t$this->_fclose($src, $path);\r\n\t\treturn false;\r\n\t}\r\n\r\n\twhile (!feof($src)) {\r\n\t\tfwrite($trg, fread($src, 8192));\r\n\t}\r\n\r\n\t$this->_fclose($src, $path);\r\n\tfclose($trg);\r\n\r\n\t$result = false;\r\n\r\n\t$tmbSize = $this->tmbSize;\r\n\r\n  \tif (($s = getimagesize($tmb)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t\t/* If image smaller or equal thumbnail size - just fitting to thumbnail square */\r\n\t\tif ($s[0] <= $tmbSize && $s[1]  <= $tmbSize) {\r\n \t   \t\t$result = $this->imgSquareFit($tmb, $tmbSize, $tmbSize, 'center', 'middle', $this->options['tmbBgColor'], 'png' );\r\n    \t} else {\r\n\r\n    \t\tif ($this->options['tmbCrop']) {\r\n    \r\n    \t\t\t/* Resize and crop if image bigger than thumbnail */\r\n        \t\tif (!(($s[0] > $tmbSize && $s[1] <= $tmbSize) || ($s[0] <= $tmbSize && $s[1] > $tmbSize) ) || ($s[0] > $tmbSize && $s[1] > $tmbSize)) {\r\n\t\t\t\t\t$result = $this->imgResize($tmb, $tmbSize, $tmbSize, true, false, 'png');\r\n        \t\t}\r\n\r\n\t\t\tif (($s = getimagesize($tmb)) != false) {\r\n\t\t\t\t$x = $s[0] > $tmbSize ? intval(($s[0] - $tmbSize)/2) : 0;\r\n\t\t\t\t$y = $s[1] > $tmbSize ? intval(($s[1] - $tmbSize)/2) : 0;\r\n\t\t\t\t$result = $this->imgCrop($tmb, $tmbSize, $tmbSize, $x, $y, 'png');\r\n\t\t\t}\r\n\r\n\t\t\t} else {\r\n    \t\t\t$result = $this->imgResize($tmb, $tmbSize, $tmbSize, true, true, 'png');\r\n  \t\t\t}\r\n\r\n\t\t$result = $this->imgSquareFit($tmb, $tmbSize, $tmbSize, 'center', 'middle', $this->options['tmbBgColor'], 'png' );\r\n\t}\r\n\r\n\tif (!$result) {\r\n\t\tunlink($tmb);\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn $name;\r\n}\r\n\r\n/**\r\n * Resize image\r\n *\r\n * @param  string   $path               image file\r\n * @param  int      $width              new width\r\n * @param  int      $height             new height\r\n * @param  bool\t    $keepProportions    crop image\r\n * @param  bool\t    $resizeByBiggerSide resize image based on bigger side if true\r\n * @param  string   $destformat         image destination format\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n * @author Alexey Sukhotin\r\n **/\r\n  protected function imgResize($path, $width, $height, $keepProportions = false, $resizeByBiggerSide = true, $destformat = null) {\r\n\tif (($s = @getimagesize($path)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$result = false;\r\n\t\r\n\tlist($size_w, $size_h) = array($width, $height);\r\n\r\n\tif ($keepProportions == true) {\r\n       \r\n  \t\tlist($orig_w, $orig_h, $new_w, $new_h) = array($s[0], $s[1], $width, $height);\r\n    \r\n  \t\t/* Calculating image scale width and height */\r\n  \t\t$xscale = $orig_w / $new_w;\r\n  \t\t$yscale = $orig_h / $new_h;\r\n\r\n  \t\t/* Resizing by biggest side */\r\n\r\n\t\tif ($resizeByBiggerSide) {\r\n\r\n\t        if ($orig_w > $orig_h) {\r\n\t\t\t\t$size_h = $orig_h * $width / $orig_w;\r\n\t\t\t\t$size_w = $width;\r\n    \t\t} else {\r\n      \t\t\t$size_w = $orig_w * $height / $orig_h;\r\n      \t\t\t$size_h = $height;\r\n\t\t\t}\r\n  \r\n\t\t} else {\r\n    \t\tif ($orig_w > $orig_h) {\r\n      \t\t\t$size_w = $orig_w * $height / $orig_h;\r\n      \t\t\t$size_h = $height;\r\n\t        } else {\r\n\t\t\t\t$size_h = $orig_h * $width / $orig_w;\r\n\t\t\t\t$size_w = $width;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tswitch ($this->imgLib) {\r\n\t\tcase 'imagick':\r\n\r\n\t\t\ttry {\r\n\t\t\t\t$img = new imagick($path);\r\n\t\t\t} catch (Exception $e) {\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t$img->resizeImage($size_w, $size_h, Imagick::FILTER_LANCZOS, true);\r\n\r\n\t\t\t$result = $img->writeImage($path);\r\n\r\n\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'gd':\r\n\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($size_w, $size_h))) {\r\n\r\n\t\t\t\tself::gdImageBackground($tmp,$this->options['tmbBgColor']);\r\n\r\n\t\t\t\tif (!imagecopyresampled($tmp, $img, 0, 0, 0, 0, $size_w, $size_h, $s[0], $s[1])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\timagedestroy($img);\r\n\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn false;\r\n  }\r\n\r\n/**\r\n * Crop image\r\n *\r\n * @param  string   $path               image file\r\n * @param  int      $width              crop width\r\n * @param  int      $height             crop height\r\n * @param  bool\t    $x                  crop left offset\r\n * @param  bool\t    $y                  crop top offset\r\n * @param  string   $destformat         image destination format\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n * @author Alexey Sukhotin\r\n **/\r\n  protected function imgCrop($path, $width, $height, $x, $y, $destformat = null) {\r\n\tif (($s = @getimagesize($path)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$result = false;\r\n\r\n\tswitch ($this->imgLib) {\r\n\t\tcase 'imagick':\r\n\r\n\t\t\ttry {\r\n\t\t\t\t$img = new imagick($path);\r\n\t\t\t} catch (Exception $e) {\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t$img->cropImage($width, $height, $x, $y);\r\n\r\n\t\t\t$result = $img->writeImage($path);\r\n\r\n\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'gd':\r\n\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($width, $height))) {\r\n\r\n\t\t\t\tself::gdImageBackground($tmp,$this->options['tmbBgColor']);\r\n\r\n\t\t\t\t$size_w = $width;\r\n\t\t\t\t$size_h = $height;\r\n\r\n\t\t\t\tif ($s[0] < $width || $s[1] < $height) {\r\n\t\t\t\t\t$size_w = $s[0];\r\n\t\t\t\t\t$size_h = $s[1];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!imagecopy($tmp, $img, 0, 0, $x, $y, $size_w, $size_h)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\timagedestroy($img);\r\n\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Put image to square\r\n *\r\n * @param  string   $path               image file\r\n * @param  int      $width              square width\r\n * @param  int      $height             square height\r\n * @param  int\t    $align              reserved\r\n * @param  int \t    $valign             reserved\r\n * @param  string   $bgcolor            square background color in #rrggbb format\r\n * @param  string   $destformat         image destination format\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n * @author Alexey Sukhotin\r\n **/\r\nprotected function imgSquareFit($path, $width, $height, $align = 'center', $valign = 'middle', $bgcolor = '#0000ff', $destformat = null) {\r\n\tif (($s = @getimagesize($path)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$result = false;\r\n\r\n\t/* Coordinates for image over square aligning */\r\n\t$y = ceil(abs($height - $s[1]) / 2); \r\n\t$x = ceil(abs($width - $s[0]) / 2);\r\n\r\n\tswitch ($this->imgLib) {\r\n\t\tcase 'imagick':\r\n\t\t\ttry {\r\n\t\t\t\t$img = new imagick($path);\r\n\t\t\t} catch (Exception $e) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t$img1 = new Imagick();\r\n\t\t\t$img1->newImage($width, $height, new ImagickPixel($bgcolor));\r\n\t\t\t$img1->setImageColorspace($img->getImageColorspace());\r\n\t\t\t$img1->setImageFormat($destformat != null ? $destformat : $img->getFormat());\r\n\t\t\t$img1->compositeImage( $img, imagick::COMPOSITE_OVER, $x, $y );\r\n\t\t\t$result = $img1->writeImage($path);\r\n\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'gd':\r\n\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\tif ($img &&  false != ($tmp = imagecreatetruecolor($width, $height))) {\r\n\r\n\t\t\t\tself::gdImageBackground($tmp,$bgcolor);\r\n\r\n\t\t\t\tif (!imagecopy($tmp, $img, $x, $y, 0, 0, $s[0], $s[1])) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\t\timagedestroy($img);\r\n\t\t\t\timagedestroy($tmp);\r\n\r\n\t\t\t\treturn $result ? $path : false;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Rotate image\r\n *\r\n * @param  string   $path               image file\r\n * @param  int      $degree             rotete degrees\r\n * @param  string   $bgcolor            square background color in #rrggbb format\r\n * @param  string   $destformat         image destination format\r\n * @return string|false\r\n * @author nao-pon\r\n * @author Troex Nevelin\r\n **/\r\nprotected function imgRotate($path, $degree, $bgcolor = '#ffffff', $destformat = null) {\r\n\tif (($s = @getimagesize($path)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t$result = false;\r\n\r\n\tswitch ($this->imgLib) {\r\n\t\tcase 'imagick':\r\n\t\t\ttry {\r\n\t\t\t\t$img = new imagick($path);\r\n\t\t\t} catch (Exception $e) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t$img->rotateImage(new ImagickPixel($bgcolor), $degree);\r\n\t\t\t$result = $img->writeImage($path);\r\n\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'gd':\r\n\t\t\t$img = self::gdImageCreate($path,$s['mime']);\r\n\r\n\t\t\t$degree = 360 - $degree;\r\n\t\t\tlist($r, $g, $b) = sscanf($bgcolor, \"#%02x%02x%02x\");\r\n\t\t\t$bgcolor = imagecolorallocate($img, $r, $g, $b);\r\n\t\t\t$tmp = imageRotate($img, $degree, (int)$bgcolor);\r\n\r\n\t\t\t$result = self::gdImage($tmp, $path, $destformat, $s['mime']);\r\n\r\n\t\t\timageDestroy($img);\r\n\t\t\timageDestroy($tmp);\r\n\r\n\t\t\treturn $result ? $path : false;\r\n\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Execute shell command\r\n *\r\n * @param  string  $command       command line\r\n * @param  array   $output        stdout strings\r\n * @param  array   $return_var    process exit code\r\n * @param  array   $error_output  stderr strings\r\n * @return int     exit code\r\n * @author Alexey Sukhotin\r\n **/\r\nprotected function procExec($command , array &$output = null, &$return_var = -1, array &$error_output = null) {\r\n\r\n\t$descriptorspec = array(\r\n\t\t0 : array(\"pipe\", \"r\"),  // stdin\r\n\t\t1 : array(\"pipe\", \"w\"),  // stdout\r\n\t\t2 : array(\"pipe\", \"w\")   // stderr\r\n\t);\r\n\r\n\t$process = proc_open($command, $descriptorspec, $pipes, null, null);\r\n\r\n\tif (is_resource($process)) {\r\n\r\n\t\tfclose($pipes[0]);\r\n\r\n\t\t$tmpout = '';\r\n\t\t$tmperr = '';\r\n\r\n\t\t$output = stream_get_contents($pipes[1]);\r\n\t\t$error_output = stream_get_contents($pipes[2]);\r\n\r\n\t\tfclose($pipes[1]);\r\n\t\tfclose($pipes[2]);\r\n\t\t$return_var = proc_close($process);\r\n\r\n\r\n\t}\r\n\r\n\treturn $return_var;\r\n\r\n}\r\n\r\n/**\r\n * Remove thumbnail, also remove recursively if stat is directory\r\n *\r\n * @param  string  $stat  file stat\r\n * @return void\r\n * @author Dmitry (dio) Levashov\r\n * @author Naoki Sawada\r\n * @author Troex Nevelin\r\n **/\r\nprotected function rmTmb($stat) {\r\n\tif ($stat['mime'] === 'directory') {\r\n\t\tforeach ($this->_scandir($this->decode($stat['hash'])) as $p) {\r\n\t\t\t$name = $this->_basename($p);\r\n\t\t\t$name != '.' && $name != '..' && $this->rmTmb($this->stat($p));\r\n\t\t}\r\n\t} else if (!empty($stat['tmb']) && $stat['tmb'] != \"1\") {\r\n\t\t$tmb = $this->tmbPath.DIRECTORY_SEPARATOR.$stat['tmb'];\r\n\t\tfile_exists($tmb) && @unlink($tmb);\r\n\t\tclearstatcache();\r\n\t}\r\n}\r\n\r\n/**\r\n * Create an gd image according to the specified mime type\r\n *\r\n * @param string $path image file\r\n * @param string $mime\r\n * @return gd image resource identifier\r\n */\r\nprotected function gdImageCreate($path,$mime){\r\n\tswitch($mime){\r\n\t\tcase 'image/jpeg':\r\n\t\treturn imagecreatefromjpeg($path);\r\n\r\n\t\tcase 'image/png':\r\n\t\treturn imagecreatefrompng($path);\r\n\r\n\t\tcase 'image/gif':\r\n\t\treturn imagecreatefromgif($path);\r\n\r\n\t\tcase 'image/xbm':\r\n\t\treturn imagecreatefromxbm($path);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Output gd image to file\r\n *\r\n * @param resource $image gd image resource\r\n * @param string $filename The path to save the file to.\r\n * @param string $destformat The Image type to use for $filename\r\n * @param string $mime The original image mime type\r\n */\r\nprotected function gdImage($image, $filename, $destformat, $mime ){\r\n\r\n\tif ($destformat == 'jpg' || ($destformat == null && $mime == 'image/jpeg')) {\r\n\t\treturn imagejpeg($image, $filename, 100);\r\n\t}\r\n\r\n\tif ($destformat == 'gif' || ($destformat == null && $mime == 'image/gif')) {\r\n\t\treturn imagegif($image, $filename, 7);\r\n\t}\r\n\r\n\treturn imagepng($image, $filename, 7);\r\n}\r\n\r\n/**\r\n * Assign the proper background to a gd image\r\n *\r\n * @param resource $image gd image resource\r\n * @param string $bgcolor background color in #rrggbb format\r\n */\r\nprotected function gdImageBackground($image, $bgcolor){\r\n\r\n\tif( $bgcolor == 'transparent' ){\r\n\t\timagesavealpha($image,true);\r\n\t\t$bgcolor1 = imagecolorallocatealpha($image, 255, 255, 255, 127);\r\n\r\n\t}else{\r\n\t\tlist($r, $g, $b) = sscanf($bgcolor, \"#%02x%02x%02x\");\r\n\t\t$bgcolor1 = imagecolorallocate($image, $r, $g, $b);\r\n\t}\r\n\r\n\timagefill($image, 0, 0, $bgcolor1);\r\n}\r\n\r\n/*********************** misc *************************/\r\n\r\n/**\r\n * Return smart formatted date\r\n *\r\n * @param  int     $ts  file timestamp\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\n// protected function formatDate($ts) {\r\n// \tif ($ts > $this->today) {\r\n// \t\treturn 'Today '.date($this->options['timeFormat'], $ts);\r\n// \t}\r\n// \t\r\n// \tif ($ts > $this->yesterday) {\r\n// \t\treturn 'Yesterday '.date($this->options['timeFormat'], $ts);\r\n// \t} \r\n// \t\r\n// \treturn date($this->options['dateFormat'], $ts);\r\n// }\r\n\r\n/**\r\n* Find position of first occurrence of string in a string with multibyte support\r\n*\r\n* @param  string  $haystack  The string being checked.\r\n* @param  string  $needle    The string to find in haystack.\r\n* @param  int     $offset    The search offset. If it is not specified, 0 is used.\r\n* @return int|bool\r\n* @author Alexey Sukhotin\r\n**/\r\nprotected function stripos($haystack , $needle , $offset = 0) {\r\n\tif (function_exists('mb_stripos')) {\r\n\t\treturn mb_stripos($haystack , $needle , $offset);\r\n\t} else if (function_exists('mb_strtolower') && function_exists('mb_strpos')) {\r\n\t\treturn mb_strpos(mb_strtolower($haystack), mb_strtolower($needle), $offset);\r\n\t} \r\n\treturn stripos($haystack , $needle , $offset);\r\n}\r\n\r\n/**==================================* abstract methods *====================================**/\r\n\r\n/*********************** paths/urls *************************/\r\n\r\n/**\r\n * Return parent directory path\r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _dirname($path);\r\n\r\n/**\r\n * Return file name\r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _basename($path);\r\n\r\n/**\r\n * Join dir name and file name and return full path.\r\n * Some drivers (db) use int as path - so we give to concat path to driver itself\r\n *\r\n * @param  string  $dir   dir path\r\n * @param  string  $name  file name\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _joinPath($dir, $name);\r\n\r\n/**\r\n * Return normalized path \r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _normpath($path);\r\n\r\n/**\r\n * Return file path related to root dir\r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _relpath($path);\r\n\r\n/**\r\n * Convert path related to root dir into real path\r\n *\r\n * @param  string  $path  rel file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _abspath($path);\r\n\r\n/**\r\n * Return fake path started from root dir.\r\n * Required to show path on client side.\r\n *\r\n * @param  string  $path  file path\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _path($path);\r\n\r\n/**\r\n * Return true if $path is children of $parent\r\n *\r\n * @param  string  $path    path to check\r\n * @param  string  $parent  parent path\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _inpath($path, $parent);\r\n\r\n/**\r\n * Return stat for given path.\r\n * Stat contains following fields:\r\n * - (int)    size    file size in b. required\r\n * - (int)    ts      file modification time in unix time. required\r\n * - (string) mime    mimetype. required for folders, others - optionally\r\n * - (bool)   read    read permissions. required\r\n * - (bool)   write   write permissions. required\r\n * - (bool)   locked  is object locked. optionally\r\n * - (bool)   hidden  is object hidden. optionally\r\n * - (string) alias   for symlinks - link target path relative to root path. optionally\r\n * - (string) target  for symlinks - link target path. optionally\r\n *\r\n * If file does not exists - returns empty array or false.\r\n *\r\n * @param  string  $path    file path \r\n * @return array|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _stat($path);\r\n\r\n\r\n/***************** file stat ********************/\r\n\r\n\r\n/**\r\n * Return true if path is dir and has at least one childs directory\r\n *\r\n * @param  string  $path  dir path\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _subdirs($path);\r\n\r\n/**\r\n * Return object width and height\r\n * Ususaly used for images, but can be realize for video etc...\r\n *\r\n * @param  string  $path  file path\r\n * @param  string  $mime  file mime type\r\n * @return string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _dimensions($path, $mime);\r\n\r\n/******************** file/dir content *********************/\r\n\r\n/**\r\n * Return files list in directory\r\n *\r\n * @param  string  $path  dir path\r\n * @return array\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _scandir($path);\r\n\r\n/**\r\n * Open file and return file pointer\r\n *\r\n * @param  string  $path  file path\r\n * @param  bool    $write open file for writing\r\n * @return resource|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _fopen($path, $mode=\"rb\");\r\n\r\n/**\r\n * Close opened file\r\n * \r\n * @param  resource  $fp    file pointer\r\n * @param  string    $path  file path\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _fclose($fp, $path='');\r\n\r\n/********************  file/dir manipulations *************************/\r\n\r\n/**\r\n * Create dir and return created dir path or false on failed\r\n *\r\n * @param  string  $path  parent dir path\r\n * @param string  $name  new directory name\r\n * @return string|bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _mkdir($path, $name);\r\n\r\n/**\r\n * Create file and return it's path or false on failed\r\n *\r\n * @param  string  $path  parent dir path\r\n * @param string  $name  new file name\r\n * @return string|bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _mkfile($path, $name);\r\n\r\n/**\r\n * Create symlink\r\n *\r\n * @param  string  $source     file to link to\r\n * @param  string  $targetDir  folder to create link in\r\n * @param  string  $name       symlink name\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _symlink($source, $targetDir, $name);\r\n\r\n/**\r\n * Copy file into another file (only inside one volume)\r\n *\r\n * @param  string  $source  source file path\r\n * @param  string  $target  target dir path\r\n * @param  string  $name    file name\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _copy($source, $targetDir, $name);\r\n\r\n/**\r\n * Move file into another parent dir.\r\n * Return new file path or false.\r\n *\r\n * @param  string  $source  source file path\r\n * @param  string  $target  target dir path\r\n * @param  string  $name    file name\r\n * @return string|bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _move($source, $targetDir, $name);\r\n\r\n/**\r\n * Remove file\r\n *\r\n * @param  string  $path  file path\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _unlink($path);\r\n\r\n/**\r\n * Remove dir\r\n *\r\n * @param  string  $path  dir path\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _rmdir($path);\r\n\r\n/**\r\n * Create new file and write into it from file pointer.\r\n * Return new file path or false on error.\r\n *\r\n * @param  resource  $fp   file pointer\r\n * @param  string    $dir  target dir path\r\n * @param  string    $name file name\r\n * @param  array     $stat file stat (required by some virtual fs)\r\n * @return bool|string\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _save($fp, $dir, $name, $stat);\r\n\r\n/**\r\n * Get file contents\r\n *\r\n * @param  string  $path  file path\r\n * @return string|false\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _getContents($path);\r\n\r\n/**\r\n * Write a string to a file\r\n *\r\n * @param  string  $path     file path\r\n * @param  string  $content  new file content\r\n * @return bool\r\n * @author Dmitry (dio) Levashov\r\n **/\r\nabstract protected function _filePutContents($path, $content);\r\n\r\n/**\r\n * Extract files from archive\r\n *\r\n * @param  string  $path file path\r\n * @param  array   $arc  archiver options\r\n * @return bool\r\n * @author Dmitry (dio) Levashov, \r\n * @author Alexey Sukhotin\r\n **/\r\nabstract protected function _extract($path, $arc);\r\n\r\n/**\r\n * Create archive and return its path\r\n *\r\n * @param  string  $dir    target dir\r\n * @param  array   $files  files names list\r\n * @param  string  $name   archive name\r\n * @param  array   $arc    archiver options\r\n * @return string|bool\r\n * @author Dmitry (dio) Levashov, \r\n * @author Alexey Sukhotin\r\n **/\r\nabstract protected function _archive($dir, $files, $name, $arc);\r\n\r\n/**\r\n * Detect available archivers\r\n *\r\n * @return void\r\n * @author Dmitry (dio) Levashov, \r\n * @author Alexey Sukhotin\r\n **/\r\nabstract protected function _checkArchivers();\r\n\r\nmodule.exports = ElFinderVolumeDriver;"]],"start1":12185,"start2":12185,"length1":83067,"length2":80464}]],"length":92649,"saved":false}
{"ts":1364836172972,"patch":[[{"diffs":[[0,"shov\r\n **/\r\n"],[-1,"protected"],[1,"ElFinderVolumeDriver.prototype.configure ="],[0," function co"]],"start1":12785,"start2":12785,"length1":33,"length2":66},{"diffs":[[0,"unction "],[-1,"configure"],[0,"() {\r\n\t/"]],"start1":12841,"start2":12841,"length1":25,"length2":16}]],"length":92673,"saved":false}
{"ts":1364836188615,"patch":[[{"diffs":[[0,"ccessful"],[-1,"l"],[0," mount.\r"]],"start1":12651,"start2":12651,"length1":17,"length2":16},{"diffs":[[0,"h\r\n\t"],[-1,"$"],[1,"var "],[0,"path = "],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"tmbPath"],[-1,"'];"],[0,"\r\n\ti"]],"start1":12876,"start2":12876,"length1":42,"length2":34}]],"length":92664,"saved":false}
{"ts":1364836307799,"patch":[[{"diffs":[[0," path = "],[1,"this."],[0,"options."]],"start1":12883,"start2":12883,"length1":16,"length2":21},{"diffs":[[0,"bPath\r\n\tif ("],[-1,"$"],[0,"path) {\r\n\t\ti"]],"start1":12906,"start2":12906,"length1":25,"length2":24},{"diffs":[[0,"\n\t\tif (!"],[1,"this."],[0,"file_exi"]],"start1":12926,"start2":12926,"length1":16,"length2":21},{"diffs":[[0,"_exists("],[-1,"$"],[0,"path)) {"]],"start1":12943,"start2":12943,"length1":17,"length2":16},{"diffs":[[0,"if ("],[-1,"@"],[1,"this."],[0,"mkdir("],[-1,"$"],[0,"path"]],"start1":12964,"start2":12964,"length1":16,"length2":19},{"diffs":[[0,"\t\t\t\t"],[1,"this."],[0,"chmod("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"options"],[-1,"['"],[1,"."],[0,"tmbP"]],"start1":12989,"start2":12989,"length1":37,"length2":38},{"diffs":[[0,"PathMode"],[-1,"']"],[0,");\r\n\t\t\t}"]],"start1":13026,"start2":13026,"length1":18,"length2":16},{"diffs":[[0,"\t\t\t\t"],[-1,"$"],[0,"path = "],[-1,"''"],[1,"\"\""],[0,";\r\n\t"]],"start1":13051,"start2":13051,"length1":18,"length2":17},{"diffs":[[0,"if ("],[1,"this."],[0,"is_dir("],[-1,"$"],[0,"path"]],"start1":13083,"start2":13083,"length1":16,"length2":20},{"diffs":[[0,"ath) && "],[1,"this."],[0,"is_reada"]],"start1":13100,"start2":13100,"length1":16,"length2":21},{"diffs":[[0,"is_readable("],[-1,"$"],[0,"path)) {\r\n\t\t"]],"start1":13113,"start2":13113,"length1":25,"length2":24},{"diffs":[[0,"ath)) {\r\n\t\t\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"tmbPath = $p"]],"start1":13126,"start2":13126,"length1":31,"length2":29},{"diffs":[[0,"bPath = "],[-1,"$"],[0,"path;\r\n\t"]],"start1":13145,"start2":13145,"length1":17,"length2":16},{"diffs":[[0,"ath;\r\n\t\t"],[-1,"\t$"],[1,"    "],[0,"this"],[-1,"->"],[1,"."],[0,"tmbPathW"]],"start1":13154,"start2":13154,"length1":24,"length2":25},{"diffs":[[0,"table = "],[1,"this."],[0,"is_writa"]],"start1":13181,"start2":13181,"length1":16,"length2":21},{"diffs":[[0,"ritable("],[-1,"$"],[0,"path);\r\n"]],"start1":13198,"start2":13198,"length1":17,"length2":16}]],"length":92683,"saved":false}
{"ts":1364836362561,"patch":[[{"diffs":[[0,"brary\r\n\t"],[-1,"$"],[1,"var "],[0,"type = "],[-1,"preg_"],[1,"this.options.imgLib."],[0,"match('/"]],"start1":13254,"start2":13254,"length1":29,"length2":47},{"diffs":[[0,"$/i'"],[-1,", $this->options['imgLib']"],[0,")\r\n\t"]],"start1":13319,"start2":13319,"length1":34,"length2":8}]],"length":92675,"saved":false}
{"ts":1364836383254,"patch":[[{"diffs":[[0,"\t\t? "],[-1,"strtolower($"],[0,"this"],[-1,"->"],[1,"."],[0,"options"],[-1,"['"],[1,"."],[0,"imgLib"],[-1,"']"],[1,".lowerCase("],[0,")\r\n\t"]],"start1":13326,"start2":13326,"length1":43,"length2":38}]],"length":92670,"saved":false}
{"ts":1364836398826,"patch":[[{"diffs":[[0,".imgLib."],[-1,"l"],[1,"toL"],[0,"owerCase"]],"start1":13342,"start2":13342,"length1":17,"length2":19}]],"length":92672,"saved":false}
{"ts":1364836484674,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\tif (($type == 'imagick' || $type == 'auto') && extension_loaded('imagick')) {\r\n\t\t$this->imgLib = 'imagick';\r\n\t} else {\r\n\t\t$this->imgLib = function_exists('gd_info') ? 'gd' : '';\r\n\t}\r\n\r\n}"],[1,"    this.imgLib = type;\r\n};"],[0,"\r\n\r\n"]],"start1":13376,"start2":13376,"length1":195,"length2":35}]],"length":92512,"saved":false}
{"ts":1364836532281,"patch":[[{"diffs":[[0,"driverId"],[-1,"()"],[0," = funct"]],"start1":13784,"start2":13784,"length1":18,"length2":16},{"diffs":[[0,"\treturn "],[-1,"this."],[0,"driverId"]],"start1":13809,"start2":13809,"length1":21,"length2":16},{"diffs":[[0,"driverId;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":13817,"start2":13817,"length1":24,"length2":25}]],"length":92532,"saved":false}
{"ts":1364836551304,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.id ="],[0," function id() {"]],"start1":13907,"start2":13907,"length1":38,"length2":67},{"diffs":[[0,"function"],[-1," id"],[0,"() {\r\n\tr"]],"start1":13959,"start2":13959,"length1":19,"length2":16},{"diffs":[[0,"\treturn "],[-1,"$this->"],[0,"id;\r\n}\r\n"]],"start1":13973,"start2":13973,"length1":23,"length2":16}]],"length":92551,"saved":false}
{"ts":1364836554475,"patch":[[{"diffs":[[0,"eturn id;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":13975,"start2":13975,"length1":24,"length2":25}]],"length":92552,"saved":false}
{"ts":1364836628462,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.debug ="],[0," function debug("]],"start1":14076,"start2":14076,"length1":38,"length2":70},{"diffs":[[0,"function"],[-1," debug"],[0,"() {\r\n\tr"]],"start1":14131,"start2":14131,"length1":22,"length2":16},{"diffs":[[0," {\r\n\treturn "],[-1,"array("],[1,"{"],[0,"\r\n\t\t'id'    "]],"start1":14141,"start2":14141,"length1":30,"length2":25},{"diffs":[[0,"      : "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"id(),\r\n\t"]],"start1":14165,"start2":14165,"length1":23,"length2":21},{"diffs":[[0,"  : "],[-1,"strtolower(substr(get_class($this), strlen('elfinder"],[0,"driver"],[-1,"')))"],[1,"Name"],[0,",\r\n\t"]],"start1":14198,"start2":14198,"length1":70,"length2":18},{"diffs":[[0,"tect' : "],[-1,"$this->"],[0,"mimeDete"]],"start1":14224,"start2":14224,"length1":23,"length2":16},{"diffs":[[0,"'     : "],[-1,"$this->"],[0,"imgLib\r\n"]],"start1":14254,"start2":14254,"length1":23,"length2":16},{"diffs":[[0,"mgLib\r\n\t"],[-1,")"],[1,"}"],[0,";\r\n}\r\n\r\n"]],"start1":14263,"start2":14263,"length1":17,"length2":17}]],"length":92505,"saved":false}
{"ts":1364836740329,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"this."],[1,"var "],[0,"mounted "]],"start1":202,"start2":202,"length1":21,"length2":20},{"diffs":[[0,"\n\t **/\r\n    "],[-1,"this."],[1,"var "],[0,"root = '';\r\n"]],"start1":293,"start2":293,"length1":29,"length2":28},{"diffs":[[0,"*/\r\n    "],[-1,"this."],[1,"var "],[0,"rootName"]],"start1":388,"start2":388,"length1":21,"length2":20},{"diffs":[[0,"  \r\n    "],[-1,"this."],[1,"var "],[0,"startPat"]],"start1":487,"start2":487,"length1":21,"length2":20},{"diffs":[[0,"  \r\n    "],[-1,"this."],[1,"var "],[0,"URL = ''"]],"start1":574,"start2":574,"length1":21,"length2":20},{"diffs":[[0,"*/    \r\n    "],[-1,"this."],[1,"var "],[0,"tmbPath = ''"]],"start1":662,"start2":662,"length1":29,"length2":28},{"diffs":[[0,"*/    \r\n    "],[-1,"this."],[1,"var "],[0,"tmbPathWrita"]],"start1":763,"start2":763,"length1":29,"length2":28},{"diffs":[[0,"/\r\n     "],[-1,"this."],[1,"var "],[0,"tmbURL ="]],"start1":871,"start2":871,"length1":21,"length2":20},{"diffs":[[0," \r\n     "],[-1,"this."],[1,"var "],[0,"tmbSize "]],"start1":968,"start2":968,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"imgLib ="]],"start1":1094,"start2":1094,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"cryptLib"]],"start1":1191,"start2":1191,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"archiver"]],"start1":1273,"start2":1273,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"treeDeep"]],"start1":1414,"start2":1414,"length1":21,"length2":20},{"diffs":[[0,"/\r\n\t"],[-1,"this."],[1,"var "],[0,"error = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r"]],"start1":1510,"start2":1510,"length1":28,"length2":22},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"today = "]],"start1":1585,"start2":1585,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"yesterda"]],"start1":1667,"start2":1667,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"options "]],"start1":1750,"start2":1750,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"defaults"]],"start1":5515,"start2":5515,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"attribut"]],"start1":5691,"start2":5691,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"access ="]],"start1":5785,"start2":5785,"length1":21,"length2":20},{"diffs":[[0,"ay\r\n\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"uploadAllow "]],"start1":5872,"start2":5872,"length1":29,"length2":28},{"diffs":[[0,"ay\r\n\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"uploadDeny ="]],"start1":5965,"start2":5965,"length1":29,"length2":28},{"diffs":[[0,"ay\r\n\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"uploadOrder "]],"start1":6074,"start2":6074,"length1":29,"length2":28},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"uploadMa"]],"start1":6243,"start2":6243,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"mimeDete"]],"start1":6333,"start2":6333,"length1":21,"length2":20},{"diffs":[[0,"/\r\n\tvar "],[-1,"$"],[0,"mimetype"]],"start1":6452,"start2":6452,"length1":17,"length2":16},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"finfo = "]],"start1":6560,"start2":6560,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"diabled "]],"start1":6656,"start2":6656,"length1":21,"length2":20},{"diffs":[[0,"/\r\n\t"],[-1,"this.$"],[1,"var "],[0,"mime"]],"start1":6783,"start2":6783,"length1":14,"length2":12},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"separato"]],"start1":11746,"start2":11746,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"onlyMime"]],"start1":11855,"start2":11855,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"removed "]],"start1":11961,"start2":11961,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"cache = "]],"start1":12036,"start2":12036,"length1":21,"length2":20},{"diffs":[[0,"\t **/\r\n\t"],[-1,"this."],[1,"var "],[0,"dirsCach"]],"start1":12112,"start2":12112,"length1":21,"length2":20}]],"length":92465,"saved":false}
{"ts":1364836747888,"patch":[[{"diffs":[[0,"d(path, "],[-1,"this."],[0,"options."]],"start1":12962,"start2":12962,"length1":21,"length2":16}]],"length":92460,"saved":false}
{"ts":1364836758030,"patch":[[{"diffs":[[0," type = "],[-1,"this."],[0,"options."]],"start1":13220,"start2":13220,"length1":21,"length2":16},{"diffs":[[0,"')\r\n\t\t? "],[-1,"this."],[0,"options."]],"start1":13272,"start2":13272,"length1":21,"length2":16}]],"length":92450,"saved":false}
{"ts":1364836761304,"patch":[[{"diffs":[[0,"\r\n\r\n    "],[-1,"this."],[0,"imgLib ="]],"start1":13321,"start2":13321,"length1":21,"length2":16}]],"length":92445,"saved":false}
{"ts":1364836773740,"patch":[[{"diffs":[[0,"  : "],[-1,"this.id(),"],[1,"id"],[0,"\r\n\t\t"]],"start1":14109,"start2":14109,"length1":18,"length2":10}]],"length":92437,"saved":false}
{"ts":1364836776750,"patch":[[{"diffs":[[0,"    : id"],[1,","],[0,"\r\n\t\t'nam"]],"start1":14107,"start2":14107,"length1":16,"length2":17}]],"length":92438,"saved":false}
{"ts":1364836904135,"patch":[[{"diffs":[[0,"gLib\r\n\t};\r\n}\r\n\r\n"],[1,"\r\n"],[0,"/**\r\n * \"Mount\" "]],"start1":14197,"start2":14197,"length1":32,"length2":34},{"diffs":[[0,"*/\r\n"],[-1,"public function mount(array $opts) {"],[1,"ElFinderVolumeDriver.prototype.mount(opts) {\r\n    var mountDeferred = Q.defer();\r\n    if (_.isUndefined(opts.path) || opts.path === '') {\r\n        Q.reject(this.setError('Path undefined'));\r\n    }"],[0,"\r\n\ti"]],"start1":14403,"start2":14403,"length1":44,"length2":204},{"diffs":[[0,"*/\r\n"],[-1,"protected function setError($"],[1,"ElFinderVolumeDriver.prototype.setError = function("],[0,"erro"]],"start1":48250,"start2":48250,"length1":37,"length2":59},{"diffs":[[0,"\n\r\n\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"error"],[1,"s"],[0," = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r"]],"start1":48314,"start2":48314,"length1":30,"length2":24}]],"length":92616,"saved":false}
{"ts":1364836987837,"patch":[[{"diffs":[[0,"ror) {\r\n"],[-1,"\r\n"],[0,"\tthis.er"]],"start1":48307,"start2":48307,"length1":18,"length2":16},{"diffs":[[0,"];\r\n"],[-1,"\r\n\tforeach (func_get_args() as $err) {\r\n\t\tif (is_a"],[1,"    \r\n    if (!_.isA"],[0,"rray("],[-1,"$"],[0,"err"],[1,"or"],[0,")) {\r\n"],[-1,"\t\t\t$"],[1,"        "],[0,"this"],[-1,"->"],[1,"."],[0,"error"],[-1," = array_merge($this->error, $err);\r\n\t\t} else {\r\n\t\t\t$this->error[] = $err;\r\n\t\t}\r\n\t}\r\n\r\n\t// $"],[1,"s.push(error);\r\n    } else {\r\n        _.flatten("],[0,"this"],[-1,"->"],[1,"."],[0,"error"],[-1," = is_array($error) ? $error : func_get_args();\r\n\treturn false"],[1,"s.join(error));\r\n    }\r\n    return this.errors"],[0,";\r\n}"]],"start1":48331,"start2":48331,"length1":253,"length2":166}]],"length":92527,"saved":false}
{"ts":1364836992108,"patch":[[{"diffs":[[0," = [];\r\n"],[-1,"    \r\n"],[0,"    if ("]],"start1":48327,"start2":48327,"length1":22,"length2":16}]],"length":92521,"saved":false}
{"ts":1364837260407,"patch":[[{"diffs":[[0," }\r\n"],[-1,"\tif (!isset($opts['path']) || $opts['path'] === '') {\r\n\t\treturn $this->setError('Path undefined.');;\r\n\t}\r\n\r\n\t$this->options = array_merge($this->options, $opts);\r\n\t"],[1,"\r\n    options = _.extend(options, opts);\r\n    id = driverId + (!_.isUndefined(options.id)) ? options.id, \r\n    \r\n    "],[0,"$thi"]],"start1":14601,"start2":14601,"length1":172,"length2":125}]],"length":92474,"saved":false}
{"ts":1364837293817,"patch":[[{"diffs":[[0,"tions.id"],[-1,","],[0," "],[1,": this.context.volumesCount,"],[0,"\r\n    \r\n"]],"start1":14700,"start2":14700,"length1":18,"length2":45}]],"length":92501,"saved":false}
{"ts":1364837540735,"patch":[[{"diffs":[[0,"gLib\r\n\t};\r\n}\r\n\r\n"],[1,"function escapeRegExp(str) {\r\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n}\r\n"],[0,"\r\n/**\r\n * \"Mount"]],"start1":14197,"start2":14197,"length1":32,"length2":135},{"diffs":[[0,"ount"],[-1,",\r\n    \r\n    $this->id = $this->driverId.(!empty($this->options['id']) ? $this->options['id'] : elFinder::$volumesCnt++).'_';\r\n\t$this->"],[1,";\r\n    "],[0,"root = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_norm"],[-1,"p"],[1,"P"],[0,"ath("],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"path"],[-1,"']"],[0,");\r\n"],[-1,"\t$this->"],[1,"    "],[0,"sepa"]],"start1":14835,"start2":14835,"length1":201,"length2":57},{"diffs":[[0,"rator = "],[-1,"isset($this->options['"],[1,"!_.isUndefined("],[0,"separato"]],"start1":14892,"start2":14892,"length1":38,"length2":31},{"diffs":[[0,"eparator"],[-1,"']"],[0,") ? "],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"separato"]],"start1":14916,"start2":14916,"length1":38,"length2":28},{"diffs":[[0,"eparator"],[-1,"']"],[0," : DIREC"]],"start1":14937,"start2":14937,"length1":18,"length2":16},{"diffs":[[0,"\r\n\r\n"],[-1,"\t// default file attribute\r\n\t$this->defaults = array(\r\n\t\t'read'    : isset($this->"],[1,"    defaults = {\r\n        'read': ("],[0,"options"],[-1,"['"],[1,"."],[0,"defaults"],[-1,"']['read'])  ? !!$this->"],[1,".read ? !!"],[0,"options"],[-1,"['"],[1,"."],[0,"defaults"],[-1,"']['"],[1,"."],[0,"read"],[-1,"'] "],[0," : true"],[1,")"],[0,",\r\n"],[-1,"\t\t'write'   : isset($this->"],[1,"        'write': ("],[0,"options"],[-1,"['"],[1,"."],[0,"defaults"],[-1,"']['"],[1,"."],[0,"write"],[-1,"'])"],[0," ? !!"],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"defaults"],[-1,"']['"],[1,"."],[0,"write"],[-1,"']"],[0," : true"],[1,")"],[0,",\r\n"],[-1,"\t\t"],[1,"        "],[0,"'locked'"],[-1,"  "],[0,": fa"]],"start1":14968,"start2":14968,"length1":287,"length2":195},{"diffs":[[0,"d': false,\r\n"],[-1,"\t\t"],[1,"        "],[0,"'hidden'"],[-1,"  "],[0,": false\r\n\t);"]],"start1":15157,"start2":15157,"length1":36,"length2":40},{"diffs":[[0," false\r\n"],[-1,"\t);\r\n"],[1,"    }\r\n\r\n    attributes.push({\r\n        'pattern': '~^'.\r\n    })"],[0,"\r\n\t// ro"]],"start1":15186,"start2":15186,"length1":21,"length2":80}]],"length":92412,"saved":false}
{"ts":1364837611347,"patch":[[{"diffs":[[0,"'~^'"],[-1,".\r\n    })\r\n\t// root attributes\r\n\t$this->attributes[] = array(\r\n\t\t'pattern' : '~^'.preg_quote"],[1," + escapeRegExp"],[0,"(DIR"]],"start1":15245,"start2":15245,"length1":100,"length2":23},{"diffs":[[0,"TOR)"],[-1,"."],[1," + "],[0,"'$~',\r\n"],[-1,"\t\t"],[1,"        "],[0,"'locked'"],[-1,"  "],[0,": tr"]],"start1":15281,"start2":15281,"length1":28,"length2":34},{"diffs":[[0,"e,\r\n"],[-1,"\t\t"],[1,"        "],[0,"'hidden'"],[-1,"  "],[0,": fa"]],"start1":15316,"start2":15316,"length1":20,"length2":24},{"diffs":[[0," false\r\n"],[-1,"\t"],[1,"    }"],[0,");\r\n"],[1,"\r\n"],[0,"\t// set "]],"start1":15337,"start2":15337,"length1":21,"length2":27},{"diffs":[[0,"\r\n\tif (!"],[-1,"empty($this->"],[1,"_.isUndefined("],[0,"options"],[-1,"['"],[1,"."],[0,"attribut"]],"start1":15380,"start2":15380,"length1":38,"length2":38},{"diffs":[[0,"utes"],[-1,"']"],[0,") && "],[-1,"is_array($this->"],[1,"_.isArray("],[0,"options"],[-1,"['"],[1,"."],[0,"attr"]],"start1":15416,"start2":15416,"length1":40,"length2":31},{"diffs":[[0,"tributes"],[-1,"']"],[0,")) {\r\n"],[1,"        "],[0,"\r\n\t\tfore"]],"start1":15445,"start2":15445,"length1":24,"length2":30}]],"length":92348,"saved":false}
{"ts":1364837723663,"patch":[[{"diffs":[[0,"\n    });\r\n\r\n"],[-1,"\t"],[1,"    Q.fcall(function() {\r\n        "],[0,"// set files"]],"start1":15344,"start2":15344,"length1":25,"length2":58},{"diffs":[[0,"ibutes\r\n"],[1,"    "],[0,"\tif (!_."]],"start1":15407,"start2":15407,"length1":16,"length2":20},{"diffs":[[0,"    "],[-1,"\r\n\t\tforeach ($this->"],[1,"    "],[0,"options"],[-1,"['"],[1,"."],[0,"attr"]],"start1":15500,"start2":15500,"length1":37,"length2":20},{"diffs":[[0,"utes"],[-1,"'] as $a) {\r\n\t\t\t// attributes must contain pattern and at least one rule\r\n\t\t\tif (!empty($a['pattern']) || count($a) > 1) {\r\n\t\t\t\t$this->attributes[] = $a;\r\n\t\t\t}\r\n\t\t}\r\n\t}"],[1,".forEach(function(a) {\r\n                if (!_.isUndefined(a.pattern) && a.length > 1) {\r\n                    attributes.push(a);\r\n                }\r\n            });\r\n    \t}   \r\n    });"],[0,"\r\n\r\n"]],"start1":15522,"start2":15522,"length1":176,"length2":193}]],"length":92385,"saved":false}
{"ts":1364837745398,"patch":[[{"diffs":[[0,"es\r\n    "],[-1,"\t"],[1,"    "],[0,"if (!_.i"]],"start1":15411,"start2":15411,"length1":17,"length2":20}]],"length":92388,"saved":false}
{"ts":1364837785719,"patch":[[{"diffs":[[0,"\r\n    \t}"],[-1,"   "],[0,"\r\n    })"]],"start1":15694,"start2":15694,"length1":19,"length2":16}]],"length":92385,"saved":false}
{"ts":1364837834024,"patch":[[{"diffs":[[0,"            "],[1,"_.each("],[0,"options.attr"]],"start1":15499,"start2":15499,"length1":24,"length2":31},{"diffs":[[0,"utes"],[-1,".forEach"],[1,", "],[0,"(fun"]],"start1":15532,"start2":15532,"length1":16,"length2":10},{"diffs":[[0,"nction(a"],[1,"ttr, index, list"],[0,") {\r\n   "]],"start1":15541,"start2":15541,"length1":16,"length2":32},{"diffs":[[0,"efined(a"],[1,"ttr"],[0,".pattern"]],"start1":15598,"start2":15598,"length1":16,"length2":19},{"diffs":[[0,"rn) && a"],[1,"ttr"],[0,".length "]],"start1":15615,"start2":15615,"length1":16,"length2":19},{"diffs":[[0,"s.push(a);\r\n"],[-1,""],[0,"            "]],"start1":15671,"start2":15671,"length1":24,"length2":24},{"diffs":[[0,"         }\r\n"],[1,"                if ()\r\n"],[0,"            "]],"start1":15690,"start2":15690,"length1":24,"length2":47}]],"length":92431,"saved":false}
{"ts":1364838483321,"patch":[[{"diffs":[[0,"    if ("],[-1,")"],[1,"index > _.size(list) - 1) {\r\n                    return Q.resolve();   \r\n                }"],[0,"\r\n      "]],"start1":15714,"start2":15714,"length1":17,"length2":106}]],"length":92520,"saved":false}
{"ts":1364838503636,"patch":[[{"diffs":[[0,"ibutes, "],[-1,"("],[0,"function"]],"start1":15530,"start2":15530,"length1":17,"length2":16}]],"length":92519,"saved":false}
{"ts":1364838548135,"patch":[[{"diffs":[[0,"\r\n    })"],[-1,";\r\n"],[1,".then(function() {\r\n        if (!_.isUndefined(options.accessControl) && _.isFunction(options.accessControl)) {\r\n            access = options.accessControl;\r\n        }\r\n    })"],[0,"\r\n\tif (!"]],"start1":15836,"start2":15836,"length1":19,"length2":191}]],"length":92691,"saved":false}
{"ts":1364838593153,"patch":[[{"diffs":[[0,"        "],[-1,"Q"],[1,"mountDeferred"],[0,".reject("]],"start1":14649,"start2":14649,"length1":17,"length2":29},{"diffs":[[0,"})\r\n"],[-1,"\tif (!empty($this->options['accessControl']) && is_callable($this->options['accessControl'])) {\r\n\t\t$this->access = $this->options['accessControl'];\r\n\t}"],[0,"\r\n\r\n"]],"start1":16029,"start2":16029,"length1":159,"length2":8}]],"length":92552,"saved":false}
{"ts":1364838614425,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        today = mktime(0, 0, 0, date('m'), date('d'), date('Y'));\r\n"],[0,"    })\r\n\r\n\r\n"]],"start1":16013,"start2":16013,"length1":24,"length2":101}]],"length":92629,"saved":false}
{"ts":1364838746661,"patch":[[{"diffs":[[0,",0, "],[-1,"date('m'), date('d'), date('Y'"],[1,"Date.getMonth(), Date.getDay(), Date.getYear("],[0,"));\r"]],"start1":16144,"start2":16144,"length1":38,"length2":53}]],"length":92644,"saved":false}
{"ts":1364838780002,"patch":[[{"diffs":[[0,")\r\n\r\n\r\n\t"],[-1,"$this->"],[0,"today   "]],"start1":16107,"start2":16107,"length1":23,"length2":16},{"diffs":[[0,"r());\r\n\t"],[-1,"$this->"],[0,"yesterda"]],"start1":16184,"start2":16184,"length1":23,"length2":16},{"diffs":[[0,"erday = "],[-1,"$this->"],[0,"today-86"]],"start1":16196,"start2":16196,"length1":23,"length2":16}]],"length":92623,"saved":false}
{"ts":1364838819466,"patch":[[{"diffs":[[0,"day "],[-1,"= mktime(0, 0, 0, date('m'), date('d'), date('Y'));\r\n    })\r\n\r\n\r\n\ttoday "],[0,"    "]],"start1":16045,"start2":16045,"length1":80,"length2":8},{"diffs":[[0,"ar());\r\n"],[1,"    "],[0,"\tyesterd"]],"start1":16111,"start2":16111,"length1":16,"length2":20},{"diffs":[[0,"86400;\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"\t// debu"]],"start1":16142,"start2":16142,"length1":18,"length2":26},{"diffs":[[0,"utes);\r\n"],[1,"    "],[0,"\tif (!"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"init()) "]],"start1":16183,"start2":16183,"length1":29,"length2":31},{"diffs":[[0,"t()) {\r\n"],[-1,"\t\treturn false;\r\n\t}"],[1,"    \t\tmountDeferred.reject();\r\n    \t}    \r\n    })\r\n\r\n\r\n"],[0,"\r\n\r\n\t// "]],"start1":16209,"start2":16209,"length1":35,"length2":71}]],"length":92601,"saved":false}
{"ts":1364838846846,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n\r\n\r\n\r\n\r\n\t"],[1,"    "],[0,"// c"]],"start1":16260,"start2":16260,"length1":21,"length2":12},{"diffs":[[0,"arrays\r\n"],[1,"    "],[0,"\t$this->"]],"start1":16293,"start2":16293,"length1":16,"length2":20},{"diffs":[[0,"adAllow'])\r\n"],[1,"    "],[0,"\t\t? $this->o"]],"start1":16396,"start2":16396,"length1":24,"length2":28},{"diffs":[[0,"oadAllow']\r\n"],[1,"    "],[0,"\t\t: array();"]],"start1":16435,"start2":16435,"length1":24,"length2":28},{"diffs":[[0,"  \t\t: array();\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"\t$this->uploadDe"]],"start1":16449,"start2":16449,"length1":34,"length2":42},{"diffs":[[0,"oadDeny'])\r\n"],[1,"    "],[0,"\t\t? $this->o"]],"start1":16563,"start2":16563,"length1":24,"length2":28},{"diffs":[[0,"loadDeny']\r\n"],[1,"    "],[0,"\t\t: array();"]],"start1":16601,"start2":16601,"length1":24,"length2":28},{"diffs":[[0,": array();\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"\tif (is_stri"]],"start1":16619,"start2":16619,"length1":26,"length2":34},{"diffs":[[0,"th 1.x\r\n"],[1,"    "],[0,"\t\t$parts"]],"start1":16727,"start2":16727,"length1":16,"length2":20},{"diffs":[[0,"y,allow');\r\n"],[1,"    "],[0,"\t\t$this->upl"]],"start1":16838,"start2":16838,"length1":24,"length2":28},{"diffs":[[0,"arts[1]));\r\n"],[1,"    "],[0,"\t} else { //"]],"start1":16907,"start2":16907,"length1":24,"length2":28},{"diffs":[[0,"de off\r\n"],[1,"    "],[0,"\t\t$this-"]],"start1":16947,"start2":16947,"length1":16,"length2":20},{"diffs":[[0,"adOrder'];\r\n"],[-1,"\t}"],[1,"    \t}\r\n    })\r\n\r\n\r\n\r\n\r\n"],[0,"\r\n\r\n\tif (!em"]],"start1":17002,"start2":17002,"length1":26,"length2":48}]],"length":92666,"saved":false}
{"ts":1364838876021,"patch":[[{"diffs":[[0,"\r\n    \t}"],[1,"\r\n    "],[0,"    \r\n  "]],"start1":16246,"start2":16246,"length1":16,"length2":22}]],"length":92672,"saved":false}
{"ts":1364839484064,"patch":[[{"diffs":[[0,"arrays\r\n    "],[-1,"\t$this->"],[1,"    "],[0,"uploadAllow "]],"start1":16299,"start2":16299,"length1":32,"length2":28},{"diffs":[[0,"Allow = "],[-1,"isset($this->"],[1,"!_.isUndefined("],[0,"options"],[-1,"['"],[1,"."],[0,"uploadAl"]],"start1":16321,"start2":16321,"length1":38,"length2":39},{"diffs":[[0,"llow"],[-1,"']"],[0,") && "],[-1,"is_array($this->"],[1,"!_.isArray("],[0,"options"],[-1,"['"],[1,"."],[0,"uplo"]],"start1":16359,"start2":16359,"length1":40,"length2":32},{"diffs":[[0,"llow"],[-1,"']"],[0,")\r\n    "],[-1,"\t\t? $this->"],[1,"        ? "],[0,"options"],[-1,"['"],[1,"."],[0,"uplo"]],"start1":16394,"start2":16394,"length1":37,"length2":33},{"diffs":[[0,"oadAllow"],[-1,"']"],[0,"\r\n    \t\t"]],"start1":16426,"start2":16426,"length1":18,"length2":16},{"diffs":[[0,"dAllow\r\n    \t\t: "],[-1,"array()"],[1,"[]"],[0,";\r\n    \r\n    \t$t"]],"start1":16428,"start2":16428,"length1":39,"length2":34},{"diffs":[[0," \r\n    \t"],[-1,"$this->"],[0,"uploadDe"]],"start1":16452,"start2":16452,"length1":23,"length2":16},{"diffs":[[0,"dDeny = "],[-1,"isset($this->"],[1,"!_.isUndefined("],[0,"options"],[-1,"['"],[1,"."],[0,"uploadDe"]],"start1":16465,"start2":16465,"length1":38,"length2":39},{"diffs":[[0,"Deny"],[-1,"']"],[0,") && "],[-1,"is_array($this->"],[1,"_.isArray("],[0,"options"],[-1,"['"],[1,"."],[0,"uplo"]],"start1":16502,"start2":16502,"length1":40,"length2":31},{"diffs":[[0,"loadDeny"],[-1,"']"],[0,")\r\n    \t"]],"start1":16531,"start2":16531,"length1":18,"length2":16},{"diffs":[[0,"    \t\t? "],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"uploadDe"]],"start1":16542,"start2":16542,"length1":32,"length2":24},{"diffs":[[0,"loadDeny"],[-1,"']"],[0,"\r\n    \t\t"]],"start1":16560,"start2":16560,"length1":18,"length2":16},{"diffs":[[0,"    \t\t: "],[-1,"array()"],[1,"[]"],[0,";\r\n    \r"]],"start1":16570,"start2":16570,"length1":23,"length2":18},{"diffs":[[0,"   \t"],[-1,"if (is_string($this->options['uploadOrder'])) { // telephat_mode on, compatibility with 1.x\r\n    \t\t$parts = explode(',', isset($this->"],[1,"uploadOrder = "],[0,"options"],[-1,"['"],[1,"."],[0,"uplo"]],"start1":16590,"start2":16590,"length1":151,"length2":30},{"diffs":[[0,"rder"],[-1,"']) ? $this->options['uploadOrder'] : 'deny,allow');\r\n    \t\t$this->uploadOrder = array(trim($parts[0]), trim($parts[1]));\r\n    \t} else { // telephat_mode off\r\n    \t\t$this->uploadOrder = $this->options['uploadOrder'];\r\n    \t}"],[1,"; // This driver doesn't supported telephat mode."],[0,"\r\n  "]],"start1":16623,"start2":16623,"length1":232,"length2":57}]],"length":92322,"saved":false}
{"ts":1364839543409,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n\r\n\r\n\r\n\r\n"],[1,"    \r\n        if (!_.isUndefined(options.uploadMaxSize)) {\r\n            var size = '' + options.uploadMaxSize;\r\n            var unit = _.last(size).toLowerCase();\r\n        }\r\n    })"],[0,"\r\n\r\n"]],"start1":16678,"start2":16678,"length1":20,"length2":189}]],"length":92491,"saved":false}
{"ts":1364839590397,"patch":[[{"diffs":[[0,"werCase();\r\n"],[1,"            var n = 1;\r\n            switch (unit) {\r\n                case 'k':\r\n                    n = 1024;\r\n                    break;\r\n                case 'm':\r\n                    n = 1048576;\r\n                    break;\r\n                case 'g':\r\n                    n = 1073741824;\r\n                    break;\r\n            }\r\n"],[0,"        }\r\n "]],"start1":16834,"start2":16834,"length1":24,"length2":359}]],"length":92826,"saved":false}
{"ts":1364839611172,"patch":[[{"diffs":[[0,"\n            }\r\n"],[1,"            uploadMaxSize = size * n;\r\n"],[0,"        }\r\n    }"]],"start1":17165,"start2":17165,"length1":32,"length2":71}]],"length":92865,"saved":false}
{"ts":1364839620733,"patch":[[{"diffs":[[0,"e = size"],[1,"+0"],[0," * n;\r\n "]],"start1":17205,"start2":17205,"length1":16,"length2":18}]],"length":92867,"saved":false}
{"ts":1364839624096,"patch":[[{"diffs":[[0,"size"],[-1,"+0"],[0," * n"]],"start1":17209,"start2":17209,"length1":10,"length2":8}]],"length":92865,"saved":false}
{"ts":1364839772082,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n\r\n\tif (!empty($this->options['uploadMaxSize'])) {\r\n\t\t$size = ''.$this->options['uploadMaxSize'];\r\n\t\t$unit = strtol"],[1,"    \r\n        disabled = !_.isUndefined(options.disabled) && _.isArray(options.disabled) ? options.disabled : [];\r\n        \r\n        cryptLib = options.cryptLib;\r\n        mimeDetect = options.mimeDetect;\r\n        \r\n        // find available mimetype detect method\r\n    \tvar type = options.mimeDetect.toL"],[0,"ower"],[-1,"(substr($size, strlen($size) - 1));\r\n\t\t$n = 1;\r\n\t\tswitch ($unit"],[1,"Case();\r\n    \ttype = type.match('/^(finfo|mime_content_type|internal|auto)$/i') ? type : 'auto';\r\n    \tvar regex = '/text\\/x\\-(php|c\\+\\+)/';\r\n    \r\n    \tif ((type == 'finfo' || type == 'auto'"],[0,") "],[-1,"{"],[0,"\r\n"],[-1,"\t\t\tcase 'k':\r\n\t\t\t\t$n = 1024;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'm':\r\n\t\t\t\t$n = 1048576;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'g':\r\n\t\t\t\t$n = 1073741824;\r\n\t\t}\r\n\t\t$this->uploadMaxSize"],[1,"    \t&& class_exists('finfo')) {\r\n    \t\t$tmpFileInfo = @explode(';', @finfo_file(finfo_open(FILEINFO_MIME), __FILE__));\r\n    \t} else {\r\n    \t\t$tmpFileInfo = false;\r\n    \t}\r\n    \r\n    \tif ($tmpFileInfo && preg_match($regexp, array_shift($tmpFileInfo))) {\r\n    \t\t$type = 'finfo';\r\n    \t\t$this->finfo"],[0," = "],[1,"f"],[0,"in"],[-1,"tval($size)*$n;\r\n\t}\r\n\r\n\t$this->disabled = isset($this->options['disabled']) && is_array($this->options['disabled'])\r\n\t\t? $this->options['disabled']\r\n\t\t: array();\r\n\r\n\t$this->cryptLib   = $this->options['cryptLib'];\r\n\t$this->mimeDetect = $this->options['mimeDetect'];"],[1,"fo_open(FILEINFO_MIME);\r\n    \t} elseif (($type == 'mime_content_type' || $type == 'auto') \r\n    \t&& function_exists('mime_content_type')\r\n    \t&& preg_match($regexp, array_shift(explode(';', mime_content_type(__FILE__))))) {\r\n    \t\t$type = 'mime_content_type';\r\n    \t} else {\r\n    \t\t$type = 'internal';\r\n    \t}\r\n    \t$this->mimeDetect = $type;        \r\n    });\r\n"],[0,"\r\n\r\n"]],"start1":17231,"start2":17231,"length1":618,"length2":1175}]],"length":93422,"saved":false}
{"ts":1364840139441,"patch":[[{"diffs":[[0,"';\r\n"],[-1,"    \r\n    \tif ((type == 'finfo' || type == 'auto') \r\n    \t&& class_exists('finfo')) {\r\n    \t\t$tmpFileInfo = @explode(';', @finfo_file(finfo_open(FILEINFO_MIME), __FILE__));\r\n    \t} else {\r\n    \t\t$tmpFileInfo = false;\r\n    \t}\r\n    \r\n    \tif ($tmpFileInfo && preg_match($regexp, array_shift($tmpFileInfo))) {\r\n    \t\t$type = 'finfo';\r\n    \t\t$this->finfo = finfo_open(FILEINFO_MIME);\r\n    \t} elseif (($type == 'mime_content_type' || $type == 'auto') \r\n    \t&& function_exists('mime_content_type')\r\n    \t&& preg_match($regexp, array_shift(explode(';', mime_content_type(__FILE__))))) {\r\n    \t\t$type = 'mime_content_type';\r\n    \t} else {\r\n    \t\t$type = 'internal';\r\n    \t}\r\n    \t$this->mimeDetect = $type;        \r\n    });\r\n\r\n\r\n\t// find available mimetype detect method\r\n\t$type = strtolower($this->options['mimeDetect']);\r\n\t$type = preg_match('/^(finfo|mime_content_type|internal|auto)$/i', $type) ? $type : 'auto';\r\n\t$regexp = '/text\\/x\\-(php|c\\+\\+)/';\r\n\r\n\tif (($type == 'finfo' || $type == 'auto') \r\n\t&& class_exists('finfo')) {\r\n\t\t$tmpFileInfo = @explode(';', @finfo_file(finfo_open(FILEINFO_MIME), __FILE__));\r\n\t} else {\r\n\t\t$tmpFileInfo = false;\r\n\t}\r\n\r\n\tif ($tmpFileInfo && preg_match($regexp, array_shift($tmpFileInfo))) {\r\n\t\t$type = 'finfo';\r\n\t\t$this->finfo = finfo_open(FILEINFO_MIME);\r\n\t} elseif (($type == 'mime_content_type' || $type == 'auto') \r\n\t&& function_exists('mime_content_type')\r\n\t&& preg_match($regexp, array_shift(explode(';', mime_content_type(__FILE__))))) {\r\n\t\t$type = 'mime_content_type';\r\n\t} else {\r\n\t\t$type = 'internal';\r\n\t}\r\n\t$this->mimeDetect = $type;\r\n\r\n\t// load mimes from external file for mimeDetect == 'internal'\r\n\t// based on Alexey Sukhotin idea and patch: http://elrte.org/redmine/issues/163\r\n\t// file must be in file directory or in parent one \r\n\tif ($this->mimeDetect == 'internal' && !self::$mimetypesLoaded) {\r\n\t\tself::$mimetypesLoaded = true;\r\n\t\t$this->mimeDetect = 'internal';\r\n\t\t$file = false;\r\n\t\tif (!empty($this->options['mimefile']) && file_exists($this->options['mimefile'])) {\r\n\t\t\t$file = $this->options['mimefile'];\r\n\t\t} elseif (file_exists(dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t$file = dirname(__FILE__).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t} elseif (file_exists(dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types')) {\r\n\t\t\t$file = dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR.'mime.types';\r\n\t\t}\r\n\r\n\t\tif ($file && file_exists($file)) {\r\n\t\t\t$mimecf = file($file);\r\n\r\n\t\t\tforeach ($mimecf as $line_num : $line) {\r\n\t\t\t\tif (!preg_match('/^\\s*#/', $line)) {\r\n\t\t\t\t\t$mime = preg_split('/\\s+/', $line, -1, PREG_SPLIT_NO_EMPTY);\r\n\t\t\t\t\tfor ($i = 1, $size = count($mime); $i < $size ; $i++) {\r\n\t\t\t\t\t\tif (!isset(self::$mimetypes[$mime[$i]])) {\r\n\t\t\t\t\t\t\tself::$mimetypes[$mime[$i]] = $mime[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$this->rootName = empty($this->options['alias']"],[1,"\r\n\trootName = _.isUndefined(options.alias"],[0,") ? "],[-1,"$"],[0,"this"],[-1,"->_"],[1,"."],[0,"base"]],"start1":17680,"start2":17680,"length1":2864,"length2":58},{"diffs":[[0,"ame("],[-1,"$this->"],[0,"root) : "],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"alias"],[-1,"']"],[0,";\r\n\t"]],"start1":17739,"start2":17739,"length1":46,"length2":29}]],"length":90599,"saved":false}
{"ts":1364840163354,"patch":[[{"diffs":[[0,";\r\n\t"],[-1,"$"],[0,"root = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$this->"],[0,"root"]],"start1":17764,"start2":17764,"length1":35,"length2":25}]],"length":90589,"saved":false}
{"ts":1364840378379,"patch":[[{"diffs":[[0,")/';\r\n\r\n"],[1,"    "],[0,"\trootNam"]],"start1":17678,"start2":17678,"length1":16,"length2":20},{"diffs":[[0,"alias;\r\n"],[1,"    "],[0,"\troot = "]],"start1":17763,"start2":17763,"length1":16,"length2":20},{"diffs":[[0,"root);\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"\tif (!"],[-1,"$"],[0,"root) {\r"]],"start1":17793,"start2":17793,"length1":25,"length2":32},{"diffs":[[0,"oot) {\r\n"],[-1,"\t\treturn $"],[1,"            return Q.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError"]],"start1":17818,"start2":17818,"length1":32,"length2":49},{"diffs":[[0,"xist"],[-1,"s"],[0,".')"],[1,")"],[0,";\r\n"],[-1,"\t}\r\n\t"],[1,"    \t}\r\n        "],[0,"if (!"],[-1,"$"],[0,"root"],[-1,"['"],[1,"."],[0,"read"],[-1,"']"],[0," && !"],[-1,"$"],[0,"root"],[-1,"['"],[1,"."],[0,"write"],[-1,"']"],[0,") {\r\n"],[-1,"\t\treturn $"],[1,"            return Q.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setE"]],"start1":17891,"start2":17891,"length1":78,"length2":98},{"diffs":[[0,"der "],[-1,"ha"],[1,"doe"],[0,"s not "],[1,"have "],[0,"read"]],"start1":18003,"start2":18003,"length1":16,"length2":22},{"diffs":[[0,"sions.')"],[1,")"],[0,";\r\n"],[-1,"\t"],[1,"        "],[0,"}\r\n\r\n\t//"]],"start1":18042,"start2":18042,"length1":20,"length2":28},{"diffs":[[0,"($root);\r\n\r\n"],[1,"    if (root.read) {\r\n        if (options.startPath) {\r\n            var start = this.stat(options.startPath);\r\n            if (start &&\r\n            start.mime == 'directory' &&\r\n            start.read &&\r\n            !start.hidden &&\r\n            this._inpath(options.startPath, root)) {\r\n                startPath = options.startPath;\r\n                if ()\r\n            }\r\n        }\r\n    }\r\n"],[0,"\tif ($root['"]],"start1":18076,"start2":18076,"length1":24,"length2":418}]],"length":91049,"saved":false}
{"ts":1364840794466,"patch":[[{"diffs":[[0,"    if ("],[-1,")"],[1,"_.last(startPath) == options.separator) {\r\n                    startPath = startPath.slice(0, -1);\r\n                }"],[0,"\r\n      "]],"start1":18438,"start2":18438,"length1":17,"length2":133}]],"length":91165,"saved":false}
{"ts":1364841208364,"patch":[[{"diffs":[[0,"   }"],[-1,"\r\n\tif ($root['read']) {\r\n\t\t// check startPath - path to open by default instead of root\r\n\t\tif ($this->options['startPath']) {\r\n\t\t\t$start = $this->stat($this->options['startPath']);\r\n\t\t\tif (!empty($start)\r\n\t\t\t&& $start['mime'] == 'directory'\r\n\t\t\t&& $start['read']\r\n\t\t\t&& empty($start['hidden'])\r\n\t\t\t&& $this->_inpath($this->options['startPath'], $this->root)) {\r\n\t\t\t\t$this->startPath = $this->options['startPath'];\r\n\t\t\t\tif (substr($this->startPath, -1, 1) == $this->options['separator']) {\r\n\t\t\t\t\t$this->startPath = substr($this->startPath, 0, -1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\t$this->options['URL']     = '';\r\n\t\t$this->options['tmbURL']  = '';\r\n\t\t$this->options['tmbPath'] = '';\r\n\t\t// read only volume\r\n\t\tarray_unshift($this->attributes, array(\r\n\t\t\t"],[1," else {\r\n        options.URL = '';\r\n        options.tmbURL = '';\r\n        options.tmbPath = '';\r\n        \r\n        attributes.unshift({\r\n            "],[0,"'pat"]],"start1":18592,"start2":18592,"length1":759,"length2":157},{"diffs":[[0,"pattern'"],[-1," "],[0,": '/.*/'"]],"start1":18746,"start2":18746,"length1":17,"length2":16},{"diffs":[[0,"',\r\n"],[-1,"\t\t\t"],[1,"            "],[0,"'read'"],[-1,"    "],[0,": fa"]],"start1":18761,"start2":18761,"length1":21,"length2":26},{"diffs":[[0,"se\r\n"],[-1,"\t\t));\r\n\t}\r\n\t$this->"],[1,"        });\r\n\t}\r\n    "],[0,"tree"]],"start1":18788,"start2":18788,"length1":27,"length2":29},{"diffs":[[0,"p = "],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"treeDeep"],[-1,"']"],[0," > 0 ? "],[-1,"(int)$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"treeDeep"],[-1,"']"],[1," + 0"],[0," : 1;\r\n"],[-1,"\t$this->"],[1,"    "],[0,"tmbSize "],[-1," "],[0,"= "],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"tmbSize"],[-1,"']"],[0," > 0 ? "],[-1,"(int)$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"tmbSize"],[-1,"'] "],[1," + 0"],[0,": 48;\r\n"],[-1,"\t$this->URL      = $this->options['URL'];\r\n\tif ($this->URL && preg_match(\"|[^/?&=]$|\", $this->URL)) {\r\n\t\t$this->"],[1,"    URL = options.URL;\r\n    if (URL && URL.match(\"|[^/?&=]$|\")) {\r\n        URL += '/';   \r\n    }\r\n    \r\n    tmbURL = !_.isUndefined(options.tmbURL) ? options.tmbURL : '';\r\n    \r\n    if (tmbURL && tmbURL.match(\"|[^/?&=]$|\")) {\r\n        tmb"],[0,"URL "],[-1,"."],[1,"+"],[0,"= '/';\r\n"],[-1,"\t"],[1,"    "],[0,"}\r\n\r"]],"start1":18820,"start2":18820,"length1":294,"length2":375}]],"length":90650,"saved":false}
{"ts":1364841585566,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\t$this->tmbURL   = !empty($this->options['tmbURL']) ? $this->options['tmbURL'] : '';\r\n\tif ($this->tmbURL && preg_match(\"|[^/?&=]$|\", $this->tmbURL)) {\r\n\t\t$this->tmbURL .="],[1,"    nameValidator = _.isString(options.acceptedName) && !_.isUndefined(options.acceptedName) ?\r\n        options.acceptedName :\r\n       "],[0," '"],[-1,"/"],[0,"';\r\n"],[-1,"\t}\r\n\r\n\t$this->nameValidator = is_string($this->options['acceptedName']) && !empty($this->options['acceptedName']"],[1,"    \r\n    this._checkArchivers();\r\n    \r\n    if (!_.isUndefined(options.archiveMimes) && !_.isArray(options.archiveMimes)) {\r\n        _.each(archivers.create, function(value, key, list)"],[0,") "],[1,"{"],[0,"\r\n"],[-1,"\t\t? $this->options['acceptedName']\r\n\t\t: '';\r\n"],[1,"            if (_.contains(value, _.keys(options.archiveMimes)) {\r\n                \r\n            }\r\n        }\r\n    }"],[0,"\r\n\t$"]],"start1":19192,"start2":19192,"length1":346,"length2":455}]],"length":90759,"saved":false}
{"ts":1364841596491,"patch":[[{"diffs":[[0,"    if ("],[1,"!"],[0,"_.contai"]],"start1":19535,"start2":19535,"length1":16,"length2":17}]],"length":90760,"saved":false}
{"ts":1364841604096,"patch":[[{"diffs":[[0,"y, list)"],[-1,")"],[0," {\r\n    "]],"start1":19514,"start2":19514,"length1":17,"length2":16},{"diffs":[[0,"}\r\n        }"],[1,");"],[0,"\r\n    }\r\n\t$t"]],"start1":19624,"start2":19624,"length1":24,"length2":26}]],"length":90761,"saved":false}
{"ts":1364842121042,"patch":[[{"diffs":[[0,"                "],[1,"delete archivers.create[mime];"],[0,"\r\n            }\r"]],"start1":19594,"start2":19594,"length1":32,"length2":62}]],"length":90791,"saved":false}
{"ts":1364842124734,"patch":[[{"diffs":[[0,".create["],[-1,"mim"],[1,"valu"],[0,"e];\r\n   "]],"start1":19626,"start2":19626,"length1":19,"length2":20}]],"length":90792,"saved":false}
{"ts":1364842130357,"patch":[[{"diffs":[[0,"ontains("],[-1,"value"],[1,"key"],[0,", _.keys"]],"start1":19546,"start2":19546,"length1":21,"length2":19},{"diffs":[[0,".create["],[-1,"value"],[1,"key"],[0,"];\r\n    "]],"start1":19624,"start2":19624,"length1":21,"length2":19}]],"length":90788,"saved":false}
{"ts":1364842143590,"patch":[[{"diffs":[[0,"s.archiveMimes))"],[1,")"],[0," {\r\n            "]],"start1":19572,"start2":19572,"length1":32,"length2":33}]],"length":90789,"saved":false}
{"ts":1364846084085,"patch":[[{"diffs":[[0," }\r\n"],[-1,"\t$this->_checkArchivers();\r\n\t// manual control archive types to create\r\n\tif (!empty($"],[1,"\r\n    if ("],[0,"this"],[-1,"->"],[1,"."],[0,"options"],[-1,"['"],[1,"."],[0,"archive"],[-1,"Mimes']) && is_a"],[1,"rs.create && _.isA"],[0,"rray("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"options"],[-1,"['"],[1,"."],[0,"archive"],[-1,"Mimes'])) {\r\n\t\tforeach ($this->archivers['create'] as $mime : $v) {\r\n\t\t\tif (!in_array($mime, $this->options['archiveMimes'])) {\r\n\t\t\t\tunset($this->archivers['create'][$mime]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n"],[1,"rs.create)) {\r\n        \r\n    }"],[0,"\r\n\t/"]],"start1":19671,"start2":19671,"length1":350,"length2":111}]],"length":90550,"saved":false}
{"ts":1364846155266,"patch":[[{"diffs":[[0,"       }\r\n\r\n"],[1,"    "],[0,"\t// debug($r"]],"start1":18055,"start2":18055,"length1":24,"length2":28},{"diffs":[[0,"ug($root);\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"    if (root"]],"start1":18078,"start2":18078,"length1":26,"length2":34},{"diffs":[[0," {\r\n        "],[1," "],[1,"   "],[0,"if (options."]],"start1":18118,"start2":18118,"length1":24,"length2":28},{"diffs":[[0,"artPath) {\r\n"],[1,"    "],[0,"            "]],"start1":18148,"start2":18148,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"if (start &&"]],"start1":18219,"start2":18219,"length1":24,"length2":28},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"start.mime ="]],"start1":18249,"start2":18249,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"   "],[1," "],[0,"start.read &"]],"start1":18295,"start2":18295,"length1":24,"length2":28},{"diffs":[[0,"rt.read &&\r\n"],[1,"    "],[0,"            "]],"start1":18314,"start2":18314,"length1":24,"length2":28},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"this._inpath"]],"start1":18360,"start2":18360,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"startPath = opti"]],"start1":18418,"start2":18418,"length1":32,"length2":36},{"diffs":[[0,"startPath;\r\n"],[1,"    "],[0,"            "]],"start1":18458,"start2":18458,"length1":24,"length2":28},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"startPath = star"]],"start1":18541,"start2":18541,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\r\n"],[1,"    }\r\n    "],[0,"            }\r\n "]],"start1":18598,"start2":18598,"length1":35,"length2":43},{"diffs":[[0," }\r\n        "],[1,"  "],[1,"  "],[0,"}\r\n"],[1,"    "],[0,"    } else {"]],"start1":18636,"start2":18636,"length1":27,"length2":35},{"diffs":[[0,"else {\r\n        "],[1,"    "],[0,"options.URL = ''"]],"start1":18665,"start2":18665,"length1":32,"length2":36},{"diffs":[[0," = '';\r\n        "],[1,"  "],[1,"  "],[0,"options.tmbURL ="]],"start1":18696,"start2":18696,"length1":32,"length2":36},{"diffs":[[0,"s.tmbURL = '';\r\n"],[1,"    "],[0,"        options."]],"start1":18722,"start2":18722,"length1":32,"length2":36},{"diffs":[[0,"        "],[-1,"\r\n"],[1,"    \r\n  "],[0,"        "],[1,"  "],[0,"attribut"]],"start1":18773,"start2":18773,"length1":26,"length2":34},{"diffs":[[0,".unshift({\r\n"],[1,"    "],[0,"            "]],"start1":18809,"start2":18809,"length1":24,"length2":28},{"diffs":[[0,"',\r\n            "],[1,"    "],[0,"'read': false\r\n "]],"start1":18853,"start2":18853,"length1":32,"length2":36},{"diffs":[[0,"    "],[1,"  "],[1,"  "],[0,"});\r\n"],[-1,"\t}\r\n"],[1,"    \t}\r\n    "],[0,"    "]],"start1":18892,"start2":18892,"length1":17,"length2":29},{"diffs":[[0,"1;\r\n    "],[1,"   "],[1," "],[0,"tmbSize "]],"start1":18978,"start2":18978,"length1":16,"length2":20},{"diffs":[[0,"e + 0: 48;\r\n"],[1,"    "],[0,"    URL = op"]],"start1":19036,"start2":19036,"length1":24,"length2":28},{"diffs":[[0,"s.URL;\r\n    "],[1," "],[1,"   "],[0,"if (URL && U"]],"start1":19068,"start2":19068,"length1":24,"length2":28},{"diffs":[[0," {\r\n        "],[1,"   "],[1," "],[0,"URL += '/'; "]],"start1":19119,"start2":19119,"length1":24,"length2":28},{"diffs":[[0,"+= '/';   \r\n"],[1,"    "],[0,"    }\r\n    \r"]],"start1":19139,"start2":19139,"length1":24,"length2":28},{"diffs":[[0," }\r\n    "],[1," "],[-1,"\r\n"],[1,"   \r\n   "],[0,"    "],[1," "],[0,"tmbURL ="]],"start1":19158,"start2":19158,"length1":22,"length2":30},{"diffs":[[0," : '';\r\n    "],[-1,"\r\n"],[1,"    \r\n    "],[0,"    if (tmbU"]],"start1":19236,"start2":19236,"length1":26,"length2":34},{"diffs":[[0," {\r\n        "],[1,"   "],[1," "],[0,"tmbURL += '/"]],"start1":19303,"start2":19303,"length1":24,"length2":28},{"diffs":[[0,"= '/';\r\n    "],[-1,"}\r\n\r\n"],[1,"    }\r\n    \r\n    "],[0,"    nameVali"]],"start1":19327,"start2":19327,"length1":29,"length2":41},{"diffs":[[0,"ame) ?\r\n        "],[1,"    "],[0,"options.accepted"]],"start1":19444,"start2":19444,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"'';\r\n   "]],"start1":19488,"start2":19488,"length1":16,"length2":20},{"diffs":[[0,"   '';\r\n    "],[1,"   "],[1," "],[0,"\r\n"],[1,"    "],[0,"    this._ch"]],"start1":19497,"start2":19497,"length1":26,"length2":34},{"diffs":[[0,"ers();\r\n    "],[-1,"\r\n"],[1,"    \r\n    "],[0,"    if (!_.i"]],"start1":19540,"start2":19540,"length1":26,"length2":34},{"diffs":[[0,"chiveMimes)) {\r\n"],[1,"            var index = 0;\r\n    "],[0,"        _.each(a"]],"start1":19631,"start2":19631,"length1":32,"length2":64},{"diffs":[[0,", key, list) {\r\n"],[1,"    "],[0,"            if ("]],"start1":19726,"start2":19726,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"delete a"]],"start1":19821,"start2":19821,"length1":16,"length2":20},{"diffs":[[0,"];\r\n            "],[1,"    "],[0,"}\r\n"],[1,"                if (++index > _.size(list) - 1) {\r\n                    return Q.resolve();\r\n                }\r\n    "],[0,"        });\r\n   "]],"start1":19860,"start2":19860,"length1":35,"length2":154},{"diffs":[[0,"       });\r\n"],[1,"    "],[0,"    }\r\n"],[1,"    }).then(function() {\r\n        \r\n    })"],[0,"\r\n    if (th"]],"start1":19999,"start2":19999,"length1":31,"length2":77}]],"length":90939,"saved":false}
{"ts":1364846630382,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n    })\r\n    "],[0,"if ("]],"start1":20052,"start2":20052,"length1":22,"length2":8},{"diffs":[[0,"        "],[1,"      \r\n        }"],[0,"\r\n    }"],[1,")\r\n"],[0,"\r\n\t// ma"]],"start1":20138,"start2":20138,"length1":23,"length2":43}]],"length":90945,"saved":false}
{"ts":1364846697508,"patch":[[{"diffs":[[0," {\r\n            "],[-1,"  "],[1,"_.each(this.archivers.create, function(mime, key, list) {\r\n                    \r\n            });"],[0,"\r\n        }\r\n   "]],"start1":20134,"start2":20134,"length1":34,"length2":128}]],"length":91039,"saved":false}
{"ts":1364846713912,"patch":[[{"diffs":[[0,"                "],[-1,"    "],[0,"\r\n            })"]],"start1":20209,"start2":20209,"length1":36,"length2":32}]],"length":91035,"saved":false}
{"ts":1364846734916,"patch":[[{"diffs":[[0,"ion("],[-1,"mime, key"],[1,"value, mime"],[0,", li"]],"start1":20185,"start2":20185,"length1":17,"length2":19}]],"length":91037,"saved":false}
{"ts":1364846742160,"patch":[[{"diffs":[[0,"unction("],[-1,"value"],[1,"conf"],[0,", mime, "]],"start1":20181,"start2":20181,"length1":21,"length2":20}]],"length":91036,"saved":false}
{"ts":1364846844046,"patch":[[{"diffs":[[0,"    if ("],[-1,"this."],[0,"options."]],"start1":20052,"start2":20052,"length1":21,"length2":16},{"diffs":[[0,"isArray("],[-1,"this."],[0,"options."]],"start1":20090,"start2":20090,"length1":21,"length2":16},{"diffs":[[0," _.each("],[-1,"thi"],[1,"option"],[0,"s.archiv"]],"start1":20139,"start2":20139,"length1":19,"length2":22},{"diffs":[[0,"                "],[1,"if (mime.indexOf('application/') ===  0\r\n                    && !_.isUndefined(conf.cmd)\r\n                    && !_.isUndefined(conf.argc)\r\n                    && !_.isUndefined(conf.ext)\r\n                    && !_.isUndefined()"],[0,"\r\n            })"]],"start1":20203,"start2":20203,"length1":32,"length2":260}]],"length":91257,"saved":false}
{"ts":1364846867894,"patch":[[{"diffs":[[0,"defined("],[-1,")"],[1,"archivers.create[mime])) {\r\n                        archivers.create[mime] = conf;\r\n                    }"],[0,"\r\n      "]],"start1":20438,"start2":20438,"length1":17,"length2":121}]],"length":91361,"saved":false}
{"ts":1364847016662,"patch":[[{"diffs":[[0," {\r\n            "],[-1,""],[0,""],[1,"var index = 0;\r\n            "],[0,"_.each(options.a"]],"start1":20124,"start2":20124,"length1":32,"length2":60},{"diffs":[[0,"    "],[-1,"});\r\n        }\r\n    })\r\n\r\n\t// manualy add archivers\r\n\tif (!empty($this->options['archivers']['create']) && is_array($this->options['archivers']['create'])) {\r\n\t\tforeach ($this->options['archivers']['create'] as $mime : $conf) {\r\n\t\t\tif (strpos($mime, 'application/') === 0 \r\n\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t&& isset($conf['argc']) \r\n\t\t\t&& !empty($conf['ext'])\r\n\t\t\t&& !isset($this->archivers['create'][$mime])) {\r\n\t\t\t\t$this->archivers['create'][$mime] = $conf;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!empty($this->options['archivers']['extract']) && is_array($this->options['archivers']['extract'])) {\r\n\t\tforeach ($this->options['archivers']['extract'] as $mime : $conf) {\r\n\t\t\tif (strpos($mime, 'application/') === 0\r\n\t\t\t&& !empty($conf['cmd']) \r\n\t\t\t&& isset($conf['argc']) \r\n\t\t\t&& !empty($conf['ext'])\r\n\t\t\t&& !isset($this->archivers['extract'][$mime])) {\r\n\t\t\t\t$this->archivers['extract'][$mime] = $conf;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$"],[1,"    if (++index > _.size(list) -1) {\r\n                    return Q.resolve();\r\n                }\r\n            });\r\n        }\r\n    }).then(function() {\r\n        "],[0,"this"],[-1,"->"],[1,"."],[0,"conf"]],"start1":20589,"start2":20589,"length1":921,"length2":173},{"diffs":[[0,");\r\n"],[-1,"\t// echo $this->uploadMaxSize;\r\n\t// echo $this->options['uploadMaxSize'];\r\n\treturn $this->mounted = true;"],[1,"        mounted = true;\r\n        mountDeferred.resolve(true);\r\n    })\r\n\r\n"],[0,"\r\n}\r"]],"start1":20768,"start2":20768,"length1":113,"length2":81}]],"length":90609,"saved":false}
{"ts":1364847054601,"patch":[[{"diffs":[[0,"  })\r\n\r\n"],[1,"    return mountDeferred.promise;"],[0,"\r\n}\r\n\r\n/"]],"start1":20837,"start2":20837,"length1":16,"length2":49}]],"length":90642,"saved":false}
{"ts":1364847086343,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function umount() {"],[1,"ElFinderVolumeDriver.prototype.umount = function() {\r\n    "],[0,"\r\n}\r"]],"start1":21005,"start2":21005,"length1":34,"length2":66}]],"length":90674,"saved":false}
{"ts":1364847104524,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.error ="],[0," function error("]],"start1":21174,"start2":21174,"length1":38,"length2":70},{"diffs":[[0,"function"],[-1," error"],[0,"() {\r\n\tr"]],"start1":21229,"start2":21229,"length1":22,"length2":16},{"diffs":[[0," {\r\n\treturn "],[-1,"$this->"],[0,"error;\r\n}\r\n\r"]],"start1":21239,"start2":21239,"length1":31,"length2":24}]],"length":90693,"saved":false}
{"ts":1364847145967,"patch":[[{"diffs":[[0,"\r\n **/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"setMimes"]],"start1":21395,"start2":21395,"length1":32,"length2":47},{"diffs":[[0,"esFilter"],[1," = function"],[0,"("],[-1,"$"],[0,"mimes) {"]],"start1":21440,"start2":21440,"length1":18,"length2":28},{"diffs":[[0,"{\r\n\tif ("],[-1,"is_a"],[1,"_.isA"],[0,"rray("],[-1,"$"],[0,"mimes)) "]],"start1":21467,"start2":21467,"length1":26,"length2":26},{"diffs":[[0,")) {\r\n\t\t"],[-1,"$this->"],[0,"onlyMime"]],"start1":21490,"start2":21490,"length1":23,"length2":16}]],"length":90711,"saved":false}
{"ts":1364847149365,"patch":[[{"diffs":[[0,"= $mimes;\r\n\t}\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Retu"]],"start1":21508,"start2":21508,"length1":32,"length2":33}]],"length":90712,"saved":false}
{"ts":1364847180754,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.root ="],[0," function root()"]],"start1":21609,"start2":21609,"length1":38,"length2":69},{"diffs":[[0,"function"],[-1," root"],[0,"() {\r\n\tr"]],"start1":21663,"start2":21663,"length1":21,"length2":16},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"encode("],[-1,"$this->"],[0,"root);\r\n"]],"start1":21677,"start2":21677,"length1":37,"length2":28},{"diffs":[[0,"encode(root);\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Retu"]],"start1":21690,"start2":21690,"length1":32,"length2":33}]],"length":90730,"saved":false}
{"ts":1364849780253,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function defaultPath"],[1,"ElFinderVolumeDriver.prototype.defaultPath = function"],[0,"() {"]],"start1":21809,"start2":21809,"length1":35,"length2":61},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"encode("],[-1,"$this->"],[0,"startPat"]],"start1":21872,"start2":21872,"length1":37,"length2":28},{"diffs":[[0,"tPath ? "],[-1,"$this->"],[0,"startPat"]],"start1":21896,"start2":21896,"length1":23,"length2":16},{"diffs":[[0,"tPath : "],[-1,"$this->"],[0,"root);\r\n"]],"start1":21908,"start2":21908,"length1":23,"length2":16}]],"length":90733,"saved":false}
{"ts":1364849795066,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"options("],[-1,"$"],[0,"hash"]],"start1":22038,"start2":22038,"length1":33,"length2":47}]],"length":90747,"saved":false}
{"ts":1364849939510,"patch":[[{"diffs":[[0,"\treturn "],[-1,"array("],[1,"{"],[0,"\r\n\t\t'pat"]],"start1":22090,"start2":22090,"length1":22,"length2":17},{"diffs":[[0,"  : "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_path("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash"]],"start1":22117,"start2":22117,"length1":36,"length2":31},{"diffs":[[0,"      : "],[-1,"$this->"],[0,"URL,\r\n\t\t"]],"start1":22165,"start2":22165,"length1":23,"length2":16},{"diffs":[[0,"      : "],[-1,"$this->"],[0,"tmbURL,\r"]],"start1":22191,"start2":22191,"length1":23,"length2":16},{"diffs":[[0,"      : "],[-1,"$this->"],[0,"disabled"]],"start1":22220,"start2":22220,"length1":23,"length2":16},{"diffs":[[0,"'     : "],[-1,"$this->"],[0,"separato"]],"start1":22251,"start2":22251,"length1":23,"length2":16},{"diffs":[[0,"' : "],[-1,"intval($this->"],[0,"options"],[-1,"['"],[1,"."],[0,"copy"]],"start1":22287,"start2":22287,"length1":31,"length2":16},{"diffs":[[0,"verwrite"],[-1,"']"],[0,"),\r\n\t\t'a"]],"start1":22304,"start2":22304,"length1":18,"length2":16},{"diffs":[[0,"  : "],[-1,"array(\r\n\t\t\t// 'create'  : array_keys($this->archivers['create']),\r\n\t\t\t// 'extract' : array_keys($this->archivers['extract']),"],[1,"{"],[0,"\r\n\t\t"]],"start1":22332,"start2":22332,"length1":133,"length2":9},{"diffs":[[0,"\r\n\t\t"],[-1,")\r\n\t)"],[1,"}\r\n\t}"],[0,";\r\n}"]],"start1":22550,"start2":22550,"length1":13,"length2":13}]],"length":90568,"saved":false}
{"ts":1364850194114,"patch":[[{"diffs":[[0,"ate'  : "],[-1,"is_array($this->"],[0,"archiver"]],"start1":22346,"start2":22346,"length1":32,"length2":16},{"diffs":[[0,"vers"],[-1,"['"],[1,"."],[0,"create"],[-1,"']) "],[0," ? "],[-1,"array_keys($this->"],[0,"arch"]],"start1":22359,"start2":22359,"length1":41,"length2":18},{"diffs":[[0,"vers"],[-1,"['"],[1,"."],[0,"create"],[-1,"'])  : array()"],[1," : []"],[0,",\r\n\t"]],"start1":22378,"start2":22378,"length1":30,"length2":20},{"diffs":[[0,"' : "],[-1,"is_array($this->"],[0,"arch"]],"start1":22408,"start2":22408,"length1":24,"length2":8},{"diffs":[[0,"vers"],[-1,"['"],[1,"."],[0,"extract"],[-1,"'])"],[0," ? "],[-1,"array_keys($this->"],[0,"arch"]],"start1":22417,"start2":22417,"length1":41,"length2":19},{"diffs":[[0,"vers"],[-1,"['"],[1,"."],[0,"extract"],[-1,"']) : array()"],[1," : []"],[0,"\r\n\t\t"]],"start1":22437,"start2":22437,"length1":30,"length2":21}]],"length":90472,"saved":false}
{"ts":1364850208140,"patch":[[{"diffs":[[0,"reate ? "],[1,"_.keys("],[0,"archiver"]],"start1":22365,"start2":22365,"length1":16,"length2":23},{"diffs":[[0,"s.create"],[1,")"],[0," : [],\r\n"]],"start1":22388,"start2":22388,"length1":16,"length2":17},{"diffs":[[0,"tract ? "],[1,"_.keys("],[0,"archiver"]],"start1":22432,"start2":22432,"length1":16,"length2":23},{"diffs":[[0,".extract"],[1,")"],[0," : []\r\n\t"]],"start1":22456,"start2":22456,"length1":16,"length2":17}]],"length":90488,"saved":false}
{"ts":1364850213577,"patch":[[{"diffs":[[0,"verwrite"],[-1,")"],[0,",\r\n\t\t'ar"]],"start1":22304,"start2":22304,"length1":17,"length2":16}]],"length":90487,"saved":false}
{"ts":1364850227700,"patch":[[{"diffs":[[0,"\r\n **/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"commandD"]],"start1":22630,"start2":22630,"length1":32,"length2":47},{"diffs":[[0,"Disabled"],[1," = function"],[0,"("],[-1,"$"],[0,"cmd) {\r\n"]],"start1":22676,"start2":22676,"length1":18,"length2":28}]],"length":90512,"saved":false}
{"ts":1364850248764,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\t"],[1,"    "],[0,"return "],[-1,"in_array($cmd, $this->"],[1,"_.contains(cmd, "],[0,"disa"]],"start1":22700,"start2":22700,"length1":38,"length2":35},{"diffs":[[0,"isabled);\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":22732,"start2":22732,"length1":24,"length2":25}]],"length":90510,"saved":false}
{"ts":1364850419791,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function mimeAccepted($"],[1,"ElFinderVolumeDriver.prototype.mimeAccepted = function("],[0,"mime, "],[-1,"$"],[0,"mimes"],[-1," = array()"],[0,", "],[-1,"$"],[0,"empty"],[-1," = true"],[0,") {\r\n"],[-1,"\t$"],[1,"    "],[0,"mime"]],"start1":23090,"start2":23090,"length1":82,"length2":90},{"diffs":[[0,"imes = !"],[-1,"e"],[1,"_.isE"],[0,"mpty("],[-1,"$"],[0,"mimes) ?"]],"start1":23177,"start2":23177,"length1":23,"length2":26},{"diffs":[[0,") ? "],[-1,"$"],[0,"mimes : "],[-1,"$this->"],[0,"only"]],"start1":23200,"start2":23200,"length1":24,"length2":16},{"diffs":[[0,"Mimes;\r\n"],[-1,"\tif (e"],[1,"\r\n    if (!_.isE"],[0,"mpty("],[-1,"$"],[0,"mimes)) "]],"start1":23216,"start2":23216,"length1":28,"length2":37},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"empty;\r\n"]],"start1":23257,"start2":23257,"length1":17,"length2":16},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"mime == "]],"start1":23277,"start2":23277,"length1":17,"length2":16},{"diffs":[[0,"\t|| "],[-1,"in_array"],[1,"_.contains"],[0,"('all', "],[-1,"$"],[0,"mime"]],"start1":23307,"start2":23307,"length1":25,"length2":26},{"diffs":[[0,"\t|| "],[-1,"in_array"],[1,"_.contains"],[0,"('All', "],[-1,"$"],[0,"mime"]],"start1":23338,"start2":23338,"length1":25,"length2":26},{"diffs":[[0,"\t|| "],[-1,"in_array($"],[1,"_.contains("],[0,"mime, "],[-1,"$"],[0,"mime"]],"start1":23369,"start2":23369,"length1":25,"length2":25},{"diffs":[[0,"\t|| "],[-1,"in_array"],[1,"_.contains"],[0,"(substr("],[-1,"$"],[0,"mime"]],"start1":23399,"start2":23399,"length1":25,"length2":26},{"diffs":[[0," 0, "],[-1,"strpos($mime, "],[1,"mime.indexOf("],[0,"'/')), "],[-1,"$"],[0,"mime"]],"start1":23426,"start2":23426,"length1":30,"length2":28}]],"length":90521,"saved":false}
{"ts":1364850452870,"patch":[[{"diffs":[[0,"ins("],[1,"mime."],[0,"substr("],[-1,"mime, "],[0,"0, m"]],"start1":23410,"start2":23410,"length1":21,"length2":20}]],"length":90520,"saved":false}
{"ts":1364850456471,"patch":[[{"diffs":[[0,"/')), mimes);\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Retu"]],"start1":23443,"start2":23443,"length1":32,"length2":33}]],"length":90521,"saved":false}
{"ts":1364850476045,"patch":[[{"diffs":[[0,"empty;\r\n\t}\r\n"],[1,"    \r\n"],[0,"\treturn mime"]],"start1":23265,"start2":23265,"length1":24,"length2":30}]],"length":90527,"saved":false}
{"ts":1364850506530,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function isReadable"],[1,"ElFinderVolumeDriver.prototype.isReadable = function"],[0,"() {\r\n\t"],[-1,"$"],[1,"var "],[0,"stat = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$this->"],[0,"root"]],"start1":23570,"start2":23570,"length1":68,"length2":88},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"stat"],[-1,"['"],[1,"."],[0,"read"],[-1,"']"],[0,";\r\n}\r\n\r\n"]],"start1":23662,"start2":23662,"length1":29,"length2":25}]],"length":90543,"saved":false}
{"ts":1364850510189,"patch":[[{"diffs":[[0,"tat.read;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":23671,"start2":23671,"length1":24,"length2":25}]],"length":90544,"saved":false}
{"ts":1364850533974,"patch":[[{"diffs":[[0,"\r\n **/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"copyFrom"]],"start1":23795,"start2":23795,"length1":32,"length2":47},{"diffs":[[0,"mAllowed"],[1," = function"],[0,"() {\r\n\tr"]],"start1":23841,"start2":23841,"length1":16,"length2":27},{"diffs":[[0,"n !!"],[-1,"$this->"],[0,"options"],[-1,"['"],[1,"."],[0,"copyFrom"],[-1,"']"],[0,";\r\n}"],[1,";"],[0,"\r\n\r\n"]],"start1":23872,"start2":23872,"length1":38,"length2":29}]],"length":90561,"saved":false}
{"ts":1364850556334,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.path ="],[0," function path($"]],"start1":24028,"start2":24028,"length1":38,"length2":69},{"diffs":[[0,"tion"],[-1," path($"],[1,"("],[0,"hash"]],"start1":24086,"start2":24086,"length1":15,"length2":9},{"diffs":[[0,"urn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_path("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash"]],"start1":24104,"start2":24104,"length1":36,"length2":31}]],"length":90581,"saved":false}
{"ts":1364850581588,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function realpath($"],[1,"ElFinderVolumeDriver.prototype.realpath = function("],[0,"hash"]],"start1":24287,"start2":24287,"length1":34,"length2":59},{"diffs":[[0,"sh) {\r\n\t"],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash);\r\n"]],"start1":24344,"start2":24344,"length1":39,"length2":35},{"diffs":[[0,"urn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path) ? "],[-1,"$"],[0,"path"]],"start1":24383,"start2":24383,"length1":30,"length2":26},{"diffs":[[0,"path : false;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Retu"]],"start1":24405,"start2":24405,"length1":32,"length2":33}]],"length":90599,"saved":false}
{"ts":1364850685834,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function removed"],[1,"ElFinderVolumeDriver.prototype.removed = function"],[0,"() {"]],"start1":24531,"start2":24531,"length1":31,"length2":57},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"removed;"]],"start1":24590,"start2":24590,"length1":23,"length2":21},{"diffs":[[0,".removed;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":24602,"start2":24602,"length1":24,"length2":25}]],"length":90624,"saved":false}
{"ts":1364850702543,"patch":[[{"diffs":[[0,"\r\n **/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"resetRem"]],"start1":24706,"start2":24706,"length1":32,"length2":47},{"diffs":[[0,"tRemoved"],[1," = function"],[0,"() {\r\n\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"removed "]],"start1":24749,"start2":24749,"length1":30,"length2":39},{"diffs":[[0,"moved = "],[-1,"array()"],[1,"[]"],[0,";\r\n}\r\n\r\n"]],"start1":24782,"start2":24782,"length1":23,"length2":18}]],"length":90643,"saved":false}
{"ts":1364850706484,"patch":[[{"diffs":[[0,"ved = [];\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":24784,"start2":24784,"length1":24,"length2":25}]],"length":90644,"saved":false}
{"ts":1364850745614,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function closest($"],[1,"ElFinderVolumeDriver.prototype.closest = function("],[0,"hash, "],[-1,"$"],[0,"attr, "],[-1,"$"],[0,"val)"]],"start1":25076,"start2":25076,"length1":47,"length2":70},{"diffs":[[0,"return ("],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"closestB"]],"start1":25151,"start2":25151,"length1":31,"length2":28},{"diffs":[[0,"ttr("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash), "],[-1,"$"],[0,"attr, "],[-1,"$"],[0,"val)) ? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"encode("],[-1,"$"],[0,"path"]],"start1":25181,"start2":25181,"length1":61,"length2":53}]],"length":90656,"saved":false}
{"ts":1364850749194,"patch":[[{"diffs":[[0,"ath) : false;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Retu"]],"start1":25231,"start2":25231,"length1":32,"length2":33}]],"length":90657,"saved":false}
{"ts":1364850762912,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"file("],[-1,"$"],[0,"hash"]],"start1":25466,"start2":25466,"length1":30,"length2":44}]],"length":90671,"saved":false}
{"ts":1364850772934,"patch":[[{"diffs":[[0,"sh) {\r\n\t"],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash);\r\n"]],"start1":25508,"start2":25508,"length1":39,"length2":35}]],"length":90667,"saved":false}
{"ts":1364850796030,"patch":[[{"diffs":[[0,"return ("],[-1,"$"],[0,"file = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path)) ?"]],"start1":25546,"start2":25546,"length1":37,"length2":33},{"diffs":[[0,") ? "],[-1,"$"],[0,"file : "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setE"]],"start1":25576,"start2":25576,"length1":23,"length2":20},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_FILE_N"]],"start1":25589,"start2":25589,"length1":34,"length2":31}]],"length":90657,"saved":false}
{"ts":1364850830132,"patch":[[{"diffs":[[0,"th').sep"],[-1,";\r\n"],[1,",\r\n    ERRORS = require('../errors');\r\n    "],[0,"\r\nvar El"]],"start1":69,"start2":69,"length1":19,"length2":59}]],"length":90697,"saved":false}
{"ts":1364850866455,"patch":[[{"diffs":[[0,"\r\n\tif (("],[-1,"$"],[0,"file = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path)) !"]],"start1":25672,"start2":25672,"length1":37,"length2":33},{"diffs":[[0,"at(path)) !="],[1,"="],[0," false) {\r\n\t"]],"start1":25694,"start2":25694,"length1":24,"length2":25},{"diffs":[[0,"\r\n\t\tif ("],[-1,"$"],[0,"realpath"]],"start1":25716,"start2":25716,"length1":17,"length2":16},{"diffs":[[0,"\n\t\t\t"],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"realpath"],[-1,"']"],[0," = "],[-1,"$"],[0,"path"]],"start1":25736,"start2":25736,"length1":29,"length2":24},{"diffs":[[0,"\r\n\t\t}\r\n\t\treturn "],[-1,"$"],[0,"file;\r\n\t}\r\n\tretu"]],"start1":25761,"start2":25761,"length1":33,"length2":32},{"diffs":[[0,"e;\r\n\t}\r\n\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":25780,"start2":25780,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_FILE_N"]],"start1":25798,"start2":25798,"length1":34,"length2":31}]],"length":90682,"saved":false}
{"ts":1364853708285,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"dir("],[-1,"$"],[0,"hash, "],[-1,"$"],[1,"resolveLink) {\r\n    "],[0,"reso"]],"start1":26032,"start2":26032,"length1":36,"length2":69},{"diffs":[[0,"Link"],[-1,"="],[1," = "],[0,"false"],[-1,") {"],[1,";"],[0,"\r\n\tif (("],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"hash"]],"start1":26104,"start2":26104,"length1":45,"length2":41}]],"length":90711,"saved":false}
{"ts":1364853721194,"patch":[[{"diffs":[[0,"se) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":26154,"start2":26154,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_DIR_NO"]],"start1":26172,"start2":26172,"length1":34,"length2":31}]],"length":90706,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364853772894,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function driverId"],[1,"ElFinderVolumeDriver.prototype.driverId = function()"],[0," {\r\n"]],"start1":13729,"start2":13729,"length1":32,"length2":60},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"driverId"]],"start1":13789,"start2":13789,"length1":17,"length2":16},{"diffs":[[0,"(options"],[-1,"['"],[1,"."],[0,"attribut"]],"start1":15493,"start2":15493,"length1":18,"length2":17}]],"length":90706,"saved":false}
{"ts":1364853796492,"patch":[[{"diffs":[[0,"\n\r\n\tif ("],[-1,"$"],[0,"resolveL"]],"start1":26217,"start2":26217,"length1":17,"length2":16},{"diffs":[[0,"&& !"],[-1,"empty($dir['"],[1,"_.isUndefined(dir."],[0,"thash"],[-1,"']"],[0,")) {\r\n\t\t"],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"thash"],[-1,"']"],[0,");\r\n"]],"start1":26237,"start2":26237,"length1":67,"length2":64}]],"length":90702,"saved":false}
{"ts":1364853802168,"patch":[[{"diffs":[[0,"false;\r\n"],[1,"    var dir;\r\n"],[0,"\tif ((di"]],"start1":26111,"start2":26111,"length1":16,"length2":30}]],"length":90716,"saved":false}
{"ts":1364853808673,"patch":[[{"diffs":[[0,"s.file(hash)) =="],[1,"="],[0," false) {\r\n\t\tret"]],"start1":26148,"start2":26148,"length1":32,"length2":33}]],"length":90717,"saved":false}
{"ts":1364854263284,"patch":[[{"diffs":[[0,"urn "],[-1,"$"],[0,"dir && "],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"mime"],[-1,"']"],[0," == "]],"start1":26326,"start2":26326,"length1":28,"length2":23},{"diffs":[[0," && "],[-1,"empty($dir['"],[1,"!dir."],[0,"hidden"],[-1,"']"],[0,") \r\n\t\t? "],[-1,"$"],[0,"dir "]],"start1":26360,"start2":26360,"length1":37,"length2":27},{"diffs":[[0,"? dir \r\n\t\t: "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elF"]],"start1":26381,"start2":26381,"length1":31,"length2":29},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_NOT_DI"]],"start1":26395,"start2":26395,"length1":34,"length2":31}]],"length":90697,"saved":false}
{"ts":1364854274817,"patch":[[{"diffs":[[0,"r.hidden"],[-1,") "],[0,"\r\n\t\t? di"]],"start1":26367,"start2":26367,"length1":18,"length2":16}]],"length":90695,"saved":false}
{"ts":1364854341768,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function scandir($hash) {"],[1,"ElFinderVolumeDriver.prototype.scandir = function(hash) {\r\n    var dir"],[0,"\r\n\tif (("],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"dir("],[-1,"$"],[0,"hash"]],"start1":26589,"start2":26589,"length1":67,"length2":101},{"diffs":[[0,"is.dir(hash)) =="],[1,"="],[0," false) {\r\n\t\tret"]],"start1":26679,"start2":26679,"length1":32,"length2":33},{"diffs":[[0,"urn "],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"read"],[-1,"']"],[0,"\r\n\t\t? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"getS"]],"start1":26734,"start2":26734,"length1":33,"length2":27},{"diffs":[[0,"Scandir("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash))\r\n"]],"start1":26760,"start2":26760,"length1":31,"length2":28},{"diffs":[[0,"hash))\r\n\t\t: "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elF"]],"start1":26780,"start2":26780,"length1":31,"length2":29},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":26794,"start2":26794,"length1":34,"length2":31}]],"length":90716,"saved":false}
{"ts":1364854347658,"patch":[[{"diffs":[[0," var dir"],[1,";"],[0,"\r\n\tif (("]],"start1":26655,"start2":26655,"length1":16,"length2":17},{"diffs":[[0,"_DENIED);\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":26824,"start2":26824,"length1":24,"length2":25}]],"length":90718,"saved":false}
{"ts":1364854379305,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.ls ="],[0," function ls($ha"]],"start1":26963,"start2":26963,"length1":38,"length2":67},{"diffs":[[0,"tion"],[-1," ls($"],[1,"("],[0,"hash"]],"start1":27019,"start2":27019,"length1":13,"length2":9},{"diffs":[[0," {\r\n"],[1,"    var dir;\r\n"],[0,"\tif (("],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"dir("],[-1,"$"],[0,"hash"]],"start1":27029,"start2":27029,"length1":33,"length2":43},{"diffs":[[0,"ir(hash)) =="],[1,"="],[0," false || !$"]],"start1":27065,"start2":27065,"length1":24,"length2":25},{"diffs":[[0,"|| !"],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"read"],[-1,"']"],[0,") {\r"]],"start1":27085,"start2":27085,"length1":20,"length2":16}]],"length":90750,"saved":false}
{"ts":1364854398050,"patch":[[{"diffs":[[0,"\n\r\n\t"],[-1,"$"],[1,"var "],[0,"list = "],[-1,"array();\r\n\t$"],[1,"[];\r\n\tvar "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash);\r\n"],[1,"    "],[0,"\r\n\tf"]],"start1":27122,"start2":27122,"length1":58,"length2":60}]],"length":90752,"saved":false}
{"ts":1364854406607,"patch":[[{"diffs":[[0,"nction(hash) {\r\n"],[1,"    var lsDefer = Q.defer();\r\n"],[0,"    var dir;\r\n\ti"]],"start1":27017,"start2":27017,"length1":32,"length2":62}]],"length":90782,"saved":false}
{"ts":1364854497490,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"\tfor"],[1,"    _."],[0,"each"],[-1," ($"],[1,"("],[0,"this"],[-1,"->"],[1,"."],[0,"getScan"],[-1,"d"],[1,"D"],[0,"ir("],[-1,"$"],[0,"path)"],[-1," as $stat) {\r\n\t\tif (empty($"],[1,", function(stat, index, list) {\r\n        if (!"],[0,"stat"],[-1,"['"],[1,"."],[0,"hidden"],[-1,"'])"],[0," && "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"mime"]],"start1":27206,"start2":27206,"length1":95,"length2":106},{"diffs":[[0,"ted("],[-1,"$"],[0,"stat"],[-1,"['"],[1,"."],[0,"mime"],[-1,"']"],[0,")) {\r\n"],[-1,"\t\t\t$list[] = $"],[1,"            list.push("],[0,"stat"],[-1,"['"],[1,"."],[0,"name"],[-1,"'];\r\n\t\t}\r\n\t}"],[1,");\r\n        }\r\n    });"],[0,"\r\n\r\n"]],"start1":27317,"start2":27317,"length1":63,"length2":76},{"diffs":[[0,"urn "],[-1,"$"],[0,"list;\r\n}"],[1,";"],[0,"\r\n\r\n"]],"start1":27397,"start2":27397,"length1":17,"length2":17}]],"length":90806,"saved":false}
{"ts":1364854684614,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\t"],[1,"    "],[0,"return l"],[1,"sDefer.prom"],[0,"is"],[-1,"t"],[1,"e"],[0,";\r\n}"]],"start1":27389,"start2":27389,"length1":20,"length2":34}]],"length":90820,"saved":false}
{"ts":1364854749489,"patch":[[{"diffs":[[0,"\r\n\tvar l"],[-1,"ist"],[1,"s"],[0," = [];\r\n"]],"start1":27153,"start2":27153,"length1":19,"length2":17},{"diffs":[[0,"       l"],[-1,"ist"],[1,"s"],[0,".push(st"]],"start1":27339,"start2":27339,"length1":19,"length2":17},{"diffs":[[0,"\n        }\r\n"],[1,"        if (index > _.size(list) - 1) {\r\n            lsDefer.resolve(ls);\r\n        }\r\n"],[0,"    });\r\n\r\n "]],"start1":27366,"start2":27366,"length1":24,"length2":110}]],"length":90902,"saved":false}
{"ts":1364855053610,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function tree($hash='', $deep=0, $exclude='') {\r\n\t$"],[1,"ElFinderVolumeDriver.prototype.tree = function(hash, deep, exclude) {\r\n    var hash = '';\r\n    var deep = 0;\r\n    var exclude = '';\r\n\tvar "],[0,"path = "],[-1,"$"],[0,"hash ? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash) : "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"root;\r\n"],[1,"    var dir;\r\n    "],[0,"\r\n\tif (("],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path"]],"start1":27899,"start2":27899,"length1":146,"length2":234},{"diffs":[[0,"at(path)) =="],[1,"="],[0," false || $d"]],"start1":28126,"start2":28126,"length1":24,"length2":25},{"diffs":[[0," || "],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"mime"],[-1,"']"],[0," !="],[1,"="],[0," 'di"]],"start1":28145,"start2":28145,"length1":23,"length2":20}]],"length":90988,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364855135540,"patch":[[{"diffs":[[0,"r dir;\r\n"],[1,"    var dirs;\r\n"],[0,"    \r\n"],[-1,""],[0,"\tif ((di"]],"start1":28093,"start2":28093,"length1":22,"length2":37},{"diffs":[[0,"\n\r\n\t"],[-1,"$"],[0,"dirs = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"gettree("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"deep"]],"start1":28213,"start2":28213,"length1":39,"length2":34},{"diffs":[[0,"p > 0 ? "],[-1,"$"],[0,"deep -1 "]],"start1":28246,"start2":28246,"length1":17,"length2":16},{"diffs":[[0,"ep -1 : "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"treeDeep"]],"start1":28256,"start2":28256,"length1":23,"length2":21},{"diffs":[[0,"Deep-1, "],[-1,"$"],[0,"exclude "]],"start1":28273,"start2":28273,"length1":17,"length2":16},{"diffs":[[0,"clude ? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"exclude)"]],"start1":28283,"start2":28283,"length1":31,"length2":28},{"diffs":[[0,");\r\n"],[-1,"\tarray_unshift($dirs, $"],[1,"    dirs.unshift("],[0,"dir)"]],"start1":28318,"start2":28318,"length1":31,"length2":25},{"diffs":[[0,"(dir);\r\n\treturn "],[-1,"$"],[0,"dirs;\r\n}\r\n\r\n/**\r"]],"start1":28338,"start2":28338,"length1":33,"length2":32}]],"length":90984,"saved":false}
{"ts":1364855214743,"patch":[[{"diffs":[[0," dirs;\r\n"],[1,"    var treeDefer = Q.defer();\r\n"],[0,"    \r\n"],[-1,""],[0,"\tif ((di"]],"start1":28108,"start2":28108,"length1":22,"length2":54},{"diffs":[[0,"\r\n\r\n"],[-1,"\tdirs ="],[1,"   "],[0," thi"]],"start1":28244,"start2":28244,"length1":15,"length2":11},{"diffs":[[0,"gettree("],[-1,"path,"],[1,"\r\n        path, \r\n       "],[0," deep > "]],"start1":28257,"start2":28257,"length1":21,"length2":41},{"diffs":[[0,"Deep-1, "],[1,"\r\n        "],[0,"exclude "]],"start1":28321,"start2":28321,"length1":16,"length2":26},{"diffs":[[0,") : null"],[-1,");"],[0,"\r\n"],[1,"    ).then(function(dirs) {\r\n    "],[0,"    dirs"]],"start1":28368,"start2":28368,"length1":20,"length2":51},{"diffs":[[0,"ft(dir);"],[1,"        \r\n    }"],[0,"\r\n\tretur"]],"start1":28425,"start2":28425,"length1":16,"length2":31}]],"length":91088,"saved":false}
{"ts":1364855224653,"patch":[[{"diffs":[[0,"ft(dir);"],[1,"\r\n"],[0,"        "]],"start1":28425,"start2":28425,"length1":16,"length2":18}]],"length":91090,"saved":false}
{"ts":1364855240254,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n    }\r\n\treturn dirs"],[1,"treeDefer.resolve(dirs);\r\n    }\r\n\treturn treeDefer.promise"],[0,";\r\n}"]],"start1":28439,"start2":28439,"length1":29,"length2":66}]],"length":91127,"saved":false}
{"ts":1364855245138,"patch":[[{"diffs":[[0,";\r\n    }"],[1,");"],[0,"\r\n\tretur"]],"start1":28466,"start2":28466,"length1":16,"length2":18}]],"length":91129,"saved":false}
{"ts":1364855304049,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function parents($hash) {"],[1,"ElFinderVolumeDriver.prototype.parents = function(hash) {\r\n    var current;"],[0,"\r\n\tif (("],[-1,"$"],[0,"curr"]],"start1":28678,"start2":28678,"length1":49,"length2":91},{"diffs":[[0,"rrent = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"dir("],[-1,"$"],[0,"hash)) ="]],"start1":28767,"start2":28767,"length1":28,"length2":25},{"diffs":[[0,"is.dir(hash)) =="],[1,"="],[0," false) {\r\n\t\tret"]],"start1":28777,"start2":28777,"length1":32,"length2":33},{"diffs":[[0,"\n\t}\r\n\r\n\t"],[-1,"$"],[1,"var "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash);\r\n"]],"start1":28821,"start2":28821,"length1":39,"length2":39},{"diffs":[[0,";\r\n\t"],[-1,"$"],[1,"var "],[0,"tree = "],[-1,"array()"],[1,"[]"],[0,";\r\n\r"]],"start1":28857,"start2":28857,"length1":23,"length2":21}]],"length":91167,"saved":false}
{"ts":1364855321146,"patch":[[{"diffs":[[0,"nction(hash) {\r\n"],[1,"    var parentsDefer = Q.defer();\r\n    \r\n"],[0,"    var current;"]],"start1":28725,"start2":28725,"length1":32,"length2":73}]],"length":91208,"saved":false}
{"ts":1364855376401,"patch":[[{"diffs":[[0,"le ("],[-1,"$"],[0,"path && "],[-1,"$"],[0,"path !="],[1,"="],[0," "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"root"]],"start1":28924,"start2":28924,"length1":33,"length2":30},{"diffs":[[0,"t) {\r\n\t\t"],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_dirname"]],"start1":28953,"start2":28953,"length1":31,"length2":28},{"diffs":[[0,"= this._dirname("],[-1,"$"],[0,"path);\r\n\t\t$stat "]],"start1":28966,"start2":28966,"length1":33,"length2":32},{"diffs":[[0,"th);\r\n\t\t"],[-1,"$"],[0,"stat = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path);\r\n"]],"start1":28984,"start2":28984,"length1":37,"length2":33},{"diffs":[[0,"f (!"],[-1,"empty($"],[0,"stat"],[-1,"['"],[1,"."],[0,"hidden"],[-1,"'])"],[0," || !"],[-1,"$"],[0,"stat"],[-1,"['"],[1,"."],[0,"read"],[-1,"']"],[0,") {\r"]],"start1":29020,"start2":29020,"length1":48,"length2":33},{"diffs":[[0,"\r\n\t\t"],[-1,"array_"],[1,"tree."],[0,"unshift("],[-1,"$tree, $"],[0,"stat"]],"start1":29077,"start2":29077,"length1":30,"length2":21}]],"length":91173,"saved":false}
{"ts":1364855391080,"patch":[[{"diffs":[[0,"if ("],[-1,"$"],[0,"path !="],[1,"="],[0," "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"root"]],"start1":29104,"start2":29104,"length1":24,"length2":22}]],"length":91171,"saved":false}
{"ts":1364855615766,"patch":[[{"diffs":[[0,"is.root) {\r\n"],[1,"            this.gettree(path, 0).then(function(thisTree) {\r\n                _.each(thisTree, function(dir, index, list) {\r\n                    if (!_.contains(dir, tree))\r\n                });\r\n            });\r\n            _.each(this.gettree(path, 0), function(element, index, list) {\r\n                \r\n            }\r\n"],[0,"\t\t\tforeach ("]],"start1":29119,"start2":29119,"length1":24,"length2":344}]],"length":91491,"saved":false}
{"ts":1364855680783,"patch":[[{"diffs":[[0,", tree))"],[1," {"],[0,"\r\n      "]],"start1":29294,"start2":29294,"length1":16,"length2":18},{"diffs":[[0,"                "],[-1,"});\r\n"],[1,"        tree.push(dir);\r\n      "],[0,"            });\r"]],"start1":29306,"start2":29306,"length1":37,"length2":63},{"diffs":[[0,"                "],[-1,"});\r\n"],[1,"  }\r\n      "],[0,"            _.ea"]],"start1":29349,"start2":29349,"length1":37,"length2":43},{"diffs":[[0,"    "],[-1,"_.each(this.gettree(path, 0), function(element, index, "],[1,"  if (index > _.size("],[0,"list)"],[1," - 1)"],[0," {\r\n"]],"start1":29384,"start2":29384,"length1":68,"length2":39},{"diffs":[[0,"    "],[-1,"\r\n"],[0,"        "],[-1,"    }\r\n\t\t\tforeach ($this->gettree($path, 0) as $dir) {\r\n\t\t\t\tif (!in_array($dir, $tree)) {\r\n\t\t\t\t\t$tree[] = $dir;\r\n\t\t\t\t}\r\n\t\t\t}"],[1,"parentsDefer.resolve(tree ? tree : current);\r\n                    }\r\n                });\r\n            });"],[0,"\r\n\t\t"]],"start1":29435,"start2":29435,"length1":142,"length2":121},{"diffs":[[0,"\t}\r\n"],[-1,"\r\n\t"],[1,"    "],[0,"return "],[-1,"$tree ? $tree : array($current)"],[1,"parentsDefer.promise"],[0,";\r\n}"]],"start1":29559,"start2":29559,"length1":49,"length2":39}]],"length":91465,"saved":false}
{"ts":1364855684656,"patch":[[{"diffs":[[0,"efer.promise;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Crea"]],"start1":29582,"start2":29582,"length1":32,"length2":33}]],"length":91466,"saved":false}
{"ts":1364855924441,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.tmb ="],[0," function tmb($h"]],"start1":29739,"start2":29739,"length1":38,"length2":68},{"diffs":[[0,"tion"],[-1," tmb($"],[1,"("],[0,"hash"]],"start1":29796,"start2":29796,"length1":14,"length2":9},{"diffs":[[0," {\r\n"],[-1,"\t$"],[1,"    var tmbDefer = Q.defer();\r\n\tvar "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash"]],"start1":29806,"start2":29806,"length1":32,"length2":63},{"diffs":[[0,"ash);\r\n\t"],[-1,"$"],[1,"var "],[0,"stat = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path);\r\n"]],"start1":29866,"start2":29866,"length1":37,"length2":37},{"diffs":[[0,"\r\n\r\n"],[-1,"\tif (isset($"],[1,"    if (!"],[0,"stat"],[-1,"['"],[1,"."],[0,"tmb"],[-1,"'])"],[0,") {\r\n"],[-1,"\t\treturn $"],[1,"        tmbDefer.resolve("],[0,"stat"],[-1,"['"],[1,"."],[0,"tmb"],[-1,"']"],[0," == "]],"start1":29901,"start2":29901,"length1":58,"length2":63},{"diffs":[[0,"= \"1\" ? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"createTm"]],"start1":29962,"start2":29962,"length1":23,"length2":21},{"diffs":[[0,"Tmb("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"sta"],[1,"r"],[0,"t) : "],[-1,"$"],[0,"stat"],[-1,"['tmb'];\r\n\t}\r\n\treturn false;"],[1,".tmb);\r\n    } else {\r\n        tmbDefer.reject();\r\n    }"],[0,"\r\n}\r"]],"start1":29981,"start2":29981,"length1":57,"length2":82}]],"length":91550,"saved":false}
{"ts":1364855926518,"patch":[[{"diffs":[[0,");\r\n    }\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":30050,"start2":30050,"length1":24,"length2":25}]],"length":91551,"saved":false}
{"ts":1364855964199,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.size ="],[0," function size($"]],"start1":30191,"start2":30191,"length1":38,"length2":69},{"diffs":[[0,"tion"],[-1," size($"],[1,"("],[0,"hash"]],"start1":30249,"start2":30249,"length1":15,"length2":9},{"diffs":[[0,"\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"countSiz"]],"start1":30263,"start2":30263,"length1":23,"length2":21},{"diffs":[[0,"untSize("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash));\r"]],"start1":30278,"start2":30278,"length1":31,"length2":28}]],"length":91571,"saved":false}
{"ts":1364855968256,"patch":[[{"diffs":[[0,"ecode(hash));\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Open"]],"start1":30292,"start2":30292,"length1":32,"length2":33}]],"length":91572,"saved":false}
{"ts":1364856019548,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.open ="],[0," function open($"]],"start1":30448,"start2":30448,"length1":38,"length2":69},{"diffs":[[0,"tion"],[-1," open($"],[1,"("],[0,"hash"]],"start1":30506,"start2":30506,"length1":15,"length2":9},{"diffs":[[0," {\r\n"],[1,"    var file;\r\n"],[0,"\tif (("],[-1,"$"],[0,"file = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"hash"]],"start1":30516,"start2":30516,"length1":35,"length2":46},{"diffs":[[0,"le(hash)) =="],[1,"="],[0," false\r\n\t|| "]],"start1":30555,"start2":30555,"length1":24,"length2":25},{"diffs":[[0,"se\r\n\t|| "],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"mime"],[-1,"']"],[0," "],[1,"="],[0,"== 'dire"]],"start1":30572,"start2":30572,"length1":30,"length2":27},{"diffs":[[0,"urn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_fopen("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash"]],"start1":30637,"start2":30637,"length1":37,"length2":32},{"diffs":[[0,"), 'rb');\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * "]],"start1":30669,"start2":30669,"length1":24,"length2":25}]],"length":91602,"saved":false}
{"ts":1364856041254,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.close ="],[0," function close("]],"start1":30838,"start2":30838,"length1":38,"length2":70},{"diffs":[[0,"tion"],[-1," close($"],[1,"("],[0,"fp, "],[-1,"$"],[0,"hash"]],"start1":30897,"start2":30897,"length1":21,"length2":13},{"diffs":[[0,"{\r\n\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_fclose("],[-1,"$"],[0,"fp, "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash"]],"start1":30912,"start2":30912,"length1":43,"length2":37}]],"length":91620,"saved":false}
{"ts":1364856045282,"patch":[[{"diffs":[[0,", hash) {\r\n\t"],[1,"return "],[0,"this._fclose"]],"start1":30904,"start2":30904,"length1":24,"length2":31}]],"length":91627,"saved":false}
{"ts":1364856059552,"patch":[[{"diffs":[[0,"ce\r\n"],[-1," * @author Dmitry (dio) Levashov\r\n"],[0," **/"]],"start1":30420,"start2":30420,"length1":42,"length2":8},{"diffs":[[0,"id\r\n"],[-1," * @author Dmitry (dio) Levashov\r\n"],[0," **/"]],"start1":30776,"start2":30776,"length1":42,"length2":8}]],"length":91559,"saved":false}
{"ts":1364856257709,"patch":[[{"diffs":[[0,"Levashov\r\n **/\r\n"],[-1,"public"],[1,"ElFinderVolumeDriver.prototype.mkdir ="],[0," function mkdir("]],"start1":31087,"start2":31087,"length1":38,"length2":70},{"diffs":[[0,"tion"],[-1," mkdir($"],[1,"("],[0,"dst, "],[-1,"$"],[0,"name"]],"start1":31146,"start2":31146,"length1":22,"length2":14},{"diffs":[[0,", name) {\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"commandDisabled("]],"start1":31154,"start2":31154,"length1":39,"length2":37},{"diffs":[[0,"')) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":31197,"start2":31197,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":31215,"start2":31215,"length1":34,"length2":31},{"diffs":[[0,");\r\n\t}\r\n\r\n\tif (!"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"nameAccepted($na"]],"start1":31251,"start2":31251,"length1":39,"length2":37},{"diffs":[[0,"is.nameAccepted("],[-1,"$"],[0,"name)) {\r\n\t\tretu"]],"start1":31269,"start2":31269,"length1":33,"length2":32},{"diffs":[[0,"e)) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":31288,"start2":31288,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_INVALI"]],"start1":31306,"start2":31306,"length1":34,"length2":31},{"diffs":[[0,"\r\n\r\n"],[1,"    var dir;\r\n"],[0,"\tif (("],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"dir("],[-1,"$"],[0,"dst)) =="],[1,"="],[0," fal"]],"start1":31349,"start2":31349,"length1":41,"length2":52},{"diffs":[[0,"se) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":31401,"start2":31401,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_TRGDIR"]],"start1":31419,"start2":31419,"length1":34,"length2":31},{"diffs":[[0,"_NOT_FOUND, '#'."],[-1,"$"],[0,"dst);\r\n\t}\r\n\r\n\tif"]],"start1":31450,"start2":31450,"length1":33,"length2":32}]],"length":91573,"saved":false}
{"ts":1364856335978,"patch":[[{"diffs":[[0,"\t}\r\n\r\n\tif (!"],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"write"],[-1,"']"],[0,") {\r\n\t\tretur"]],"start1":31473,"start2":31473,"length1":37,"length2":33},{"diffs":[[0,"te) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":31492,"start2":31492,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":31510,"start2":31510,"length1":34,"length2":31},{"diffs":[[0,"\n\r\n\t"],[-1,"$"],[1,"var "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"dst);\r\n\t"],[-1,"$"],[0,"dst  = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_joi"]],"start1":31553,"start2":31553,"length1":54,"length2":51},{"diffs":[[0,"s._joinPath("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"name);\r\n\t$st"]],"start1":31598,"start2":31598,"length1":32,"length2":30},{"diffs":[[0,"ame);\r\n\t"],[-1,"$"],[0,"stat = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"dst); \r\n"]],"start1":31617,"start2":31617,"length1":37,"length2":33},{"diffs":[[0,"\r\n\tif (!"],[-1,"empty($"],[0,"stat)"],[-1,")"],[0," { \r\n\t\tr"]],"start1":31648,"start2":31648,"length1":29,"length2":21},{"diffs":[[0,"t) { \r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":31659,"start2":31659,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_EXISTS"]],"start1":31677,"start2":31677,"length1":34,"length2":31},{"diffs":[[0,"S.ERROR_EXISTS, "],[-1,"$"],[0,"name);\r\n\t}\r\n\t$th"]],"start1":31694,"start2":31694,"length1":33,"length2":32},{"diffs":[[0,"S, name);\r\n\t}\r\n\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"clearcache();\r\n\t"]],"start1":31707,"start2":31707,"length1":39,"length2":37},{"diffs":[[0,"rn ("],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_mkdir("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"name"]],"start1":31748,"start2":31748,"length1":38,"length2":33},{"diffs":[[0,"h, name)) ? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path) : fals"]],"start1":31774,"start2":31774,"length1":37,"length2":34},{"diffs":[[0,"ath) : false;\r\n}"],[1,";"],[0,"\r\n\r\n/**\r\n * Crea"]],"start1":31797,"start2":31797,"length1":32,"length2":33}]],"length":91532,"saved":false}
{"ts":1364856413440,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function "],[1,"ElFinderVolumeDriver.prototype."],[0,"mkfile("],[-1,"$"],[0,"dst, "],[-1,"$"],[0,"name"]],"start1":32015,"start2":32015,"length1":38,"length2":51},{"diffs":[[0,", name) {\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"commandDisabled("]],"start1":32060,"start2":32060,"length1":39,"length2":37},{"diffs":[[0,"')) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":32104,"start2":32104,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":32122,"start2":32122,"length1":34,"length2":31},{"diffs":[[0,");\r\n\t}\r\n\r\n\tif (!"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"nameAccepted($na"]],"start1":32158,"start2":32158,"length1":39,"length2":37},{"diffs":[[0,"is.nameAccepted("],[-1,"$"],[0,"name)) {\r\n\t\tretu"]],"start1":32176,"start2":32176,"length1":33,"length2":32},{"diffs":[[0,"e)) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":32195,"start2":32195,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_INVALI"]],"start1":32213,"start2":32213,"length1":34,"length2":31},{"diffs":[[0,"\r\n\r\n"],[1,"    var dir;\r\n"],[0,"\tif (("],[-1,"$"],[0,"dir = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"dir("],[-1,"$"],[0,"dst)) =="],[1,"="],[0," fal"]],"start1":32256,"start2":32256,"length1":41,"length2":52},{"diffs":[[0,"se) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":32308,"start2":32308,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_TRGDIR"]],"start1":32326,"start2":32326,"length1":34,"length2":31},{"diffs":[[0,"R_NOT_FOUND, '#'"],[-1,".$"],[1,"+"],[0,"dst);\r\n\t}\r\n\r\n\t$p"]],"start1":32356,"start2":32356,"length1":34,"length2":33}]],"length":91535,"saved":false}
{"ts":1364856417382,"patch":[[{"diffs":[[0,"UND, '#'"],[-1,"."],[1,"+"],[0,"dst);\r\n\t"]],"start1":31457,"start2":31457,"length1":17,"length2":17}]],"length":91535,"saved":false}
{"ts":1364856490248,"patch":[[{"diffs":[[0,"\t}\r\n"],[1,"    \r\n    var path;"],[0,"\r\n\t"],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"dst)"]],"start1":32380,"start2":32380,"length1":34,"length2":49},{"diffs":[[0,"f (!"],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"write"],[-1,"']"],[0," || !"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"allo"]],"start1":32436,"start2":32436,"length1":33,"length2":27},{"diffs":[[0,"wCreate("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"name)) {"]],"start1":32463,"start2":32463,"length1":24,"length2":22},{"diffs":[[0,"e)) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":32480,"start2":32480,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":32498,"start2":32498,"length1":34,"length2":31},{"diffs":[[0,"\n\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_joinPat"]],"start1":32541,"start2":32541,"length1":35,"length2":31},{"diffs":[[0,"oinPath("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"name))) "]],"start1":32566,"start2":32566,"length1":24,"length2":22},{"diffs":[[0,"))) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":32584,"start2":32584,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_EXISTS"]],"start1":32602,"start2":32602,"length1":34,"length2":31},{"diffs":[[0,"S.ERROR_EXISTS, "],[-1,"$"],[0,"name);\r\n\t}\r\n\r\n\t$"]],"start1":32619,"start2":32619,"length1":33,"length2":32},{"diffs":[[0,"\n\t}\r\n\r\n\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"clearcac"]],"start1":32642,"start2":32642,"length1":23,"length2":21},{"diffs":[[0,"rn ("],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_mkfile("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"name"]],"start1":32675,"start2":32675,"length1":39,"length2":34},{"diffs":[[0,"h, name)) ? "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path) : fals"]],"start1":32702,"start2":32702,"length1":37,"length2":34}]],"length":91515,"saved":false}
{"ts":1364856661514,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function rename($"],[1,"ElFinderVolumeDriver.prototype.rename = function("],[0,"hash, "],[-1,"$"],[0,"name"]],"start1":32929,"start2":32929,"length1":39,"length2":63},{"diffs":[[0,", name) {\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"commandDisabled("]],"start1":32986,"start2":32986,"length1":39,"length2":37},{"diffs":[[0,"')) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":33030,"start2":33030,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":33048,"start2":33048,"length1":34,"length2":31},{"diffs":[[0,");\r\n\t}\r\n\r\n\tif (!"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"nameAccepted($na"]],"start1":33084,"start2":33084,"length1":39,"length2":37},{"diffs":[[0,"is.nameAccepted("],[-1,"$"],[0,"name)) {\r\n\t\tretu"]],"start1":33102,"start2":33102,"length1":33,"length2":32},{"diffs":[[0,"e)) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":33121,"start2":33121,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_INVALI"]],"start1":33139,"start2":33139,"length1":34,"length2":31},{"diffs":[[0,"D_NAME, "],[-1,"$"],[0,"name);\r\n"]],"start1":33170,"start2":33170,"length1":17,"length2":16},{"diffs":[[0,"ME, name);\r\n\t}\r\n"],[1,"    \r\n    var file;"],[0,"\r\n\tif (!($file ="]],"start1":33174,"start2":33174,"length1":32,"length2":51},{"diffs":[[0,"\n\tif (!("],[-1,"$"],[0,"file = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"hash))) "]],"start1":33210,"start2":33210,"length1":37,"length2":33},{"diffs":[[0,"))) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":33239,"start2":33239,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_FILE_N"]],"start1":33257,"start2":33257,"length1":34,"length2":31}]],"length":91533,"saved":false}
{"ts":1364856665665,"patch":[[{"diffs":[[0," var file;\r\n"],[1,"    \r\n"],[0,"\tif (!(file "]],"start1":33199,"start2":33199,"length1":24,"length2":30}]],"length":91539,"saved":false}
{"ts":1364856672736,"patch":[[{"diffs":[[0," file;\r\n"],[-1,"    \r\n"],[0,"\tif (!(f"]],"start1":33203,"start2":33203,"length1":22,"length2":16}]],"length":91533,"saved":false}
{"ts":1364856709375,"patch":[[{"diffs":[[0,"\r\n\r\n"],[1,"    var name;\r\n"],[0,"\tif ("],[-1,"$"],[0,"name == "],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"name"],[-1,"']"],[0,") {\r"]],"start1":33302,"start2":33302,"length1":35,"length2":45},{"diffs":[[0,"{\r\n\t\treturn "],[-1,"$"],[0,"file;\r\n\t}\r\n\r"]],"start1":33345,"start2":33345,"length1":25,"length2":24},{"diffs":[[0,"f (!"],[-1,"empty($"],[0,"file"],[-1,"['"],[1,"."],[0,"locked"],[-1,"'])"],[0,") {\r"]],"start1":33372,"start2":33372,"length1":30,"length2":19},{"diffs":[[0,"ed) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":33385,"start2":33385,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_LOCKED"]],"start1":33403,"start2":33403,"length1":34,"length2":31},{"diffs":[[0,"LOCKED, "],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"name"],[-1,"']"],[0,");\r\n\t}\r\n"]],"start1":33428,"start2":33428,"length1":29,"length2":25}]],"length":91522,"saved":false}
{"ts":1364856805434,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\t$"],[1,"    var "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash"]],"start1":33451,"start2":33451,"length1":32,"length2":35},{"diffs":[[0,"de(hash);\r\n\t"],[-1,"$"],[1,"var "],[0,"dir  = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_dirname($pa"]],"start1":33479,"start2":33479,"length1":39,"length2":40},{"diffs":[[0,"= this._dirname("],[-1,"$"],[0,"path);\r\n\t$stat ="]],"start1":33500,"start2":33500,"length1":33,"length2":32},{"diffs":[[0,";\r\n\t"],[-1,"$"],[1,"var "],[0,"stat = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_joi"]],"start1":33521,"start2":33521,"length1":35,"length2":34},{"diffs":[[0,"s._joinPath("],[-1,"$"],[0,"dir, "],[-1,"$"],[0,"name));\r\n\tif"]],"start1":33549,"start2":33549,"length1":31,"length2":29},{"diffs":[[0,", name));\r\n\tif ("],[-1,"$"],[0,"stat) {\r\n\t\tretur"]],"start1":33564,"start2":33564,"length1":33,"length2":32},{"diffs":[[0,"at) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":33582,"start2":33582,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_EXISTS"]],"start1":33600,"start2":33600,"length1":34,"length2":31},{"diffs":[[0,"EXISTS, "],[-1,"$"],[0,"name);\r\n"]],"start1":33625,"start2":33625,"length1":17,"length2":16},{"diffs":[[0,");\r\n\t}\r\n\r\n\tif (!"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"allowCreate($dir"]],"start1":33637,"start2":33637,"length1":39,"length2":37},{"diffs":[[0,"his.allowCreate("],[-1,"$"],[0,"dir, "],[-1,"$"],[0,"name)) {\r\n\t\tretu"]],"start1":33654,"start2":33654,"length1":39,"length2":37},{"diffs":[[0,"e)) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":33678,"start2":33678,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":33696,"start2":33696,"length1":34,"length2":31},{"diffs":[[0,"\n\t}\r\n\r\n\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"rmTmb("],[-1,"$"],[0,"file); /"]],"start1":33735,"start2":33735,"length1":30,"length2":27},{"diffs":[[0,"f (("],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_move("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"dir, "],[-1,"$"],[0,"name"]],"start1":33826,"start2":33826,"length1":43,"length2":37},{"diffs":[[0,"ame))) {\r\n\t\t"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"clearcache()"]],"start1":33860,"start2":33860,"length1":31,"length2":29},{"diffs":[[0,";\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path);\r\n\t}\r\n"]],"start1":33889,"start2":33889,"length1":37,"length2":34},{"diffs":[[0,"return false;\r\n}"],[-1,""],[0,""],[1,";"],[0,"\r\n\r\n/**\r\n * Crea"]],"start1":33924,"start2":33924,"length1":32,"length2":33}]],"length":91493,"saved":false}
{"ts":1364856941227,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function duplicate($"],[1,"ElFinderVolumeDriver.prototype.duplicate = function("],[0,"hash, "],[-1,"$"],[0,"suffix"],[-1,"="],[1,") {\r\n    suffix = "],[0,"'copy'"],[-1,") {"],[1,";"],[0,"\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"comm"]],"start1":34178,"start2":34178,"length1":72,"length2":109},{"diffs":[[0,"')) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":34309,"start2":34309,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_COPY, "]],"start1":34327,"start2":34327,"length1":34,"length2":31},{"diffs":[[0," '#'"],[-1,".$"],[1,"+"],[0,"hash, "],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERRO"]],"start1":34357,"start2":34357,"length1":26,"length2":22},{"diffs":[[0,"\t}\r\n"],[1,"    var file;"],[0,"\r\n\tif (("],[-1,"$"],[0,"file = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"hash"]],"start1":34396,"start2":34396,"length1":37,"length2":46},{"diffs":[[0,"s.file(hash)) =="],[1,"="],[0," false) {\r\n\t\tret"]],"start1":34431,"start2":34431,"length1":32,"length2":33},{"diffs":[[0,"se) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":34452,"start2":34452,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_COPY, "]],"start1":34470,"start2":34470,"length1":34,"length2":31},{"diffs":[[0,"R_COPY, "],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_FI"]],"start1":34493,"start2":34493,"length1":26,"length2":23},{"diffs":[[0,"\n\t}\r\n\r\n\t"],[-1,"$"],[1,"var "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash);\r\n"]],"start1":34531,"start2":34531,"length1":39,"length2":39},{"diffs":[[0,";\r\n\t"],[-1,"$"],[1,"var "],[0,"dir  = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_dir"]],"start1":34567,"start2":34567,"length1":23,"length2":24},{"diffs":[[0,"= this._dirname("],[-1,"$"],[0,"path);\r\n\t$name ="]],"start1":34580,"start2":34580,"length1":33,"length2":32},{"diffs":[[0,"me(path);\r\n\t"],[-1,"$"],[1,"var "],[0,"name = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"uniqueName($"]],"start1":34593,"start2":34593,"length1":39,"length2":40},{"diffs":[[0,"ame("],[-1,"$"],[0,"dir, "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_bas"]],"start1":34628,"start2":34628,"length1":21,"length2":18},{"diffs":[[0,"s._basename("],[-1,"$"],[0,"path), ' '.$"]],"start1":34640,"start2":34640,"length1":25,"length2":24},{"diffs":[[0,"th), ' '"],[-1,".$"],[1,"+"],[0,"suffix"],[-1,"."],[1,"+"],[0,"' ');\r\n\r"]],"start1":34654,"start2":34654,"length1":25,"length2":24},{"diffs":[[0,"\r\n\tif (!"],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"allowCre"]],"start1":34677,"start2":34677,"length1":23,"length2":21},{"diffs":[[0,"allowCreate("],[-1,"$"],[0,"dir, "],[-1,"$"],[0,"name)) {\r\n\t\t"]],"start1":34690,"start2":34690,"length1":31,"length2":29},{"diffs":[[0,"e)) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":34710,"start2":34710,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":34728,"start2":34728,"length1":34,"length2":31},{"diffs":[[0,"rn ("],[-1,"$"],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"copy("],[-1,"$"],[0,"path, "],[-1,"$"],[0,"dir, "],[-1,"$"],[0,"name"]],"start1":34779,"start2":34779,"length1":42,"length2":36},{"diffs":[[0,"r, name)) =="],[1,"="],[0," false\r\n\t\t? "]],"start1":34808,"start2":34808,"length1":24,"length2":25},{"diffs":[[0,"se\r\n\t\t: "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"stat("],[-1,"$"],[0,"path);\r\n"]],"start1":34836,"start2":34836,"length1":29,"length2":26}]],"length":91502,"saved":false}
{"ts":1364856958145,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"    var name;\r\n"],[0,"\tif "]],"start1":33302,"start2":33302,"length1":23,"length2":8}]],"length":91487,"saved":false}
{"ts":1364856986621,"patch":[[{"diffs":[[0,"(hash, name) {\r\n"],[1,"    var renameDefer = Q.defer();\r\n    \r\n"],[0,"\tif (this.comman"]],"start1":32981,"start2":32981,"length1":32,"length2":72},{"diffs":[[0," var file;\r\n"],[1,"    \r\n"],[0,"\tif (!(file "]],"start1":33239,"start2":33239,"length1":24,"length2":30}]],"length":91533,"saved":false}
{"ts":1364857158979,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n\tif (!(file = this.file(hash))) {\r\n\t\treturn "],[1,"this.file(hash).then(function(file) {\r\n        if (!file) {\r\n            return renameDefer.reject("],[0,"this"]],"start1":33251,"start2":33251,"length1":54,"length2":107},{"diffs":[[0,"UND)"],[1,")"],[0,";\r\n"],[-1,"\t}\r\n\r\n\tif (name == file.name) {\r\n\t\treturn "],[1,"        }\r\n    }).then(function() {\r\n        if (name == file.name) {\r\n            return renameDefer.resolve("],[0,"file"],[1,")"],[0,";\r\n"],[-1,"\t}\r\n\r\n\t"],[1,"        }\r\n        "],[0,"if ("]],"start1":33392,"start2":33392,"length1":67,"length2":149},{"diffs":[[0,".locked) {\r\n"],[-1,"\t\treturn "],[1,"            return renameDefer.reject("],[0,"this.setErro"]],"start1":33546,"start2":33546,"length1":33,"length2":62},{"diffs":[[0,"le.name)"],[1,")"],[0,";\r\n"],[-1,"\t}\r\n\r\n"],[1,"        }\r\n    "],[0,"    var "]],"start1":33633,"start2":33633,"length1":25,"length2":35},{"diffs":[[0,".decode(hash);\r\n"],[-1,"\t"],[1,"        "],[0,"var dir  = this."]],"start1":33679,"start2":33679,"length1":33,"length2":40},{"diffs":[[0,"ame(path);\r\n"],[1,"    "],[0,"\tvar stat = "]],"start1":33724,"start2":33724,"length1":24,"length2":28},{"diffs":[[0,"r, name));\r\n"],[1,"    "],[0,"\tif (stat) {"]],"start1":33779,"start2":33779,"length1":24,"length2":28},{"diffs":[[0,"f (stat) {\r\n"],[1,"    "],[0,"\t\treturn thi"]],"start1":33797,"start2":33797,"length1":24,"length2":28},{"diffs":[[0,"TS, name);\r\n"],[-1,"\t}\r\n\r\n"],[1,"    \t}\r\n    \r\n    "],[0,"\tif (!this.a"]],"start1":33853,"start2":33853,"length1":30,"length2":42},{"diffs":[[0,"(dir, name)) {\r\n"],[1,"    "],[0,"\t\treturn this.se"]],"start1":33905,"start2":33905,"length1":32,"length2":36},{"diffs":[[0,"M_DENIED);\r\n"],[-1,"\t}\r\n\r\n"],[1,"    \t}\r\n    \r\n    "],[0,"\tthis.rmTmb("]],"start1":33964,"start2":33964,"length1":30,"length2":42},{"diffs":[[0,"r move\r\n"],[-1,"\r\n\r\n"],[1,"    \r\n    \r\n    "],[0,"\tif ((pa"]],"start1":34064,"start2":34064,"length1":20,"length2":32},{"diffs":[[0,"e))) {\r\n"],[1,"    "],[0,"\t\tthis.c"]],"start1":34126,"start2":34126,"length1":16,"length2":20},{"diffs":[[0,".clearcache();\r\n"],[1,"    "],[0,"\t\treturn this.st"]],"start1":34144,"start2":34144,"length1":32,"length2":36},{"diffs":[[0,"is.stat(path);\r\n"],[-1,"\t}\r\n"],[1,"    \t}\r\n    "],[0,"\treturn false;\r\n"]],"start1":34175,"start2":34175,"length1":36,"length2":44},{"diffs":[[0,"\treturn false;\r\n"],[1,"    })\r\n\r\n\r\n"],[0,"};\r\n\r\n/**\r\n * Cr"]],"start1":34203,"start2":34203,"length1":32,"length2":44}]],"length":91794,"saved":false}
{"ts":1364857401319,"patch":[[{"diffs":[[0,"ode(hash);\r\n"],[1,"        return Q.resolve(path);\r\n    }).then(function(path) {\r\n        return this._dirname(path).then(function(dir) {\r\n            return Q.resolve(dir);\r\n        })\r\n    })\r\n    .then(function(dir) {\r\n        var stat = this.stat()\r\n    })\r\n\r\n"],[0,"        var "]],"start1":33683,"start2":33683,"length1":24,"length2":269},{"diffs":[[0,"path);\r\n    "],[-1,"\t"],[1,"    "],[0,"var stat = t"]],"start1":33973,"start2":33973,"length1":25,"length2":28},{"diffs":[[0,"false;\r\n"],[-1,"    })\r\n\r\n"],[0,"\r\n};\r\n\r\n"]],"start1":34459,"start2":34459,"length1":26,"length2":16}]],"length":92032,"saved":false}
{"ts":1364857452766,"patch":[[{"diffs":[[0,"var "],[-1,"stat"],[1,"pth"],[0," = this."],[-1,"stat()\r\n    })\r\n\r\n        var dir  = this._dirname(path);"],[1,"_joinPath(dir, name);        \r\n    })\r\n"],[0,"\r\n  "]],"start1":33906,"start2":33906,"length1":77,"length2":58}]],"length":92013,"saved":false}
{"ts":1364857487620,"patch":[[{"diffs":[[0,", name);"],[1,"\r\n"],[0,"        "],[1,"return this.stat(pth);"],[0,"\r\n    })"]],"start1":33934,"start2":33934,"length1":24,"length2":48}]],"length":92037,"saved":false}
{"ts":1364857558825,"patch":[[{"diffs":[[0,"stat(pth);\r\n"],[1,"    }).then(function(stat) {\r\n        if (stat) {\r\n            renameDefer.reject(this.setError(ERRORS.ERROR_EXISTS, name));\r\n        }\r\n"],[0,"    })\r\n\r\n  "]],"start1":33964,"start2":33964,"length1":24,"length2":161}]],"length":92174,"saved":false}
{"ts":1364857603454,"patch":[[{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"})\r\n\r\n        var stat = this.stat(this._joinPath(dir, name));\r\n    \tif (stat) {\r\n    \t\treturn this.setError(ERRORS.ERROR_EXISTS, name);\r\n    \t"],[1,"return;\r\n        "],[0,"}\r\n    "],[-1,"\r\n"],[0,"    "],[-1,"\t"],[0,"if ("]],"start1":34106,"start2":34106,"length1":172,"length2":40},{"diffs":[[0,"\r\n    \t}"],[-1,"\r\n"],[0,"    "],[1,"    \r\n    })\r\n\r\n\r\n    \r\n"],[0,"\r\n    \tt"]],"start1":34232,"start2":34232,"length1":22,"length2":44}]],"length":92064,"saved":false}
{"ts":1364857627263,"patch":[[{"diffs":[[0," var file;\r\n"],[1,"    var dir;\r\n"],[0,"    this.fil"]],"start1":33239,"start2":33239,"length1":24,"length2":38}]],"length":92078,"saved":false}
{"ts":1364857643865,"patch":[[{"diffs":[[0,").then(function("],[-1,"dir) {"],[1,"thisDir) {\r\n            dir = thisDir;"],[0,"\r\n            re"]],"start1":33805,"start2":33805,"length1":38,"length2":70}]],"length":92110,"saved":false}
{"ts":1364857650081,"patch":[[{"diffs":[[0,"\r\n        })"],[1,";"],[0,"\r\n    })\r\n  "]],"start1":33895,"start2":33895,"length1":24,"length2":25}]],"length":92111,"saved":false}
{"ts":1364857658782,"patch":[[{"diffs":[[0,"\r\n    \t}"],[-1,"        "],[0,"\r\n    })"]],"start1":34279,"start2":34279,"length1":24,"length2":16}]],"length":92103,"saved":false}
{"ts":1364857752524,"patch":[[{"diffs":[[0,");\r\n    \t}\r\n"],[1,"    }).then(this.rmTmb(file))\r\n    .then(function() {\r\n        return this._move(path, dir, name)\r\n    }).then(function(path) {\r\n        \r\n"],[0,"    })\r\n\r\n\r\n"]],"start1":34277,"start2":34277,"length1":24,"length2":163}]],"length":92242,"saved":false}
{"ts":1364857839023,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n    })\r\n\r\n\r\n    \r\n\r\n"],[1,"if (path) {\r\n        "],[0,"    "],[-1,"\t"],[0,"this."],[-1,"rmTmb(file); // remove old name tmbs, we cannot do this after dir move"],[1,"clearcache();\r\n            return this.stat(path);"],[0,"\r\n    "],[-1,"\r\n"],[0,"    "],[1,"}"],[0,"\r\n    "],[-1,"\tif ((path = this._move(path, dir, name))) {\r\n    \t\tthis.clearcache();\r\n    \t\treturn this.stat(path);\r\n    \t}\r\n    \treturn false;\r\n"],[1,"    return false;\r\n    }).then(function(stat) {\r\n        Q.resolve(stat);\r\n    }, function() {\r\n        Q.reject();\r\n    });"],[0,"\r\n};"]],"start1":34422,"start2":34422,"length1":259,"length2":229}]],"length":92212,"saved":false}
{"ts":1364858000951,"patch":[[{"diffs":[[0," {\r\n    "],[-1,"\t\t"],[1,"        "],[0,"return t"]],"start1":34222,"start2":34222,"length1":18,"length2":24},{"diffs":[[0,"M_DENIED);\r\n    "],[-1,"\t"],[1,"    "],[0,"}\r\n    }).then(t"]],"start1":34275,"start2":34275,"length1":33,"length2":36}]],"length":92221,"saved":false}
{"ts":1364858006334,"patch":[[{"diffs":[[0,"r, name)"],[1,";"],[0,"\r\n    })"]],"start1":34387,"start2":34387,"length1":16,"length2":17}]],"length":92222,"saved":false}
{"ts":1364858547423,"patch":[[{"diffs":[[0," suffix) {\r\n"],[1,"    var duplicateDefer = Q.defer();\r\n"],[0,"    suffix ="]],"start1":34959,"start2":34959,"length1":24,"length2":61}]],"length":92259,"saved":false}
{"ts":1364858566866,"patch":[[{"diffs":[[0,"Q.defer();\r\n"],[1,"    if (!suffix) {\r\n    "],[0,"    suffix ="]],"start1":34996,"start2":34996,"length1":24,"length2":48},{"diffs":[[0,"copy';\r\n"],[1,"    }\r\n"],[0,"\tif (thi"]],"start1":35046,"start2":35046,"length1":16,"length2":23}]],"length":92290,"saved":false}
{"ts":1364858616198,"patch":[[{"diffs":[[0,"\n    var file;\r\n"],[1,"    this.file(hash).then(function(file) {\r\n        if (file === false) {\r\n            duplicateDefer.reject(this.setError(ERRORS.ERROR_COPY, ERRORS.ERROR_FILE_NOT_FOUND));\r\n        }\r\n    })\r\n"],[0,"\tif ((file = thi"]],"start1":35187,"start2":35187,"length1":32,"length2":224}]],"length":92482,"saved":false}
{"ts":1364858633680,"patch":[[{"diffs":[[0,"r = Q.defer();\r\n"],[1,"    var path;\r\n"],[0,"    if (!suffix)"]],"start1":34992,"start2":34992,"length1":32,"length2":47},{"diffs":[[0,"  })"],[-1,"\r\n\tif ((file = this.file(hash)) === false) {\r\n\t\treturn this.setError(ERRORS.ERROR_COPY, ERRORS.ERROR_FILE_NOT_FOUND);\r\n\t}"],[1,".then(function() {\r\n        \r\n    })"],[0,"\r\n\r\n"]],"start1":35404,"start2":35404,"length1":129,"length2":44}]],"length":92412,"saved":false}
{"ts":1364858737308,"patch":[[{"diffs":[[0," var path;\r\n"],[1,"    var dir;\r\n    var name;\r\n"],[0,"    if (!suf"]],"start1":35011,"start2":35011,"length1":24,"length2":53},{"diffs":[[0,"    "],[-1,"\r\n    })\r\n\r\n\tvar "],[0,"path"]],"start1":35461,"start2":35461,"length1":25,"length2":8},{"diffs":[[0,"ecode(hash);"],[1,"\r\n    }).then(this._dirname(path))\r\n    .then(function(dr) {\r\n        dir = dr;\r\n    }).then(this.uniqueName(dir, this._basename(path), ' ' + suffix + ' '))\r\n    \r\n\r\n\tvar"],[0,"\r\n\tvar dir  "]],"start1":35478,"start2":35478,"length1":24,"length2":194}]],"length":92594,"saved":false}
{"ts":1364858985634,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n\r\n\tvar\r\n\tvar dir  = this._dirname(path);\r\n\tvar name = this.uniqueName(dir, this._basename(path), ' '+suffix+' ');\r\n\r\n\tif (!this.allowCreate(dir, name)) {\r\n\t\treturn "],[1,".then(function(nme) {\r\n        name = nme;\r\n        \r\n        if (!this.allowCreate(dir, name)) {\r\n          return duplicateDefer.reject("],[0,"this"]],"start1":35648,"start2":35648,"length1":174,"length2":146},{"diffs":[[0,"ROR_PERM_DENIED)"],[1,")"],[0,";\r\n"],[-1,"\t}"],[1,"        }\r\n    }).then(this.copy(path, dir, name))\r\n    .then(function(path) {\r\n        if (!path) {\r\n            duplicateDefer.reject();\r\n        } else {\r\n            duplicateDefer.resolve(this.stat(path))\r\n        }\r\n    });"],[0,"\r\n\r\n\treturn (pat"]],"start1":35813,"start2":35813,"length1":37,"length2":265}]],"length":92794,"saved":false}
{"ts":1364859037622,"patch":[[{"diffs":[[0,"            "],[-1,"duplicateDefer"],[1,"return Q"],[0,".reject();\r\n"]],"start1":35935,"start2":35935,"length1":38,"length2":32},{"diffs":[[0,"   }\r\n    })"],[-1,";"],[1,".then(function() {\r\n        duplicateDefer.resolve(t)\r\n    }, function() {\r\n        duplicateDefer.reject();\r\n    })"],[0,"\r\n\r\n\treturn "]],"start1":36043,"start2":36043,"length1":25,"length2":140}]],"length":92903,"saved":false}
{"ts":1364859064925,"patch":[[{"diffs":[[0,"       }\r\n    })"],[1,".then(this.stat(path))\r\n    "],[0,".then(function()"]],"start1":36039,"start2":36039,"length1":32,"length2":60}]],"length":92931,"saved":false}
{"ts":1364859070581,"patch":[[{"diffs":[[0,"resolve("],[-1,"t"],[1,"path"],[0,")\r\n    }"]],"start1":36126,"start2":36126,"length1":17,"length2":20}]],"length":92934,"saved":false}
{"ts":1364859078661,"patch":[[{"diffs":[[0," .then(function("],[1,"stat"],[0,") {\r\n        dup"]],"start1":36082,"start2":36082,"length1":32,"length2":36},{"diffs":[[0,"resolve("],[-1,"p"],[1,"st"],[0,"at"],[-1,"h"],[0,")\r\n    }"]],"start1":36130,"start2":36130,"length1":20,"length2":20}]],"length":92938,"saved":false}
{"ts":1364859093002,"patch":[[{"diffs":[[0,"urn "],[-1,"(path = this.copy(path, dir, name)) === false\r\n\t\t? false\r\n\t\t: this.stat(path)"],[1,"duplicateDefer.promise"],[0,";\r\n}"]],"start1":36214,"start2":36214,"length1":85,"length2":30}]],"length":92883,"saved":false}
{"ts":1364859126252,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function upload($"],[1,"ElFinderVolumeDriver.prototype.upload = function("],[0,"fp, "],[-1,"$"],[0,"dst, "],[-1,"$"],[0,"name, "],[-1,"$"],[0,"tmpn"]],"start1":36659,"start2":36659,"length1":50,"length2":72},{"diffs":[[0,"mpname) {\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"commandDisabled("]],"start1":36728,"start2":36728,"length1":39,"length2":37},{"diffs":[[0,"')) {\r\n\t\treturn "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":36772,"start2":36772,"length1":39,"length2":37},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":36790,"start2":36790,"length1":34,"length2":31}]],"length":92898,"saved":false}
{"ts":1364859414335,"patch":[[{"diffs":[[0,"M_DENIED);\r\n\t}\r\n"],[1,"    "],[0,"\r\n\tif (($dir = $"]],"start1":36818,"start2":36818,"length1":32,"length2":36}]],"length":92902,"saved":false}
{"ts":1364859418465,"patch":[[{"diffs":[[0,"me, tmpname) {\r\n"],[1,"    \r\n"],[0,"\tif (this.comman"]],"start1":36723,"start2":36723,"length1":32,"length2":38},{"diffs":[[0,"\r\n\t}\r\n    \r\n"],[1,"    \r\n"],[0,"\tif (($dir ="]],"start1":36834,"start2":36834,"length1":24,"length2":30}]],"length":92914,"saved":false}
{"ts":1364859426143,"patch":[[{"diffs":[[0,"ame) {\r\n    "],[1,"var uploadDefer = Q.defer();"],[0,"\r\n\tif (this."]],"start1":36731,"start2":36731,"length1":24,"length2":52}]],"length":92942,"saved":false}
{"ts":1364859493742,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"this.dir(dst)\r\n    .then(function(dir) {\r\n        if (!dir) {\r\n            return uploadDefer.reject(this.setError(ERRORS.ERROR_TRGDIR_NOT_FOUND, '#'+dst));\r\n        }\r\n    })"],[0,"\r\n\tif (($dir"]],"start1":36866,"start2":36866,"length1":24,"length2":199}]],"length":93117,"saved":false}
{"ts":1364859586021,"patch":[[{"diffs":[[0,");\r\n\t}\r\n    "],[1,"var dir;"],[0,"\r\n"],[-1,""],[0,"    this.dir"]],"start1":36860,"start2":36860,"length1":26,"length2":34},{"diffs":[[0,".then(function(d"],[-1,"i"],[0,"r) {\r\n        if"]],"start1":36905,"start2":36905,"length1":33,"length2":32},{"diffs":[[0,"  if (!d"],[-1,"i"],[0,"r) {\r\n  "]],"start1":36933,"start2":36933,"length1":17,"length2":16},{"diffs":[[0,"'#'+dst));\r\n"],[1,"        } else {\r\n            dir = dr;\r\n            return dir;\r\n        }\r\n    }).then(function() {\r\n        if (!dir.write) {\r\n            return uploadDefer.reject(this.setError(ERRORS.ERROR_PERM_DENIED, '#'+dst));\r\n"],[0,"        }\r\n "]],"start1":37030,"start2":37030,"length1":24,"length2":244}]],"length":93343,"saved":false}
{"ts":1364859636813,"patch":[[{"diffs":[[0,"M_DENIED"],[-1,", '#'+dst"],[0,"));\r\n   "]],"start1":37240,"start2":37240,"length1":25,"length2":16},{"diffs":[[0,"  })"],[-1,"\r\n\tif (($dir = $this->dir($dst)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t}\r\n\r\n\tif (!$dir['write']) {\r\n\t\treturn $"],[1,".then(this.nameAccepted(name))\r\n    .then(function(accepted)) {\r\n        if (!accepted) {\r\n            return uploadDefer.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setE"]],"start1":37266,"start2":37266,"length1":171,"length2":142},{"diffs":[[0,"ror("],[-1,"elFinder::ERROR_PERM_DENIED);\r\n\t"],[1,"ERRORS.ERROR_INVALID_NAME));\r\n        }\r\n    "],[0,"}\r\n\r"]],"start1":37409,"start2":37409,"length1":40,"length2":53}]],"length":93318,"saved":false}
{"ts":1364859868115,"patch":[[{"diffs":[[0,"\r\n    var dir;\r\n"],[1,"    var mime;\r\n"],[0,"    this.dir(dst"]],"start1":36866,"start2":36866,"length1":32,"length2":47},{"diffs":[[0,"ccepted)"],[-1,")"],[0," {\r\n    "]],"start1":37337,"start2":37337,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"}\r\n\r\n\tif (!$this->nameAccepted($name)) {\r\n\t\treturn $this->setError(elFinder::ERROR_INVALID_NAME);\r\n\t}"],[1,"    return Q.resolve();\r\n    }).then(this.mimeDetect())\r\n    .then(function(detect) {\r\n    })"],[0,"\r\n\r\n"]],"start1":37468,"start2":37468,"length1":109,"length2":101}]],"length":93324,"saved":false}
{"ts":1364860010483,"patch":[[{"diffs":[[0,"(detect) {\r\n"],[1,"        return this.mimetype(detect == 'internal' ? name : tmpname, name);\r\n    }).then(function(mime) {\r\n        if (mime == 'unknown' && this.mimeDetect == 'internal') {\r\n            mime = ElFinderVolumeDriver.mimetypeInternalDetect(name);            \r\n        }\r\n"],[0,"    })\r\n\r\n\t$"]],"start1":37547,"start2":37547,"length1":24,"length2":291}]],"length":93591,"saved":false}
{"ts":1364860024671,"patch":[[{"diffs":[[0,"   }\r\n    })"],[1,".then(function() {\r\n        \r\n    });"],[0,"\r\n\r\n\t$mime ="]],"start1":37820,"start2":37820,"length1":24,"length2":61}]],"length":93628,"saved":false}
{"ts":1364860103107,"patch":[[{"diffs":[[0," var mime;\r\n"],[1,"    var allow;\r\n    var deny;\r\n"],[0,"    this.dir"]],"start1":36885,"start2":36885,"length1":24,"length2":55},{"diffs":[[0,"    "],[-1,"\r\n    });\r\n\r\n\t$mime"],[1,"allow"],[0," = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"mime"],[-1,"type($this->mimeDetect == 'internal' ? $name : $tmpname, $name"],[1,"Accepted(mime, this.uploadAllow, null"],[0,");"],[-1," "],[0,"\r\n"],[-1,"\tif ($mime == 'unknown' && $this->mimeDetect == 'internal') {\r\n\t\t$mime = elFinderVolumeDriver::mimetypeInternalDetect($name);\r\n\t}"],[1,"        \r\n    });"],[0,"\r\n\r\n"]],"start1":37887,"start2":37887,"length1":237,"length2":83}]],"length":93505,"saved":false}
{"ts":1364860126547,"patch":[[{"diffs":[[0," deny;\r\n"],[1,"    var upload;\r\n"],[0,"    this"]],"start1":36920,"start2":36920,"length1":16,"length2":33},{"diffs":[[0,");\r\n        "],[1,"deny = this.mimeAccepted(mime, this.uploadDeny, null);\r\n        upload = true;"],[0,"\r\n    });\r\n\r"]],"start1":37962,"start2":37962,"length1":24,"length2":102}]],"length":93600,"saved":false}
{"ts":1364860255219,"patch":[[{"diffs":[[0,"ad = true;\r\n"],[1,"        if(this.uploadOrder[0].toLowerCase() == 'allow') {\r\n            upload = false;\r\n            if (!deny && allow) {\r\n                upload = true;\r\n            }\r\n        } else {\r\n            upload = true;\r\n            if (deny && !allow) {\r\n                upload = false;\r\n            }\r\n        }\r\n        if (!upload) {\r\n            return uploadDefer.reject(this.setError(ERRORS.ERROR_UPLOAD_FILE_MIME));\r\n        }\r\n"],[0,"    });\r\n\r\n\t"]],"start1":38042,"start2":38042,"length1":24,"length2":456}]],"length":94032,"saved":false}
{"ts":1364860303858,"patch":[[{"diffs":[[0,"));\r\n        }\r\n"],[1,"        \r\n        if (this.uploadMaxSize > 0 && filesize(tmpname) > this.uploadMaxSize) {\r\n            return uploadDefer.reject(this.setError(ERRORS.ERROR_UPLOAD_FILE_SIZE));\r\n        }\r\n"],[0,"    });\r\n\r\n\t// l"]],"start1":38470,"start2":38470,"length1":32,"length2":220}]],"length":94220,"saved":false}
{"ts":1364860312751,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\t// logic based on http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#order\r\n\t$allow  = $this->mimeAccepted($mime, $this->uploadAllow, null);\r\n\t$deny   = $this->mimeAccepted($mime, $this->uploadDeny,  null);\r\n\t$upload = true; // default to allow\r\n\tif (strtolower($this->uploadOrder[0]) == 'allow') { // array('allow', 'deny'), default is to 'deny'\r\n\t\t$upload = false; // default is deny\r\n\t\tif (!$deny && ($allow === true)) { // match only allow\r\n\t\t\t$upload = true;\r\n\t\t}// else (both match | no match | match only deny) { deny }\r\n\t} else { // array('deny', 'allow'), default is to 'allow' - this is the default rule\r\n\t\t$upload = true; // default is allow\r\n\t\tif (($deny === true) && !$allow) { // match only deny\r\n\t\t\t$upload = false;\r\n\t\t} // else (both match | no match | match only allow) { allow }\r\n\t}\r\n\tif (!$upload) {\r\n\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_MIME);\r\n\t}\r\n\r\n\tif ($this->uploadMaxSize > 0 && filesize($tmpname) > $this->uploadMaxSize) {\r\n\t\treturn $this->setError(elFinder::ERROR_UPLOAD_FILE_SIZE);\r\n\t}\r\n\r\n"],[0,"\t$ds"]],"start1":38681,"start2":38681,"length1":1048,"length2":8}]],"length":93180,"saved":false}
{"ts":1364860358073,"patch":[[{"diffs":[[0,"pload;\r\n    "],[1,"var dstpath\r\n\tvar test;\r\n    var file;\r\n\r\n"],[0,"this.dir(dst"]],"start1":36937,"start2":36937,"length1":24,"length2":66}]],"length":93222,"saved":false}
{"ts":1364860362629,"patch":[[{"diffs":[[0,"ile;\r\n\r\n"],[1,"    "],[0,"this.dir"]],"start1":36983,"start2":36983,"length1":16,"length2":20},{"diffs":[[0,"   }\r\n    })"],[-1,";"],[1,".then"],[0,"\r\n\r\n\t$dstpat"]],"start1":38714,"start2":38714,"length1":25,"length2":29}]],"length":93230,"saved":false}
{"ts":1364860528734,"patch":[[{"diffs":[[0," }).then"],[1,"(function() {\r\n        dstpath = this.decode(dst);\r\n        test = this._joinPath(dstpath, name);\r\n    }).then(this.stat(test))\r\n    .then(function(file) {\r\n        this.clearCache();\r\n        \r\n        if (file) { // file exists.\r\n            if (this.options.uploadOverwrite); {\r\n                if (!file.write) {\r\n                    return uploadDefer.reject(this.setError(ERRORS.ERROR_PERM_DENIED));\r\n                } else if (file.mime == 'directory') {\r\n                    return uploadDefer.reject(this.setError(ERRORS.ERROR_NOT_REPLACE, name));\r\n                }\r\n                this.remove(test);\r\n            } else {\r\n                name = this.uniqueName(dstpath, name, '-', false);\r\n            }\r\n        }\r\n    })"],[0,"\r\n\r\n\t$ds"]],"start1":38723,"start2":38723,"length1":16,"length2":751}]],"length":93965,"saved":false}
{"ts":1364860542989,"patch":[[{"diffs":[[0,"erwrite)"],[-1,";"],[0," {\r\n    "]],"start1":39000,"start2":39000,"length1":17,"length2":16}]],"length":93964,"saved":false}
{"ts":1364860556029,"patch":[[{"diffs":[[0,"})\r\n"],[-1,"\r\n\t$dstpath = $this->decode($dst);\r\n\t$test    = $this->_joinPath($dstpath, $name);\r\n\r\n\t$file = $this->stat($test);\r\n\t$this->clearcache();\r\n\r\n\tif ($file) { // file exists\r\n\t\tif ($this->options['uploadOverwrite']) {\r\n\t\t\tif (!$file['write']) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t\t\t} elseif ($file['mime'] == 'directory') {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $name);\r\n\t\t\t} \r\n\t\t\t$this->remove($test);\r\n\t\t} else {\r\n\t\t\t$name = $this->uniqueName($dstpath, $name, '-', false);\r\n\t\t}\r\n\t}\r\n"],[1,"    "],[0,"\r\n\t$"]],"start1":39463,"start2":39463,"length1":533,"length2":12}]],"length":93443,"saved":false}
{"ts":1364860645761,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        stat = {\r\n            'mime': mime,\r\n            'width': 0,\r\n            'height': 0,\r\n            'size': filesize(tmpname)\r\n        }\r\n"],[0,"    })\r\n    "]],"start1":39447,"start2":39447,"length1":24,"length2":180}]],"length":93599,"saved":false}
{"ts":1364860650987,"patch":[[{"diffs":[[0,"name)\r\n        }"],[1,";\r\n        \r\n        "],[0,"\r\n    })\r\n    \r\n"]],"start1":39597,"start2":39597,"length1":32,"length2":53}]],"length":93620,"saved":false}
{"ts":1364860804482,"patch":[[{"diffs":[[0,"r file;\r"],[1,"\n    var stat;\r"],[0,"\n\r\n    t"]],"start1":36980,"start2":36980,"length1":16,"length2":31},{"diffs":[[0,"        "],[1,"var s = getimagesize(tmpname);\r\n        if (mime.indexOf('image') === 0 && s) {\r\n            stat.width = s[0];\r\n            stat.height = s[1];\r\n        }\r\n        return Q.resolve();\r\n    }).then(function() {\r\n        return this.stat()"],[0,"\r\n    }"],[-1,")"],[0,"\r\n    \r\n"]],"start1":39641,"start2":39641,"length1":24,"length2":261}]],"length":93872,"saved":false}
{"ts":1364860912069,"patch":[[{"diffs":[[0,"solve();\r\n    })"],[1,".then(this._save(fp, dstpath, name, stat))\r\n    "],[0,".then(function()"]],"start1":39825,"start2":39825,"length1":32,"length2":80},{"diffs":[[0," .then(function("],[1,"path"],[0,") {\r\n        ret"]],"start1":39888,"start2":39888,"length1":32,"length2":36},{"diffs":[[0,"urn "],[-1,"this.stat()\r\n    }"],[1,"Q.resolve(this.stat(path));\r\n    }, function() {\r\n        return Q.reject();\r\n    });"],[0,"\r\n  "]],"start1":39924,"start2":39924,"length1":26,"length2":93}]],"length":93991,"saved":false}
{"ts":1364860941392,"patch":[[{"diffs":[[0,"\n        return "],[-1,"Q"],[1,"uploadDefer"],[0,".resolve();\r\n   "]],"start1":39805,"start2":39805,"length1":33,"length2":43},{"diffs":[[0,"\n        return "],[-1,"Q"],[1,"uploadDefer"],[0,".resolve(this.st"]],"start1":39922,"start2":39922,"length1":33,"length2":43},{"diffs":[[0,"urn "],[-1,"Q.reject();\r\n    });\r\n    \r\n\t$stat = array(\r\n\t\t'mime'   : $mime, \r\n\t\t'width'  : 0, \r\n\t\t'height' : 0, \r\n\t\t'size'   : filesize($tmpname));\r\n\r\n\t// $w = $h = 0;\r\n\tif (strpos($mime, 'image') === 0 && ($s = getimagesize($tmpname))) {\r\n\t\t$stat['width'] = $s[0];\r\n\t\t$stat['height'] = $s[1];\r\n\t}\r\n\t// $this->clearcache();\r\n\tif (($path = $this->_save($fp, $dstpath, $name, $stat)) == false) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\r\n\treturn $this->stat($path)"],[1,"uploadDefer.reject();\r\n    });\r\n\r\n\treturn "],[0,";\r\n}"]],"start1":40009,"start2":40009,"length1":445,"length2":50}]],"length":93616,"saved":false}
{"ts":1364860945613,"patch":[[{"diffs":[[0,"\treturn "],[1,"uploadDefer.promise"],[0,";\r\n}\r\n\r\n"]],"start1":40047,"start2":40047,"length1":16,"length2":35}]],"length":93635,"saved":false}
{"ts":1364860951409,"patch":[[{"diffs":[[0,"     return "],[-1,"uploadDefer"],[1,"Q"],[0,".resolve(thi"]],"start1":39926,"start2":39926,"length1":35,"length2":25}]],"length":93625,"saved":false}
{"ts":1364860955749,"patch":[[{"diffs":[[0,"\n        return "],[-1,"Q"],[1,"uploadDefer"],[0,".resolve(this.st"]],"start1":39922,"start2":39922,"length1":33,"length2":43}]],"length":93635,"saved":false}
{"ts":1364861005898,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function paste($volume"],[1,"ElFinderVolumeDriver.prototype.paste = function(vol"],[0,", "],[-1,"$"],[0,"src, "],[-1,"$"],[0,"dst, "],[-1,"$"],[1,"rmSrc) {\r\n    "],[0,"rmSr"]],"start1":40354,"start2":40354,"length1":52,"length2":85},{"diffs":[[0,"alse"],[-1,") {"],[1,";"],[0,"\r\n\t"],[-1,"$"],[0,"err = "],[-1,"$"],[0,"rmSrc ? "],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERRO"]],"start1":40444,"start2":40444,"length1":40,"length2":33},{"diffs":[[0,"_MOVE : "],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_CO"]],"start1":40478,"start2":40478,"length1":26,"length2":23}]],"length":93658,"saved":false}
{"ts":1364861010567,"patch":[[{"diffs":[[0,"alse;\r\n\t"],[1,"var "],[0,"err = rm"]],"start1":40444,"start2":40444,"length1":16,"length2":20}]],"length":93662,"saved":false}
{"ts":1364861029802,"patch":[[{"diffs":[[0,", rmSrc) {\r\n"],[1,"    var pasteDefer = Q.defer();\r\n"],[0,"    rmSrc = "]],"start1":40419,"start2":40419,"length1":24,"length2":57},{"diffs":[[0,"PY;\r\n\r\n\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"commandDisab"]],"start1":40538,"start2":40538,"length1":31,"length2":29}]],"length":93693,"saved":false}
{"ts":1364861055419,"patch":[[{"diffs":[[0,"e')) {\r\n"],[-1,"\t\treturn $"],[1,"        return pasteDefer.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError"]],"start1":40576,"start2":40576,"length1":32,"length2":54},{"diffs":[[0,"ror("],[-1,"$"],[0,"err, '#'"],[-1,".$"],[1,"+"],[0,"src, "],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERRO"]],"start1":40627,"start2":40627,"length1":34,"length2":29},{"diffs":[[0,"ROR_PERM_DENIED)"],[1,")"],[0,";\r\n\t}\r\n\r\n\tif (($"]],"start1":40654,"start2":40654,"length1":32,"length2":33}]],"length":93711,"saved":false}
{"ts":1364861091937,"patch":[[{"diffs":[[0,"ENIED));\r\n\t}\r\n\r\n"],[1,"    \r\n"],[0,"\tif (($file = $v"]],"start1":40664,"start2":40664,"length1":32,"length2":38}]],"length":93717,"saved":false}
{"ts":1364861231080,"patch":[[{"diffs":[[0,"\r\n\t}\r\n\r\n    "],[1,"vol.file(src, rmsrc).then(function(file) {\r\n        if (!file) {\r\n            return pasteDefer.reject(this.setError(err, '#'+src, ERRORS.ERROR_FILE_NOT_FOUND));\r\n        }\r\n        \r\n    })"],[0,"\r\n\tif (($fil"]],"start1":40672,"start2":40672,"length1":24,"length2":214}]],"length":93907,"saved":false}
{"ts":1364861319021,"patch":[[{"diffs":[[0,"IED));\r\n\t}\r\n"],[1,"    var name;\r\n    "],[0,"\r\n    vol.fi"]],"start1":40666,"start2":40666,"length1":24,"length2":43}]],"length":93926,"saved":false}
{"ts":1364861362036,"patch":[[{"diffs":[[0," var name;\r\n"],[1,"    var errPath;\r\n"],[0,"    \r\n    vo"]],"start1":40681,"start2":40681,"length1":24,"length2":42},{"diffs":[[0,"\r\n        \r\n"],[1,"        name = file.name;    \r\n        errPath = vol.path(src);\r\n"],[0,"    })\r\n\tif "]],"start1":40893,"start2":40893,"length1":24,"length2":89}]],"length":94009,"saved":false}
{"ts":1364861368312,"patch":[[{"diffs":[[0,"path(src);\r\n"],[1,"        \r\n"],[0,"    })\r\n\tif "]],"start1":40958,"start2":40958,"length1":24,"length2":34}]],"length":94019,"saved":false}
{"ts":1364861434289,"patch":[[{"diffs":[[0,"path(src);\r\n    "],[-1,"  "],[1,"}).then(this.dir(dst))\r\n    .then(function(dir) {\r\n        if (!dir) {\r\n            return pasteDefer.reject(this.setError(err, errpath, ERRORS.ERROR_TRGDIR_NOT_FOUND, '#'+dst))\r\n        }"],[0,"  \r\n    })\r\n\tif "]],"start1":40958,"start2":40958,"length1":34,"length2":220}]],"length":94205,"saved":false}
{"ts":1364861444865,"patch":[[{"diffs":[[0," var err"],[-1,"P"],[1,"p"],[0,"ath;\r\n  "]],"start1":40696,"start2":40696,"length1":17,"length2":17}]],"length":94205,"saved":false}
{"ts":1364861452301,"patch":[[{"diffs":[[0,"     err"],[-1,"P"],[1,"p"],[0,"ath = vo"]],"start1":40939,"start2":40939,"length1":17,"length2":17}]],"length":94205,"saved":false}
{"ts":1364861515552,"patch":[[{"diffs":[[0,"rpath;\r\n"],[1,"    var dir;\r\n"],[0,"    \r\n"],[-1,""],[0,"    vol."]],"start1":40703,"start2":40703,"length1":22,"length2":36},{"diffs":[[0,".then(function(d"],[-1,"i"],[0,"r) {\r\n"],[1,"        dir = dr;\r\n"],[0,"        if (!dir"]],"start1":41016,"start2":41016,"length1":39,"length2":57},{"diffs":[[0,"       }"],[1,"\r\n      "],[0,"  \r\n    "]],"start1":41186,"start2":41186,"length1":16,"length2":24},{"diffs":[[0,"\t}\r\n"],[-1,"\r\n\t$name = $file['name'];\r\n\t$errpath = $volume->path($src);\r\n\r\n\tif (($dir = $this->dir($dst)) == false) {\r\n\t\treturn $this->setError($err, $errpath, elFinder::ERROR_TRGDIR_NOT_FOUND, '#'.$dst);\r\n\t}\r\n"],[1,"    \r\n    "],[0,"\r\n\ti"]],"start1":41345,"start2":41345,"length1":206,"length2":18}]],"length":94057,"saved":false}
{"ts":1364861571272,"patch":[[{"diffs":[[0,"r dir;\r\n"],[-1,"    \r\n"],[0,"    vol."]],"start1":40717,"start2":40717,"length1":22,"length2":16},{"diffs":[[0,"})\r\n"],[-1,"\tif (($file = $volume->file($src, $rmSrc)) == false) {\r\n\t\treturn $this->setError($err, '#'.$src, elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}\r\n    \r\n    "],[1,"\r\n"],[0,"\r\n\ti"]],"start1":41204,"start2":41204,"length1":153,"length2":10}]],"length":93908,"saved":false}
{"ts":1364861637067,"patch":[[{"diffs":[[0,"  var dir;\r\n"],[1,"    var destination = \r\n"],[0,"    vol.file"]],"start1":40713,"start2":40713,"length1":24,"length2":48},{"diffs":[[0,"    "],[-1,"\r\n    })\r\n\r\n\r\n\t"],[0,"if (!"],[-1,"$"],[0,"dir"],[-1,"['"],[1,"."],[0,"write"],[-1,"']"],[0," || !"],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"read"],[-1,"']"],[0,") {\r\n"],[-1,"\t\treturn $"],[1,"            return pasteDefer.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setE"]],"start1":41218,"start2":41218,"length1":80,"length2":83},{"diffs":[[0,"t(this.setError("],[-1,"$"],[0,"err, "],[-1,"$"],[0,"errpath, elFinde"]],"start1":41290,"start2":41290,"length1":39,"length2":37},{"diffs":[[0,"r, errpath, "],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":41308,"start2":41308,"length1":34,"length2":31},{"diffs":[[0,"_DENIED)"],[1,")"],[0,";\r\n"],[-1,"\t}\r\n\r\n\t$"],[1,"        }\r\n        \r\n        "],[0,"destinat"]],"start1":41337,"start2":41337,"length1":27,"length2":49},{"diffs":[[0,"n = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"dst);\r"],[1,"\n    })\r"],[0,"\n\r\n\t"]],"start1":41388,"start2":41388,"length1":29,"length2":34}]],"length":93957,"saved":false}
{"ts":1364861756231,"patch":[[{"diffs":[[0,"code(dst);\r\n"],[1,"    }).then(vol.closest(src, rmsrc ? 'locked' : 'read', rmSrc))\r\n    .then(function(tst) {\r\n        test = tst;\r\n        if (test) {\r\n            if (rmSrc) {\r\n                return pasteDefer.reject(this.setError(err, errpath, ERRORS.ERROR_LOCKED, vol.path(test)));\r\n            } else {\r\n                return pasteDefer.reject(this.setError(err, errpath, ERRORS.ERROR_PERM_DENIED));\r\n            }\r\n        }\r\n"],[0,"    })\r\n\r\n\ti"]],"start1":41399,"start2":41399,"length1":24,"length2":439}]],"length":94372,"saved":false}
{"ts":1364861895482,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        test = this._joinPath(destination, name);\r\n    }).then(this.stat(test))\r\n    .then(function(st) {\r\n        stat = st;\r\n        this.clearcache();\r\n        if (stat) {\r\n            if (this.options.copyOverwrite) {\r\n                if (this.isSameType(file.mime, stat.mime)) {\r\n                    return pasteDefer.reject(this.setError(ERRORS.ERROR_NOT_REPLACE, this._path(test)));\r\n                }\r\n                \r\n            }\r\n        }\r\n"],[0,"    })\r\n\r\n\ti"]],"start1":41814,"start2":41814,"length1":24,"length2":478}]],"length":94826,"saved":false}
{"ts":1364861958884,"patch":[[{"diffs":[[0,"        "],[-1,"\r\n            }"],[1,"if (!stat.write) {"],[0,"\r\n      "]],"start1":42244,"start2":42244,"length1":31,"length2":34},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"})\r\n\r\n\tif (($test = $volume->closest($src, $rmSrc ? 'locked' : 'read', $rmSrc))) {\r\n\t\treturn $rmSrc\r\n\t\t\t? $this->setError($"],[1,"        return pasteDefer.reject("],[0,"err, "],[-1,"$"],[0,"errp"]],"start1":42276,"start2":42276,"length1":144,"length2":50},{"diffs":[[0,"th, "],[-1,"elFinder::ERROR_LOCKED, $volume->path($test))\r\n\t\t\t: $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\t$test = $this->_joinPath($destination, $name);\r\n\t$stat = $this->stat($test);\r\n\t$this->clearcache();\r\n\tif ($stat) {\r\n\t\tif ($this->options['copyOverwrite']) {\r\n\t\t\t// do not replace file with dir or dir with file\r\n\t\t\tif (!$this->isSameType($file['mime'], $stat['mime'])) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_NOT_REPLACE, $this->_path($test));\r\n\t\t\t}\r\n\t\t\t// existed file is not writable\r\n\t\t\tif (!$stat['write']) {\r\n\t\t\t\treturn $this->setError($err, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t\t\t}"],[1,"ERRORS.ERROR_PERM_DENIED);\r\n                }\r\n                \r\n            }\r\n        }\r\n    })\r\n\r\n"],[0,"\r\n\t\t"]],"start1":42327,"start2":42327,"length1":627,"length2":109}]],"length":94217,"saved":false}
{"ts":1364861971478,"patch":[[{"diffs":[[0," }\r\n"],[-1,"                \r\n"],[0,"    "]],"start1":42374,"start2":42374,"length1":26,"length2":8}]],"length":94199,"saved":false}
{"ts":1364862103495,"patch":[[{"diffs":[[0,"    "],[-1,"}\r\n    })\r\n"],[1,"    return Q.resolve();\r\n        }\r\n    }).then(this.closestByAttr(test, 'locked', true))\r\n    .then(function(locked) {\r\n        if (locked) {\r\n            return pasteDefer.reject(ERRORS.ERROR_LOCKED, this._path(locked));\r\n        }\r\n        \r\n    })"],[0,"\r\n\r\n"]],"start1":42397,"start2":42397,"length1":19,"length2":259}]],"length":94439,"saved":false}
{"ts":1364862110307,"patch":[[{"diffs":[[0,"\n        }\r\n"],[-1,"        \r\n"],[0,"    })\r\n\r\n\t\t"]],"start1":42624,"start2":42624,"length1":34,"length2":24}]],"length":94429,"saved":false}
{"ts":1364862181758,"patch":[[{"diffs":[[0,"tination"],[-1," = "],[1,";"],[0,"\r\n    vo"]],"start1":40736,"start2":40736,"length1":19,"length2":17},{"diffs":[[0,"     }\r\n    "],[-1,"}"],[1,"    vol = this && (test == file.target) || test == this.decode(src);\r\n        if (vol) {\r\n            return pasteDefer.reject(ERRORS.ERROR_REPLACE, errpath);   \r\n        }\r\n    }).then("],[0,")\r\n\r\n\t\t\t// e"]],"start1":42626,"start2":42626,"length1":25,"length2":210}]],"length":94612,"saved":false}
{"ts":1364862268271,"patch":[[{"diffs":[[0,"n Q.resolve();\r\n"],[1,"        } else {\r\n            name = this.uniqueName(destination, name, ' ', false);\r\n"],[0,"        }\r\n    }"]],"start1":42408,"start2":42408,"length1":32,"length2":118},{"diffs":[[0,"}).then("],[1,"this.remove(test))\r\n    .then(function(removed) {\r\n        if (!removed) {\r\n            return pasteDefer.reject(ERRORS.ERROR_REPLACE, this._path(test));\r\n        }\r\n    }"],[0,")\r\n\r\n\t\t\t"]],"start1":42902,"start2":42902,"length1":16,"length2":187}]],"length":94869,"saved":false}
{"ts":1364862337932,"patch":[[{"diffs":[[0,"  })"],[-1,"\r\n\r\n\t\t\t// existed file locked or has locked child\r\n\t\t\tif (($locked = $this->closestByAttr($test, 'locked', true))) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_LOCKED, $this->_path($locked));\r\n\t\t\t}\r\n\t\t\t// target is entity file of alias\r\n\t\t\tif ($volume == $this && ($test == @$file['target'] || $test == $this->decode($src))) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $errpath);\r\n\t\t\t}\r\n\t\t\t// remove existed file\r\n\t\t\tif (!$this->remove($test)) {\r\n\t\t\t\treturn $this->setError(elFinder::ERROR_REPLACE, $this->_path($test));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t$name = $this->uniqueName($destination, $name, ' ', false);\r\n\t\t}\r\n\t}"],[1,".then(function() {\r\n        \r\n    })"],[0,"\r\n\r\n"]],"start1":43078,"start2":43078,"length1":631,"length2":44}]],"length":94282,"saved":false}
{"ts":1364862362548,"patch":[[{"diffs":[[0,"stination;\r\n"],[1,"    var source;\r\n"],[0,"    vol.file"]],"start1":40735,"start2":40735,"length1":24,"length2":41},{"diffs":[[0,"D, '#'+dst))"],[1,";"],[0,"\r\n        }\r"]],"start1":41204,"start2":41204,"length1":24,"length2":25},{"diffs":[[0," {\r\n        "],[1,"if (vol == this) {\r\n            source = this.decode(src);\r\n            \r\n        }"],[0,"\r\n    })\r\n\r\n"]],"start1":43116,"start2":43116,"length1":24,"length2":107}]],"length":94383,"saved":false}
{"ts":1364862396391,"patch":[[{"diffs":[[0,"if ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"_inpath("],[-1,"$"],[0,"dest"]],"start1":43352,"start2":43352,"length1":24,"length2":21},{"diffs":[[0,"nation, "],[-1,"$"],[0,"source))"]],"start1":43374,"start2":43374,"length1":17,"length2":16},{"diffs":[[0,")) {\r\n\t\t\treturn "],[-1,"$"],[1,"pasteDefer.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elFinde"]],"start1":43388,"start2":43388,"length1":39,"length2":55},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_COPY_I"]],"start1":43424,"start2":43424,"length1":34,"length2":31},{"diffs":[[0,"ITSELF, "],[-1,"$"],[0,"errpath)"]],"start1":43459,"start2":43459,"length1":17,"length2":16}]],"length":94391,"saved":false}
{"ts":1364862434442,"patch":[[{"diffs":[[0,");\r\n            "],[1,"if (this._inpath(destination, source)) {\r\n                return pasteDefer.reject(this.setError(ERRORS.ERROR_COPY_INTO_ITSELF, errpath));\r\n            } \r\n            method = rmSrc ? 'move' : 'copy';"],[0,"\r\n        }\r\n   "]],"start1":43184,"start2":43184,"length1":32,"length2":233}]],"length":94592,"saved":false}
{"ts":1364862440613,"patch":[[{"diffs":[[0,"ar source;\r\n"],[1,"    var rmSrc;\r\n"],[0,"    vol.file"]],"start1":40752,"start2":40752,"length1":24,"length2":40}]],"length":94608,"saved":false}
{"ts":1364862448324,"patch":[[{"diffs":[[0,"(src, rm"],[-1,"s"],[1,"S"],[0,"rc).then"]],"start1":40792,"start2":40792,"length1":17,"length2":17}]],"length":94608,"saved":false}
{"ts":1364862453335,"patch":[[{"diffs":[[0,"e;\r\n"],[-1,"    var rmSrc;\r\n"],[0,"    "]],"start1":40760,"start2":40760,"length1":24,"length2":8}]],"length":94592,"saved":false}
{"ts":1364862548981,"patch":[[{"diffs":[[0,"copy';\r\n        "],[-1,"}"],[1,"    (path = this.method(source, destination, name)) ? this.stat(path) : false;\r\n        }\r\n    }).then(this.method(source, destination, name))\r\n    .then(function(path) {\r\n        "],[0,"\r\n    })\r\n\r\n\t// "]],"start1":43395,"start2":43395,"length1":33,"length2":212}]],"length":94771,"saved":false}
{"ts":1364862559613,"patch":[[{"diffs":[[0,"        "],[1,"return Q.resolve"],[0,"(path = "]],"start1":43407,"start2":43407,"length1":16,"length2":32}]],"length":94787,"saved":false}
{"ts":1364862570087,"patch":[[{"diffs":[[0,"  })"],[-1,".then(this.method(source, destination, name))\r\n    "],[0,".the"]],"start1":43520,"start2":43520,"length1":59,"length2":8}]],"length":94736,"saved":false}
{"ts":1364862663638,"patch":[[{"diffs":[[0,").then(function("],[-1,"path"],[0,") {\r\n        \r\n "]],"start1":43523,"start2":43523,"length1":36,"length2":32},{"diffs":[[0," {\r\n        "],[1,"if (!this.options.copyTo || !vol.copyFromAllowed()) {\r\n            return Q.reject(this.setError(ERRORS.ERROR_COPY, errpath, ERRORS.ERROR_PERM_DENIED));\r\n        }\r\n        return (path = this.copyFrom(vol, src, destination, name))"],[0,"\r\n    })\r\n\r\n"]],"start1":43540,"start2":43540,"length1":24,"length2":255}]],"length":94963,"saved":false}
{"ts":1364862679452,"patch":[[{"diffs":[[0,"        "],[-1,"return"],[1,"if"],[0," (path ="]],"start1":43717,"start2":43717,"length1":22,"length2":18},{"diffs":[[0,"ation, name)"],[1," == false"],[0,")\r\n    })\r\n\r"]],"start1":43766,"start2":43766,"length1":24,"length2":33}]],"length":94968,"saved":false}
{"ts":1364862719381,"patch":[[{"diffs":[[0,"\n        if "],[1,"("],[0,"(path = this"]],"start1":43716,"start2":43716,"length1":24,"length2":25},{"diffs":[[0,"n, name)"],[-1," "],[1,") ="],[0,"== false"]],"start1":43771,"start2":43771,"length1":17,"length2":19},{"diffs":[[0,"= false)"],[1," {\r\n            return Q.reject();\r\n        }"],[0,"\r\n    })"]],"start1":43783,"start2":43783,"length1":16,"length2":61}]],"length":95016,"saved":false}
{"ts":1364862825800,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n\r\n\t// copy/move inside current volume\r\n\t"],[1,"    \r\n        if (rmSrc) {\r\n            volume.rm(function(volRm) {\r\n                "],[0,"if ("],[-1,"$"],[0,"vol"],[-1,"ume == $this) {\r\n\t\t$source = $this->decode($src);\r\n\t\t// do not copy into itself\r\n\t\tif (this._inpath(destination, source)) {\r\n\t\t\treturn pasteDefer.reject(this.setError(ERRORS.ERROR_COPY_INTO_ITSELF, errpath);\r\n\t\t}\r\n\t\t$method = $rmSrc ? 'move' : 'copy';\r\n\t\treturn ($path = $this->$method($source, $destination, $name)) ? $this->stat($path) : false;\r\n\t}\r\n\r\n\t// copy/move from another volume\r\n\tif (!$this->options['copyTo'] || !$volume->copyFromAllowed()) {\r\n\t\t"],[1,"Rm) {\r\n                    this.removed = file;\r\n                } else {\r\n                    return Q.reject(ERRORS.ERROR_MOVE, errpath, ERRORS.ERROR_RM_SRC)l\r\n                }\r\n                "],[0,"return "],[-1,"$"],[0,"this"],[-1,"->setError(elFinder::ERROR_COPY, $errpath, elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\tif (($path = $this->copyFrom($volume, $src, $destination, $name)) == false) {\r\n\t\treturn false;\r\n\t}"],[1,".stat(path);\r\n            })\r\n        }\r\n    })\r\n"],[0,"\r\n\r\n"]],"start1":43838,"start2":43838,"length1":708,"length2":357}]],"length":94665,"saved":false}
{"ts":1364862833720,"patch":[[{"diffs":[[0,".removed"],[-1," = "],[1,".push("],[0,"file"],[1,")"],[0,";\r\n     "]],"start1":43965,"start2":43965,"length1":23,"length2":27}]],"length":94669,"saved":false}
{"ts":1364862838693,"patch":[[{"diffs":[[0,"  })"],[-1,"\r\n\r\n\r\n\tif ($rmSrc) {\r\n\t\tif ($volume->rm($src)) {\r\n\t\t\t$this->removed[] = $file;\r\n\t\t} else {\r\n\t\t\treturn $this->setError(elFinder::ERROR_MOVE, $errpath, elFinder::ERROR_RM_SRC);\r\n\t\t}\r\n\t}\r\n\treturn $this->stat($path)"],[0,";\r\n}"]],"start1":44189,"start2":44189,"length1":219,"length2":8}]],"length":94458,"saved":false}
{"ts":1364862849743,"patch":[[{"diffs":[[0,"\r\n    });\r\n}\r\n\r\n"],[1,"/************************ FIX BELOW HERE **************************/\r\n\r\n"],[0,"/**\r\n * Return f"]],"start1":44185,"start2":44185,"length1":32,"length2":104}]],"length":94530,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364869935079,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function getContents($"],[1,"ElFinderVolumeDriver.prototype.getContents = function("],[0,"hash"]],"start1":44405,"start2":44405,"length1":37,"length2":62},{"diffs":[[0,"sh) {\r\n\t"],[-1,"$"],[1,"var "],[0,"file = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"hash);\r\n"]],"start1":44465,"start2":44465,"length1":37,"length2":37}]],"length":94555,"saved":false}
{"ts":1364870062533,"patch":[[{"diffs":[[0,"ash) {\r\n"],[-1,"\tvar"],[1,"    var getContentsDefer = Q.defer;\r\n    var file;\r\n    \r\n    this.file(hash).then(function() {\r\n       "],[0," file = "]],"start1":44464,"start2":44464,"length1":20,"length2":120},{"diffs":[[0,"ile(hash);\r\n"],[-1,"\r\n\t"],[1,"        \r\n        "],[0,"if (!"],[-1,"$"],[0,"file) {\r\n\t\tr"]],"start1":44590,"start2":44590,"length1":33,"length2":47},{"diffs":[[0,"ile) {\r\n"],[-1,"\t\treturn $"],[1,"            return getContentsDefer.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError"]],"start1":44626,"start2":44626,"length1":32,"length2":64},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_FILE_N"]],"start1":44679,"start2":44679,"length1":34,"length2":31},{"diffs":[[0,"UND)"],[1,")"],[0,";\r\n"],[-1,"\t}\r\n\r\n\t"],[1,"        }\r\n        "],[0,"if ("],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"mime"],[-1,"']"],[0," == "]],"start1":44715,"start2":44715,"length1":35,"length2":44},{"diffs":[[0,"ry') {\r\n"],[-1,"\t\treturn $"],[1,"            return getContentsDefer.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError"]],"start1":44767,"start2":44767,"length1":32,"length2":64},{"diffs":[[0,"ror("],[-1,"elFinder::ERROR_NOT_FILE);\r\n\t}"],[1,"ERRORS.ERROR_NOT_FILE));\r\n        }\r\n        \r\n        if (!file.read) {\r\n            return getContentsDefer.reject(this.setError(ERRORS.ERROR_PERM_DENIED));\r\n        }\r\n        \r\n        return this._getContents(this.decode(hash));\r\n    })\r\n"],[0,"\r\n\r\n"]],"start1":44828,"start2":44828,"length1":38,"length2":251}]],"length":94952,"saved":false}
{"ts":1364870081294,"patch":[[{"diffs":[[0,"\n        }\r\n    "],[-1,"    "],[1,"}).then(function() {"],[0,"\r\n        return"]],"start1":44991,"start2":44991,"length1":36,"length2":52}]],"length":94968,"saved":false}
{"ts":1364870086336,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"return "],[0,"this.file(ha"]],"start1":44522,"start2":44522,"length1":24,"length2":31}]],"length":94975,"saved":false}
{"ts":1364870105612,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[-1,"return "],[0,"this.file(ha"]],"start1":44522,"start2":44522,"length1":31,"length2":24},{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\tif (!$file['read']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\r\n\treturn $this->_getContents($this->decode($hash))"],[1,"    return getContentsDefer.promise"],[0,";\r\n}"]],"start1":45089,"start2":45089,"length1":145,"length2":43}]],"length":94866,"saved":false}
{"ts":1364870220647,"patch":[[{"diffs":[[0,"}\r\n    });\r\n"],[1,"    \r\n    return pasteDefer.promise;\r\n"],[0,"}\r\n\r\n/******"]],"start1":44184,"start2":44184,"length1":24,"length2":62}]],"length":94904,"saved":false}
{"ts":1364870286119,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function putContents($"],[1,"ElFinderVolumeDriver.prototype.putContents = function("],[0,"hash, "],[-1,"$"],[0,"cont"]],"start1":45375,"start2":45375,"length1":44,"length2":68},{"diffs":[[0,"content) {\r\n"],[1,"    var putContentsDeferred = Q.defer();\r\n    \r\n"],[0,"\tif ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"commandDisab"]],"start1":45439,"start2":45439,"length1":36,"length2":82}]],"length":94974,"saved":false}
{"ts":1364870315329,"patch":[[{"diffs":[[0,"dit')) {\r\n\t\t"],[-1,"return $"],[1,"putContentsDeferred.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError(elF"]],"start1":45527,"start2":45527,"length1":38,"length2":56},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":45568,"start2":45568,"length1":34,"length2":31},{"diffs":[[0,"ROR_PERM_DENIED)"],[1,")"],[0,";\r\n\t}\r\n\r\n\t$path "]],"start1":45589,"start2":45589,"length1":32,"length2":33}]],"length":94990,"saved":false}
{"ts":1364870443006,"patch":[[{"diffs":[[0,"Q.defer();\r\n    "],[-1,"\r\n\t"],[1,"var path;\r\n    \r\n    Q.fcall(function() {\r\n        "],[0,"if (this.command"]],"start1":45481,"start2":45481,"length1":35,"length2":83},{"diffs":[[0,"t')) {\r\n"],[-1,"\t\t"],[1,"            return "],[0,"putConte"]],"start1":45577,"start2":45577,"length1":18,"length2":35},{"diffs":[[0,"ED))"],[-1,";\r\n\t}\r\n\r\n\t$"],[1,"l\r\n        }\r\n        "],[0,"path = "],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"decode("],[-1,"$"],[0,"hash);\r\n"],[-1,"\r\n\tif (!($file = $"],[1,"    }).then("],[0,"this"],[-1,"->"],[1,"."],[0,"file("],[-1,"$"],[0,"hash))"],[-1,") {\r\n\t\treturn $"],[1,".then(function(file) {\r\n        if (!file) {\r\n            return putContentsDeferred.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setE"]],"start1":45667,"start2":45667,"length1":106,"length2":182},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_FILE_N"]],"start1":45842,"start2":45842,"length1":34,"length2":31},{"diffs":[[0,"_FILE_NOT_FOUND)"],[1,")"],[0,";\r\n"],[-1,"\t}"],[1,"        } \r\n    });"],[0,"\r\n\r\n\tif (!$file["]],"start1":45866,"start2":45866,"length1":37,"length2":55}]],"length":95146,"saved":false}
{"ts":1364870585730,"patch":[[{"diffs":[[0,"   }"],[-1," "],[0,"\r\n    "],[-1,"});\r\n\r\n\t"],[1,"    "],[0,"if (!"],[-1,"$"],[0,"file"],[-1,"['"],[1,"."],[0,"write"],[-1,"']"],[0,") {\r\n"],[-1,"\t\treturn $"],[1,"            return putContentsDeferred.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setE"]],"start1":45891,"start2":45891,"length1":63,"length2":89},{"diffs":[[0,"is.setError("],[-1,"elFinder::"],[1,"ERRORS."],[0,"ERROR_PERM_D"]],"start1":45973,"start2":45973,"length1":34,"length2":31},{"diffs":[[0,"ROR_PERM_DENIED)"],[1,")"],[0,";\r\n"],[-1,"\t}"],[1,"        }\r\n        this.clearCache();\r\n    }).then(this._filePutContents(path, content))\r\n    .then(function() {\r\n        return putContentsDeferred.resolve(this.stat(path)); \r\n    }, function() {\r\n        return putContentsDeferred.reject();\r\n    });\r\n"],[0,"\r\n\t$this->clearc"]],"start1":45994,"start2":45994,"length1":37,"length2":289}]],"length":95421,"saved":false}
{"ts":1364870593251,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\t$this->clearcache();\r\n\treturn $this->_filePutContents($path, $content) ? $this->stat($path) : fal"],[1,"    return putContentsDeferred.promi"],[0,"se;\r"]],"start1":46265,"start2":46265,"length1":106,"length2":44}]],"length":95359,"saved":false}
{"ts":1364870673423,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/************************ FIX BELOW HERE **************************/\r\n\r\n"],[0,"/**\r"]],"start1":44235,"start2":44235,"length1":80,"length2":8}]],"length":95287,"saved":false}
{"ts":1364870935946,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"public function extract($hash) {\r\n\t"],[1,"ElFinderVolumeDriver.prototype.extract = function(hash) {\r\n    var extractDeferred = Q.defer();\r\n    \r\n    Q.fcall(function() {\r\n        "],[0,"if ("],[-1,"$"],[0,"this"],[-1,"->"],[1,"."],[0,"comm"]],"start1":46412,"start2":46412,"length1":54,"length2":154},{"diffs":[[0,"t')) {\r\n"],[-1,"\t\treturn $"],[1,"            return extractDeferred.reject("],[0,"this"],[-1,"->"],[1,"."],[0,"setError"]],"start1":46585,"start2":46585,"length1":32,"length2":63},{"diffs":[[0,"ror("],[-1,"elFinder::ERROR_PERM_DENIED);\r\n\t}"],[1,"ERRORS.ERROR_PERM_DENIED));\r\n        }\r\n    }).then(this.file(hash))\r\n    .then(function(file) {\r\n        if (!file) {\r\n            return extractDeferred.reject(this.setError(ERRORS.ERROR_FILE_NOT_FOUND));\r\n        }\r\n    })"],[0,"\r\n\r\n"]],"start1":46645,"start2":46645,"length1":41,"length2":233}]],"length":95610,"saved":false}
{"ts":1364870946211,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n\r\n\tif (($file = $this->file($hash)) == false) {\r\n\t\treturn $this->setError(elFinder::ERROR_FILE_NOT_FOUND);\r\n\t}"],[1,"    \r\n    })\r\n"],[0,"\r\n\r\n"]],"start1":46868,"start2":46868,"length1":122,"length2":22}]],"length":95510,"saved":false}
{"ts":1364870983252,"patch":[[{"diffs":[[0,"d = Q.defer();\r\n"],[1,"    var archiver;\r\n"],[0,"    \r\n    Q.fcal"]],"start1":46497,"start2":46497,"length1":32,"length2":51},{"diffs":[[0," }\r\n        "],[1,"archiver = !_.isUndefined(this.archivers.extract[file.mime]) ? "],[0,"\r\n    })\r\n\r\n"]],"start1":46883,"start2":46883,"length1":24,"length2":87}]],"length":95592,"saved":false}
{"ts":1364871018675,"patch":[[{"diffs":[[0,"e.mime])"],[-1," ? "],[1,"\r\n                    ? this.archivers.extract[file.mime]\r\n                    : false;"],[0,"\r\n    })"]],"start1":46947,"start2":46947,"length1":19,"length2":103}]],"length":95676,"saved":false}
{"ts":1364871041732,"patch":[[{"diffs":[[0,"    "],[-1,"})\r\n\r\n\r\n\t$archiver = isset($this->archivers['extract'][$file['mime']])\r\n\t\t? $this->archivers['extract'][$file['mime']]\r\n\t\t: false;"],[1,"    if (!archiver) {\r\n            return extractDeferred.reject(this.setError(ERRORS.ERROR_NOT_ARCHIVE));\r\n        }\r\n    })\r\n"],[0,"\r\n\r\n"]],"start1":47044,"start2":47044,"length1":138,"length2":134}]],"length":95672,"saved":false}
{"ts":1364871046491,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\tif (!$archiver) {\r\n\t\treturn $this->setError(elFinder::ERROR_NOT_ARCHIVE);\r\n\t}\r\n\r\n"],[0,"\t$pa"]],"start1":47172,"start2":47172,"length1":92,"length2":8}]],"length":95588,"saved":false}
{"ts":1364871052212,"patch":[[{"diffs":[[0," archiver;\r\n"],[1,"    var path;\r\n    var parent;\r\n"],[0,"    \r\n    Q."]],"start1":46520,"start2":46520,"length1":24,"length2":56}]],"length":95620,"saved":false}
{"ts":1364871190607,"patch":[[{"diffs":[[0,"arent;\r\n"],[1,"    var file;\r\n"],[0,"    \r\n"],[-1,""],[0,"    Q.fc"]],"start1":46556,"start2":46556,"length1":22,"length2":37},{"diffs":[[0,"n(function(f"],[-1,"i"],[0,"le) {\r\n"],[1,"        file = fle;\r\n"],[0,"        if ("]],"start1":46793,"start2":46793,"length1":32,"length2":52},{"diffs":[[0,"     }\r\n    "],[-1,"})"],[1,"    path = this.decode(hash);\r\n        return Q.resolve(path);\r\n    }).then(function(path) {\r\n        return this.stat(this._dirname(path))\r\n    })\r\n    .then(function(parent) {\r\n        \r\n    });"],[0,"\r\n\r\n\t$path  "]],"start1":47225,"start2":47225,"length1":26,"length2":220}]],"length":95849,"saved":false}
{"ts":1364871249891,"patch":[[{"diffs":[[0," {\r\n        "],[1,"if (!file.read || !parent.write) {\r\n            return extractDeferred.reject(this.setError(ERRORS.ERROR_PERM_DENIED));\r\n        }"],[0,"\r\n    });\r\n\r"]],"start1":47412,"start2":47412,"length1":24,"length2":154}]],"length":95979,"saved":false}
{"ts":1364871411555,"patch":[[{"diffs":[[0,"));\r\n        }\r\n"],[1,"        this.clearcache();\r\n    }).then(this._extract(path, archiver))\r\n    .then(this.stat(path))\r\n    .then(function(stat) {\r\n         path = stat;\r\n    }, function() {\r\n        path = false;\r\n"],[0,"    });\r\n\r\n\t$pat"]],"start1":47540,"start2":47540,"length1":32,"length2":227}]],"length":96174,"saved":false}
{"ts":1364871445708,"patch":[[{"diffs":[[0,"    "],[-1,"}, function() {\r\n        path = false"],[1,"     return extractDeferred.resolve(path);\r\n    }, function() {\r\n        path = false;\r\n        return extractDeferred.reject(path)"],[0,";\r\n "]],"start1":47707,"start2":47707,"length1":45,"length2":139},{"diffs":[[0,"th);\r\n    })"],[-1,";"],[0,"\r\n\r\n\t$path  "]],"start1":47839,"start2":47839,"length1":25,"length2":24}]],"length":96267,"saved":false}
{"ts":1364871450558,"patch":[[{"diffs":[[0,".reject("],[-1,"path"],[0,");\r\n    "]],"start1":47829,"start2":47829,"length1":20,"length2":16}]],"length":96263,"saved":false}
{"ts":1364871466336,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\t$path   = $this->decode($hash);\r\n\t$parent = $this->stat($this->_dirname($path));\r\n\r\n\tif (!$file['read'] || !$parent['write']) {\r\n\t\treturn $this->setError(elFinder::ERROR_PERM_DENIED);\r\n\t}\r\n\t$this->clearcache();\r\n\treturn ($path = $this->_extract($path, $archiver)) ? $this->stat($path) : fal"],[1,"    return extractDeferred.promi"],[0,"se;\r"]],"start1":47847,"start2":47847,"length1":299,"length2":40}]],"length":96004,"saved":false}
{"ts":1364871482987,"patch":[[{"diffs":[[0,".promise;\r\n}\r\n\r\n"],[1,"\r\n/********* BELOW ME ***********/\r\n\r\n\r\n"],[0,"/**\r\n * Add file"]],"start1":47877,"start2":47877,"length1":32,"length2":72}]],"length":96044,"saved":false}
