{"ts":1364616898644,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * The volume driver for the MySQL data storage backend.\n **/\n \n/** Variables that are global to this module. **/\nvar opts;\n\n// Default options specific to this driver.\nopts = {\n    'driver': 'MySQL',\n    'host': 'localhost',\n    'socket': '/tmp/mysql.sock',\n    'user': 'eluser',\n    'pass': 'elpass',\n    'db': 'elfinder',\n    'files_table': 'elfinder_file',\n    'path': 1,\n    'tmpPath': '/tmp'\n};"]],"start1":0,"start2":0,"length1":0,"length2":404}]],"length":404}
{"contributors":[],"silentsave":false,"ts":1364616939717,"patch":[[{"diffs":[[0,"': '"],[-1,"MySQL',\n    'host': 'localhost',\n    'socket': '/tmp/mysql.sock',\n    'user': 'eluser',\n    'pass': 'elpass',\n    'db': 'elfinder',\n    'files_table': 'elfinder_file',\n    'path': 1,\n    'tmpPath': '/tmp'"],[1,"TEST',"],[0,"\n};"]],"start1":193,"start2":193,"length1":211,"length2":13}]],"length":206,"saved":false}
{"ts":1364616965634,"patch":[[{"diffs":[[0,"EST',\n};"],[1,"\n\nvar TestDriver = function() {\n    \n}\n\nmodule.exports = TestDriver;"]],"start1":198,"start2":198,"length1":8,"length2":76}]],"length":274,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364801935691,"patch":[[{"diffs":[[0,"the "],[-1,"MySQL"],[1,"TEST"],[0," dat"]],"start1":29,"start2":29,"length1":13,"length2":12},{"diffs":[[0,".\n *"],[-1,"*/\n \n/** Variables that are global to this module. **/\nvar opts;\n\n// Default options specific to this driver.\nopts = {\n    'driver': 'TEST',\n};\n\nvar TestDriver = function() {\n    "],[1," \n * This volume driver is only meant to be used as a testing driver, or as \n * a template for creating other drivers, and is not designed to be used in\n * production.\n * \n * @author John O'Connor\n **/\n var _ = require('underscore'),\n    Q = require('q'),\n    pathLib = require('path');\n \n/** Variables that are global to this module. **/\n\n/** Default options specific to this driver **/\nvar opts = {\n    'driver': 'TEST',\n};\n\n/**\n * Driver id\n * Must be started from letter and contains [a-z0-9]\n * Used as part of volume id\n *\n **/\nvar driverId = 't';\n\n/**\n * Required to count total archive files size\n *\n **/\nvar archiveSize = 0;\n\n/**\n * Constructor. Extends options with required fields.\n **/\nvar TestDriver = function() {\n    \tthis.options.alias   = '';              // alias to replace root dir name\n\t\tthis.options.dirMode  = 0755;            // new dirs mode\n\t\tthis.options.fileMode = 0644;            // new files mode\n\t\tthis.options.quarantine = '.quarantine';  // quarantine folder name - required to check archive (must be hidden)\n\t\tthis.options.maxArcFilesSize = 0;        // max allowed archive files size (0 - no limit)\n};\n\n/**\n * Configure the volume after a successful mount.\n * Not used in the test driver.  Returns true always;\n **/\nTestDriver.prototype.configure() = function{\n    return true;\n}\n\n/*********************************************************************/\n/*                               FS API                              */\n/*********************************************************************/\n\n/*********************** paths/urls *************************/\n\n/**\n * Return parent directory path\n *\n * @param  string  $path  file path\n * @return string\n **/\nfunction dirname(path) {\n    return Q.resolve(path);\n}\n\n/**\n * Return file name\n *\n * @param  string  $path  file path\n * @return string\n * @author Dmitry (dio) Levashov\n **/\nfunction basename(path) {\n    return Q.resolve(path);\n}\n\n/**\n * Join dir name and file name and retur full path\n *\n * @param  string  $dir\n * @param  string  $name\n * @return string\n **/\nfunction joinPath(dir, name) {\n\treturn Q.resolve(dir+pathLib.sep+name);\n}\n\n/** Adding a repeate to the string object. **/\nString.prototype.repeat = function( num )\n{\n    return new Array( num + 1 ).join( this );\n}\n\n\n\n/**\n * Return normalized path, this works the same as os.path.normpath() in Python\n *\n * @param  string  $path  path\n * @return string\n **/\nfunction normpath(path) {\n\tif (!path) {\n\t\treturn Q.resolve('.');\n\t}\n    \n    var initialSlashes = false;\n\tif (path.indexOf('/') === 0) {\n\t\tinitialSlashes = true;\n\t}\n\n\tif ((initialSlashes) \n\t&& (path.indexOf('//') === 0) \n\t&& (path.indexOf('///') < 0)) {\n\t\tinitialSlashes = 2;\n\t}\n\n\tvar comps = path.split('/');\n\tvar newComps = [];\n\t_.each(comps, function(comp, index, list) {\n        if (comp !== '' || comp !== '.') {\n            if (\n                comp !== '..' || \n                (!initialSlashes && !newComps) ||\n                (newComps && _.last(newComps) == '..')) {\n                    newComps.push(comp);\n                } else if (newComps) {\n                    newComps.pop;\n                }\n        }\n        if (index >= _.size(list) -1) {\n            comps = newComps;\n            path.join('/', comps);\n            if (initialSlashes) {\n                path.join('/'.repeat(initialSlashes));\n            }\n        }\n\t});\n    \n    return path ? Q.resolve(path) : Q.resolve('.');\n}\n\n/**\n * Return file path related to root dir\n *\n * @param  string  $path  file path\n * @return string\n * @author Dmitry (dio) Levashov\n **/\nfunction relpath(pth) {\n\treturn pth == this.root ? '' : pth.substring(_.size(this.root)+1);\n}\n\n/**\n * Convert path related to root dir into real path\n *\n * @param  string  $path  file path\n * @return string\n * @author Dmitry (dio) Levashov\n **/\nfunction abspath(pth) {\n\treturn pth == pathLib.sep ? this.root : this.root+pathLib.sep+pth;\n}\n\n/**\n * Return fake path started from root dir\n *\n * @param  string  $path  file path\n * @return string\n * @author Dmitry (dio) Levashov\n **/\nfunction path(pth) {\n\treturn this.rootName+(pth == this.root ? '' : this.separator+this._relpath(pth));\n}\n\n/**\n * Return true if $path is children of $parent\n *\n * @param  string  $path    path to check\n * @param  string  $parent  parent path\n * @return bool\n * @author Dmitry (dio) Levashov\n **/\nfunction inpath(pth, parent) {\n\treturn pth == parent || pth.indexOf(parent+pathLib.sep) === 0;\n}\n\n\n\n/***************** file stat ********************/\n\n/**\n * Return stat for given path.\n * Stat contains following fields:\n * - (int)    size    file size in b. required\n * - (int)    ts      file modification time in unix time. required\n * - (string) mime    mimetype. required for folders, others - optionally\n * - (bool)   read    read permissions. required\n * - (bool)   write   write permissions. required\n * - (bool)   locked  is object locked. optionally\n * - (bool)   hidden  is object hidden. optionally\n * - (string) alias   for symlinks - link target path relative to root path. optionally\n * - (string) target  for symlinks - link target path. optionally\n *\n * If file does not exists - returns empty array or false.\n *\n * @param  string  $path    file path \n * @return array|false\n **/\nfunction stat(pth) {\n    var stat = {};\n    stat.size = 0;\n    stat.ts = 0;\n    stat.mime = 'x-testobject';\n    stat.read = true;\n    stat.write = true;\n    stat.locked = false;\n    stat.hidden = false;\n    return Q.resolve(stat);\n}\n\n\n/**\n * Return true if path is dir and has at least one childs directory\n *\n * @param  string  $path  dir path\n * @return bool\n * @author Dmitry (dio) Levashov\n **/\nfunction subdirs(pth) {\n    return true;\n}\n\n/**\n * Return object width and height\n * Usualy used for images, but can be realize for video etc...\n *\n * @param  string  $path  file path\n * @param  string  $mime  file mime type\n * @return string\n **/\nfunction dimensions(pth, mime) {\n    return '0x0';\n}\n\n/******************** file/dir content *********************/\n\n/**\n * Return symlink target file\n *\n * @param  string  $path  link path\n * @return string\n * @author Dmitry (dio) Levashov\n **/\nfunction readlink(pth) {\n\treturn false;\n}\n\n/**\n * Return files list in directory.\n *\n * @param  string  $path  dir path\n * @return array\n **/\nfunction scandir(pth) {\n    return Q.resolve([]);\n}\n\n/**\n * Open file and return file pointer\n *\n * @param  string  $path  file path\n * @param  bool    $write open file for writing\n * @return resource|false\n * @author Dmitry (dio) Levashov\n **/\nfunction fopen(pth, mode) {\n    if (!_.isUndefined(mode) && !_.isNull(mode)) {\n        // Do something.\n    }\n\treturn Q.resolve();\n}\n\n/**\n * Close opened file\n *\n * @param  resource  $fp  file pointer\n * @return bool\n * @author Dmitry (dio) Levashov\n **/\nfunction fclose(fp, pth) {\n    return Q.resolve();\n}\n\n/********************  file/dir manipulations *************************/\n\n/**\n * Create dir and return created dir path or false on failed\n *\n * @param  string  $path  parent dir path\n * @param string  $name  new directory name\n * @return string|bool\n **/\nfunction mkdir(pth, name) {\n\tpth = pth+path.sep.name;\n    return Q.resolve(pth);\n}\n\n/**\n * Create file and return it's path or false on failed\n *\n * @param  string  $path  parent dir path\n * @param string  $name  new file name\n * @return string|bool\n **/\nfunction mkfile(pth, name) {\n\tpth = pth+path.sep+name;\n\n    return Q.resolve(pth);\n}\n\n/**\n * Create symlink\n *\n * @param  string  $source     file to link to\n * @param  string  $targetDir  folder to create link in\n * @param  string  $name       symlink name\n * @return bool\n **/\nfunction symlink(source, targetDir, name) {\n    return Q.resolve();\n}\n\n/**\n * Copy file into another file\n *\n * @param  string  $source     source file path\n * @param  string  $targetDir  target directory path\n * @param  string  $name       new file name\n * @return bool\n * @author Dmitry (dio) Levashov\n **/\nfunction copy(source, targetDir, name) {\n\treturn Q.resolve();\n}\n\n/**\n * Move file into another parent dir.\n * Return new file path or false.\n *\n * @param  string  $source  source file path\n * @param  string  $target  target dir path\n * @param  string  $name    file name\n * @return string|bool\n **/\nfunction move(source, targetDir, name) {\n\tvar target = targetDir+path.sep+name;\n    return Q.resolve(target);\n}\n\n/**\n * Remove file\n *\n * @param  string  $path  file path\n * @return bool\n **/\nfunction unlink(pth) {\n    return Q.resolve();\n}\n\n/**\n * Remove dir\n *\n * @param  string  $path  dir path\n * @return bool\n **/\nfunction rmdir(pth) {\n    return Q.resolve();\n}\n\n/**\n * Create new file and write into it from file pointer.\n * Return new file path or false on error.\n *\n * @param  resource  $fp   file pointer\n * @param  string    $dir  target dir path\n * @param  string    $name file name\n * @param  array     $stat file stat (required by some virtual fs)\n * @return bool|string\n **/\nfunction save(fp, dir, name, stat) {\n\tvar pth = dir+pathLib.sep+name;\n    return Q.resolve(pth);\n}\n\n/**\n * Get file contents\n *\n * @param  string  $path  file path\n * @return string|false\n **/\nfunction getContents(pth) {\n\treturn Q.resolve(pth);\n}\n\n/**\n * Write a string to a file\n *\n * @param  string  $path     file path\n * @param  string  $content  new file content\n * @return bool\n * @author Dmitry (dio) Levashov\n **/\nfunction filePutContents(pth, content) {\n    Q.resolve();\n}\n\n/**\n * Detect available archivers\n *\n * @return void\n **/\nfunction checkArchivers() {\n\tvar arcs = {\n        'create': {},\n        'extract': {}\n\t};\n\n    this.archivers = arcs;\n    return Q.resolve();\n}\n\n/**\n * Unpack archive\n *\n * @param  string  $path  archive path\n * @param  array   $arc   archiver command and arguments (same as in $this->archivers)\n **/\nfunction unpack(pth, arc) {\n    return Q.resolve();\n}\n\n/**\n * Recursive symlinks search\n *\n * @param  string  $path  file/dir path\n * @return bool\n * @author Dmitry (dio) Levashov\n **/\nfunction findSymlinks(pth) {\n    return Q.resolve();\n}\n\n/**\n * Extract files from archive\n *\n * @param  string  $path  archive path\n * @param  array   $arc   archiver command and arguments (same as in $this->archivers)\n * @return true\n **/\nfunction extract(pth, arc) {\n    return Q.resolve();\n}\n\n/**\n * Create archive and return its path\n *\n * @param  string  $dir    target dir\n * @param  array   $files  files names list\n * @param  string  $name   archive name\n * @param  array   $arc    archiver options\n * @return string|bool\n **/\nfunction _archive(dir, files, name, arc) {\n    var path = dir+pathLib.sep+name;\n    return Q.resolve(path);"],[0,"\n}\n\n"]],"start1":58,"start2":58,"length1":187,"length2":10585}]],"length":10671,"saved":false}
{"ts":1364801938555,"patch":[[{"diffs":[[0,"function"],[1,"() "],[0,"{\n    re"]],"start1":1349,"start2":1349,"length1":16,"length2":19}]],"length":10674,"saved":false}
{"ts":1364801941518,"patch":[[{"diffs":[[0,"onfigure"],[-1,"()"],[0," = funct"]],"start1":1336,"start2":1336,"length1":18,"length2":16}]],"length":10672,"saved":false}
{"ts":1364801953136,"patch":[[{"diffs":[[0,"urn string\n **/\n"],[1,"TestDriver.prototype.dirname = "],[0,"function dirname"]],"start1":1743,"start2":1743,"length1":32,"length2":63},{"diffs":[[0,"unction "],[-1,"dirname"],[0,"(path) {"]],"start1":1791,"start2":1791,"length1":23,"length2":16}]],"length":10696,"saved":false}
{"ts":1364801966562,"patch":[[{"diffs":[[0,"**/\n"],[-1,"function basename"],[1,"TestDriver.prototype.basename = function"],[0,"(pat"]],"start1":1954,"start2":1954,"length1":25,"length2":48}]],"length":10719,"saved":false}
{"ts":1364801980008,"patch":[[{"diffs":[[0,"**/\n"],[-1,"function joinPath"],[1,"TestDriver.prototype.joinPath = function"],[0,"(dir"]],"start1":2164,"start2":2164,"length1":25,"length2":48}]],"length":10742,"saved":false}
{"ts":1364801995034,"patch":[[{"diffs":[[0,"**/\n"],[-1,"function normpath"],[1,"TestDriver.prototype.normpath = function"],[0,"(pat"]],"start1":2544,"start2":2544,"length1":25,"length2":48}]],"length":10765,"saved":false}
{"ts":1364802012859,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.relpath = "],[0,"function"],[-1," relpath"],[0,"(pth"]],"start1":3708,"start2":3708,"length1":24,"length2":47}]],"length":10788,"saved":false}
{"ts":1364802020495,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.abspath = "],[0,"function"],[-1," abspath"],[0,"(pth"]],"start1":3976,"start2":3976,"length1":24,"length2":47}]],"length":10811,"saved":false}
{"ts":1364802027554,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.path = "],[0,"function"],[-1," path"],[0,"(pth"]],"start1":4235,"start2":4235,"length1":21,"length2":44}]],"length":10834,"saved":false}
{"ts":1364802034236,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.inpath = "],[0,"function"],[-1," inpath"],[0,"(pth"]],"start1":4555,"start2":4555,"length1":23,"length2":46}]],"length":10857,"saved":false}
{"ts":1364802044194,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.stat = "],[0,"function"],[-1," stat"],[0,"(pth"]],"start1":5476,"start2":5476,"length1":21,"length2":44}]],"length":10880,"saved":false}
{"ts":1364802055258,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.subdirs = "],[0,"function"],[-1," subdirs"],[0,"(pth"]],"start1":5898,"start2":5898,"length1":24,"length2":47}]],"length":10903,"saved":false}
{"ts":1364802063556,"patch":[[{"diffs":[[0,"**/\n"],[-1,"function dimensions"],[1,"TestDriver.prototype.dimensions = function"],[0,"(pth"]],"start1":6169,"start2":6169,"length1":27,"length2":50}]],"length":10926,"saved":false}
{"ts":1364802071607,"patch":[[{"diffs":[[0,"**/\n"],[-1,"function readlink"],[1,"TestDriver.prototype.readlink = function"],[0,"(pth"]],"start1":6438,"start2":6438,"length1":25,"length2":48}]],"length":10949,"saved":false}
{"ts":1364802079310,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.scandir = "],[0,"function"],[-1," scandir"],[0,"(pth"]],"start1":6603,"start2":6603,"length1":24,"length2":47}]],"length":10972,"saved":false}
{"ts":1364802119759,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.fopen = "],[0,"function"],[-1," fopen"],[0,"(pth"]],"start1":6871,"start2":6871,"length1":22,"length2":45},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.fclose = "],[0,"function"],[-1," fclose"],[0,"(fp,"]],"start1":7149,"start2":7149,"length1":23,"length2":46},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.mkdir = "],[0,"function"],[-1," mkdir"],[0,"(pth"]],"start1":7482,"start2":7482,"length1":22,"length2":45},{"diffs":[[0,"h = pth+path"],[1,"Lib"],[0,".sep.name;\n "]],"start1":7540,"start2":7540,"length1":24,"length2":27},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.mkfile = "],[0,"function"],[-1," mkfile"],[0,"(pth"]],"start1":7763,"start2":7763,"length1":23,"length2":46},{"diffs":[[0,"h = pth+path"],[1,"Lib"],[0,".sep+name;\n\n"]],"start1":7822,"start2":7822,"length1":24,"length2":27}]],"length":11070,"saved":false}
{"ts":1364802127309,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.symlink = "],[0,"function"],[-1," symlink"],[0,"(sou"]],"start1":8068,"start2":8068,"length1":24,"length2":47}]],"length":11093,"saved":false}
{"ts":1364802135810,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.copy = "],[0,"function"],[-1," copy"],[0,"(sou"]],"start1":8400,"start2":8400,"length1":21,"length2":44}]],"length":11116,"saved":false}
{"ts":1364802234576,"patch":[[{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.move = "],[0,"function"],[-1," move"],[0,"(sou"]],"start1":8722,"start2":8722,"length1":21,"length2":44},{"diffs":[[0,"Dir+path"],[1,"Lib"],[0,".sep+nam"]],"start1":8810,"start2":8810,"length1":16,"length2":19},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.unlink = "],[0,"function"],[-1," unlink"],[0,"(pth"]],"start1":8940,"start2":8940,"length1":23,"length2":46},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.rmdir = "],[0,"function"],[-1," rmdir"],[0,"(pth"]],"start1":9090,"start2":9090,"length1":22,"length2":45},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.save = "],[0,"function"],[-1," save"],[0,"(fp,"]],"start1":9483,"start2":9483,"length1":21,"length2":44},{"diffs":[[0,"**/\n"],[-1,"function getContents"],[1,"TestDriver.prototype.getContents = function"],[0,"(pth"]],"start1":9699,"start2":9699,"length1":28,"length2":51},{"diffs":[[0,"ov\n **/\n"],[-1,"function "],[1,"TestDriver.prototype."],[0,"filePutC"]],"start1":9947,"start2":9947,"length1":25,"length2":37},{"diffs":[[0,"Contents"],[1," = function"],[0,"(pth, co"]],"start1":9983,"start2":9983,"length1":16,"length2":27},{"diffs":[[0,"id\n **/\n"],[-1,"function "],[1,"TestDriver.prototype."],[0,"checkArc"]],"start1":10089,"start2":10089,"length1":25,"length2":37},{"diffs":[[0,"rchivers"],[1," = function"],[0,"() {\n\tva"]],"start1":10124,"start2":10124,"length1":16,"length2":27},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.unpack = "],[0,"function"],[-1," unpack"],[0,"(pth"]],"start1":10417,"start2":10417,"length1":23,"length2":46},{"diffs":[[0,"ov\n **/\n"],[-1,"function "],[1,"TestDriver.prototype."],[0,"findSyml"]],"start1":10621,"start2":10621,"length1":25,"length2":37},{"diffs":[[0,"Symlinks"],[1," = function"],[0,"(pth) {\n"]],"start1":10654,"start2":10654,"length1":16,"length2":27},{"diffs":[[0,"**/\n"],[1,"TestDriver.prototype.extract = "],[0,"function"],[-1," extract"],[0,"(pth"]],"start1":10888,"start2":10888,"length1":24,"length2":47},{"diffs":[[0,"**/\n"],[-1,"function _archive"],[1,"TestDriver.prototype.archive = function"],[0,"(dir"]],"start1":11206,"start2":11206,"length1":25,"length2":47}]],"length":11371,"saved":false}
{"ts":1364833176678,"patch":[[{"diffs":[[0,"ototype."],[1,"_"],[0,"dirname "]],"start1":1772,"start2":1772,"length1":16,"length2":17},{"diffs":[[0,"nction (path) {\n"],[-1,""],[0,"    return Q.res"]],"start1":1793,"start2":1793,"length1":32,"length2":32},{"diffs":[[0,"ototype."],[1,"_"],[0,"basename"]],"start1":1972,"start2":1972,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"joinPath"]],"start1":2183,"start2":2183,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"normpath"]],"start1":2564,"start2":2564,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"relpath "]],"start1":3729,"start2":3729,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"abspath "]],"start1":3998,"start2":3998,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"path = f"]],"start1":4258,"start2":4258,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"inpath ="]],"start1":4579,"start2":4579,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"stat = f"]],"start1":5501,"start2":5501,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"subdirs "]],"start1":5924,"start2":5924,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"dimensio"]],"start1":6196,"start2":6196,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"readlink"]],"start1":6466,"start2":6466,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"scandir "]],"start1":6632,"start2":6632,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"fopen = "]],"start1":6901,"start2":6901,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"fclose ="]],"start1":7180,"start2":7180,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"mkdir = "]],"start1":7514,"start2":7514,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"mkfile ="]],"start1":7796,"start2":7796,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"symlink "]],"start1":8102,"start2":8102,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"copy = f"]],"start1":8435,"start2":8435,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"move = f"]],"start1":8758,"start2":8758,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"unlink ="]],"start1":8977,"start2":8977,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"rmdir = "]],"start1":9128,"start2":9128,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"save = f"]],"start1":9522,"start2":9522,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"getConte"]],"start1":9739,"start2":9739,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"filePutC"]],"start1":9992,"start2":9992,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"checkArc"]],"start1":10135,"start2":10135,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"unpack ="]],"start1":10460,"start2":10460,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"findSyml"]],"start1":10669,"start2":10669,"length1":16,"length2":17},{"diffs":[[0,"ototype."],[1,"_"],[0,"extract "]],"start1":10933,"start2":10933,"length1":16,"length2":17},{"diffs":[[0,"tring|bool\n **/\n"],[-1,""],[0,"TestDriver.proto"]],"start1":11223,"start2":11223,"length1":32,"length2":32},{"diffs":[[0,"ototype."],[1,"_"],[0,"archive "]],"start1":11252,"start2":11252,"length1":16,"length2":17}]],"length":11401,"saved":false}
{"ts":1364833235995,"patch":[[{"diffs":[[0,"  = "],[1,"'"],[0,"0755"],[1,"'"],[0,";   "]],"start1":891,"start2":891,"length1":12,"length2":14},{"diffs":[[0,"e = "],[1,"'"],[0,"0644"],[1,"'"],[0,";   "]],"start1":953,"start2":953,"length1":12,"length2":14}]],"length":11405,"saved":false}
{"ts":1364833240375,"patch":[[{"diffs":[[0,"   = '';"],[-1,"            "],[0,"  // ali"]],"start1":813,"start2":813,"length1":28,"length2":16}]],"length":11393,"saved":false}
{"ts":1364833245384,"patch":[[{"diffs":[[0,".alias  "],[-1," "],[0,"="],[1,"  "],[0," '';  //"]],"start1":807,"start2":807,"length1":18,"length2":19}]],"length":11394,"saved":false}
{"ts":1364833254376,"patch":[[{"diffs":[[0,") {\n    "],[-1,"\t"],[0,"this.opt"]],"start1":786,"start2":786,"length1":17,"length2":16},{"diffs":[[0,"ir name\n"],[-1,"\t"],[0,"\tthis.op"]],"start1":849,"start2":849,"length1":17,"length2":16},{"diffs":[[0,"w dirs mode\n"],[-1,"\t"],[0,"\tthis.option"]],"start1":906,"start2":906,"length1":25,"length2":24},{"diffs":[[0,"es mode\n"],[-1,"\t"],[0,"\tthis.op"]],"start1":972,"start2":972,"length1":17,"length2":16},{"diffs":[[0,"hidden)\n"],[-1,"\t"],[0,"\tthis.op"]],"start1":1086,"start2":1086,"length1":17,"length2":16}]],"length":11389,"saved":false}
