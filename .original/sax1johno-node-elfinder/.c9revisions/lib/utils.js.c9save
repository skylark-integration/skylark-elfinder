{"ts":1364333858669,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1364334222385,"patch":[[{"diffs":[[1,"/**\n * A set of utilities used throughout the elfinder connector.\n **/\nvar _       =   require('underscore'),\n    path    =   require('path');\n    \nvar Utils = function() {};\n\nUtils.prototype.hashPath = function(path) {\n\n}\n\nUtils.prototype.utf8_to_b64 = function(str) {\n    return btoa(unescape(encodeURIComponent( str )));\n}\n\nUtils.prototype.\nfunction b64_to_utf8( str ) {\n    return decodeURIComponent(escape(window.atob( str )));\n}"]],"start1":0,"start2":0,"length1":0,"length2":434}]],"length":434,"saved":false}
{"ts":1364334245413,"patch":[[{"diffs":[[0,"ype."],[-1,"\nfunction "],[0,"b64_"]],"start1":339,"start2":339,"length1":18,"length2":8},{"diffs":[[0,"_to_utf8"],[-1,"("],[0," "],[1,"= function("],[0,"str"],[-1," "],[0,") {\n    "]],"start1":346,"start2":346,"length1":22,"length2":31},{"diffs":[[0,"ape("],[-1,"window."],[0,"atob"]],"start1":406,"start2":406,"length1":15,"length2":8},{"diffs":[[0,"e(atob( str )));"],[1,"    "],[0,"\n}"],[1,"\n"]],"start1":408,"start2":408,"length1":18,"length2":23}]],"length":431,"saved":false}
{"ts":1364334279434,"patch":[[{"diffs":[[0,"path) {\n\n}\n\n"],[1,"/**\n * Encode a utf8 string in base64 ascii.\n **/\n"],[0,"Utils.protot"]],"start1":212,"start2":212,"length1":24,"length2":74},{"diffs":[[0,")));\n}\n\n"],[1,"/**\n * Decodes a utf8 string from base64 ascii.\n **/\n"],[0,"Utils.pr"]],"start1":369,"start2":369,"length1":16,"length2":69}]],"length":534,"saved":false}
{"ts":1364334296354,"patch":[[{"diffs":[[0,"ype."],[-1,"utf8_to_b64"],[1,"encode"],[0," = f"]],"start1":286,"start2":286,"length1":19,"length2":14},{"diffs":[[0,"ype."],[-1,"b64_to_utf8"],[1,"decode"],[0," = f"]],"start1":437,"start2":437,"length1":19,"length2":14}]],"length":524,"saved":false}
{"ts":1364334302039,"patch":[[{"diffs":[[0,"path) {\n"],[1,"    "],[0,"\n}\n\n/**\n"]],"start1":212,"start2":212,"length1":16,"length2":20}]],"length":528,"saved":false}
{"ts":1364334370459,"patch":[[{"diffs":[[0,") {\n    "],[1,"Utils.encode(path);"],[0,"\n}\n\n/**\n"]],"start1":216,"start2":216,"length1":16,"length2":35}]],"length":547,"saved":false}
{"ts":1364334372893,"patch":[[{"diffs":[[0,") {\n    "],[1,"return "],[0,"Utils.en"]],"start1":216,"start2":216,"length1":16,"length2":23}]],"length":554,"saved":false}
{"ts":1364334417772,"patch":[[{"diffs":[[0,"() {};\n\n"],[1,"/** \n * Create a hash of the path, which will be sent to the client.\n * Path hashes should be repeatable and decodeable by the client.\n **/\n"],[0,"Utils.pr"]],"start1":168,"start2":168,"length1":16,"length2":156}]],"length":694,"saved":false}
{"ts":1364334425254,"patch":[[{"diffs":[[0,"d decode"],[1,"-"],[0,"able by "]],"start1":283,"start2":283,"length1":16,"length2":17}]],"length":695,"saved":false}
{"ts":1364334454119,"patch":[[{"diffs":[[0,"client.\n"],[1," * The also must have the ability to be an HTML ID, so base64 is used.\n"],[0," **/\nUti"]],"start1":304,"start2":304,"length1":16,"length2":87}]],"length":766,"saved":false}
