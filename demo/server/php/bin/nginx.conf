# ワーカープロ説を実行するユーザーの指定
#user  nobody;

# ワーカープロセス（クライアントからリクエストを受け付けて処理するnginxの子プロセス）の数
worker_processes  1;

# プロセスIDを保存するファイルの場所
#pid        logs/nginx.pid;

events {
    # 1ワーカープロセスあたりの最大コネクション数のあたし
    worker_connections  1024;
}

http {
    #### MIMEタイプの設定
    include       mime.types; #拡張子とMIMEタイプの対応ファイルを読み込む
    default_type  application/octet-stream; #拡張子からMIMEタイプを判断できなかった場合のMIMEタイプ

    #### アクセスログの設定
    # アクセスログの書式の設定、main形式を下記の形式で指定
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # アクセスログの出力場所や書式の指定、main形式でlogs/access.logに出力する
    #access_log  logs/access.log  main;

    #### クライアントへの送信（レスポンス）に関する設定
    # クライアントへの送信にsendfileシステムコールを使うか
    sendfile        on;
    # LinuxのTCP_CORKソケットオプションを使用するか
    #tcp_nopush     on;

    # keepaliveのタイムアウト時間の設定、65秒
    keepalive_timeout  65;

    # クライアントにコンテンツを送信する際に圧縮転送するかどうかの設定
    #gzip  on;

    #### バーチャルサーバーの設定
    server {
        #### サーバーの基本設定
        # リクエストを受け付けるIPアドレスやポート番号を設定
        listen       8070;
        # バーチャルサーバーのホスト名を設定
        server_name  localhost;
        location / {
            # rootドキュメントを指定、windowsでも「\」ではなく「/」でディレクトリ階層を指定
            root  C:/Studio/studio2/stacks/htdocs/;
            # indexファイル名を設定、
            # URLが「/」で終わってるものに対してインデックスとして使われるファイル名の指定
            index  index.php index.html index.htm;  #前から順番に適用される
        }
    
        #### サーバー別のログの設定
        # アクセスログの出力先と出力形式の設定、main形式で出力
        access_log  logs/access.log  main;
        # エラーログの出力先とロギングレベルの設定、noticeレベルまで出力
        error_log  logs/error.log  notice;

        #### エラーページの設定
        #error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html; #エラーページのパスを設定
        location = /50x.html { #「/50x.html」にパスが完全一致、一致したら切り上げ
            root   html;
        }


        #/kdict/
        rewrite ^(/kdict/)_media/(.*) $1lib/exe/fetch.php?media=$2 last;
        rewrite ^(/kdict/)_detail/(.*) $1lib/exe/detail.php?media=$2 last;
        rewrite ^(/kdict/)_export/([^/]+)/(.*) $1doku.php?do=export_$2&id=$3 last;

        location /kdict/ {
            if (!-f $request_filename) {
                rewrite ^(/kdict/)(.*)?(.*)  $1doku.php?id=$2&$3 last;
                rewrite ^(/kdict/)$ $1doku.php last;
            }
        }        

        #### PHPの設定
        # 正規表現、パスが「xxxx.php」や「aaa/xxxx.php」や「abc/xxxx.php/bbbb」などに一致
        location ~ [^/]\.php(/|$) {
             root  C:/Studio/studio2/stacks/htdocs/;

           # $fastcgi_path_info の値をキャプチャする正規表現を定義
            # 一つ目の()が $fastcgi_script_name の値になり、二つ目は $fastcgi_path_info の値になる
 
            fastcgi_split_path_info ^(.+?\.php)(/.*)$;

            # $document_root ルートディレクトリで設定したパス
            # $fastcgi_script_name ファイル名のパス
            # -f はファイルが存在するかの判定
            # ファイルがなければ404エラーを返す
            if (!-f $document_root$fastcgi_script_name) {
                return 404;
            }

            # phpへアクセスするためのIPアドレスとポートの設定
            fastcgi_pass   127.0.0.1:9000;
            # phpでのindexファイル名を設定、
            # URLが「/」で終わってるものに対してインデックスとして使われるファイル名の指定
            fastcgi_index  index.php;

            #### fastcgi_param に関する設定
            # 多数のfastcgi_paramsの設定が書いてあるfastcgi_paramsファイルを読み込む
            include        fastcgi_params;
            # 「HTTP_PROXY」パラメータを空にする、HTTPoxyに関する脆弱性を和らげる
            fastcgi_param  HTTP_PROXY "";
            # 「SCRIPT_FILENAME」パラメータはphp-fpmがスクリプト名を決定するための設定
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        }
    }
}