{"version":3,"sources":["commands/mkfile.js"],"names":["define","elFinder","prototype","commands","mkfile","self","this","disableOnSearch","updateOnSelect","mime","prefix","variants","getTypeName","type","name","fm","messages","kinds","i18n","toUpperCase","bind","hides","getCommand","getMkfileHides","mimesCanMakeEmpty","$","each","uploadMimeCheck","push","change","getstate","cwd","write","exec","_dum","err","proxy","res","Deferred","reject"],"mappings":";;;;;;;AAAAA,QACC,eACC,SAASC,GA2DV,OApDAA,EAASC,UAAUC,SAASC,OAAS,WACpC,aACA,IAAIC,EAAOC,KAEXA,KAAKC,iBAAkB,EACvBD,KAAKE,gBAAkB,EACvBF,KAAKG,KAAkB,aACvBH,KAAKI,OAAkB,oBACvBJ,KAAKK,YAELL,KAAKM,YAAc,SAASH,EAAMI,GACjC,IACCC,EADGC,EAAKV,EAAKU,GAOd,OAJCD,GADGA,EAAOC,EAAGC,SAAS,OAASD,EAAGE,MAAMR,KACjCM,EAAGG,MAAM,gBAAiBL,EAAKM,cAAeL,IAE9CC,EAAGG,MAAM,gBAAiBL,EAAKM,iBAKxCb,KAAKS,GAAGK,KAAK,+BAAgC,WAC5C,IAAIL,EAAKV,EAAKU,GACbM,EAAQN,EAAGO,WAAW,QAAQC,iBAC/BlB,EAAKM,YACDI,EAAGS,mBACNC,EAAEC,KAAKX,EAAGS,kBAAmB,SAASf,EAAMI,GAC3CA,IAASQ,EAAMZ,IAASM,EAAGY,gBAAgBlB,IAASJ,EAAKM,SAASiB,MAAMnB,EAAMJ,EAAKO,YAAYH,EAAMI,OAGvGR,EAAKwB,WAGNvB,KAAKwB,SAAW,WACf,OAAOxB,KAAKS,GAAGgB,MAAMC,MAAQ,GAAK,GAGnC1B,KAAK2B,KAAO,SAASC,EAAMzB,GAC1B,IACCI,EAAMsB,EADHpB,EAAKV,EAAKU,GAEd,GAAIF,EAAOE,EAAGS,kBAAkBf,GAAO,CACtC,GAAIM,EAAGY,gBAAgBlB,GAGtB,OAFAH,KAAKG,KAAOA,EACZH,KAAKI,OAASK,EAAGG,MAAM,gBAAiBL,IACjCY,EAAEW,MAAMrB,EAAGsB,IAAI,QAAS,QAAShC,EAAjCoB,GAERU,GAAO,YAAa9B,EAAKO,YAAYH,EAAMI,IAE5C,OAAOY,EAAEa,WAAWC,OAAOJ,KAItBlC","file":"../../commands/mkfile.js","sourcesContent":["define([\n\t\"../elFinder\"\n],function(elFinder){\n\t/**\n\t * @class  elFinder command \"mkfile\"\n\t * Create new empty file\n\t *\n\t * @author Dmitry (dio) Levashov\n\t **/\n\telFinder.prototype.commands.mkfile = function() {\n\t\t\"use strict\";\n\t\tvar self = this;\n\n\t\tthis.disableOnSearch = true;\n\t\tthis.updateOnSelect  = false;\n\t\tthis.mime            = 'text/plain';\n\t\tthis.prefix          = 'untitled file.txt';\n\t\tthis.variants        = [];\n\n\t\tthis.getTypeName = function(mime, type) {\n\t\t\tvar fm = self.fm,\n\t\t\t\tname;\n\t\t\tif (name = fm.messages['kind' + fm.kinds[mime]]) {\n\t\t\t\tname = fm.i18n(['extentiontype', type.toUpperCase(), name]);\n\t\t\t} else {\n\t\t\t\tname = fm.i18n(['extentionfile', type.toUpperCase()]);\n\t\t\t}\n\t\t\treturn name;\n\t\t};\n\n\t\tthis.fm.bind('open reload canMakeEmptyFile', function() {\n\t\t\tvar fm = self.fm,\n\t\t\t\thides = fm.getCommand('edit').getMkfileHides();\n\t\t\tself.variants = [];\n\t\t\tif (fm.mimesCanMakeEmpty) {\n\t\t\t\t$.each(fm.mimesCanMakeEmpty, function(mime, type) {\n\t\t\t\t\ttype && !hides[mime] && fm.uploadMimeCheck(mime) && self.variants.push([mime, self.getTypeName(mime, type)]);\n\t\t\t\t});\n\t\t\t}\n\t\t\tself.change();\n\t\t});\n\n\t\tthis.getstate = function() {\n\t\t\treturn this.fm.cwd().write ? 0 : -1;\n\t\t};\n\n\t\tthis.exec = function(_dum, mime) {\n\t\t\tvar fm = self.fm,\n\t\t\t\ttype, err;\n\t\t\tif (type = fm.mimesCanMakeEmpty[mime]) {\n\t\t\t\tif (fm.uploadMimeCheck(mime)) {\n\t\t\t\t\tthis.mime = mime;\n\t\t\t\t\tthis.prefix = fm.i18n(['untitled file', type]);\n\t\t\t\t\treturn $.proxy(fm.res('mixin', 'make'), self)();\n\t\t\t\t}\n\t\t\t\terr = ['errMkfile', self.getTypeName(mime, type)];\n\t\t\t}\n\t\t\treturn $.Deferred().reject(err);\n\t\t};\n\t};\n\n\treturn elFinder;\n\n});"]}