{"version":3,"sources":["commands/restore.js"],"names":["define","elFinder","prototype","commands","restore","self","this","fm","fakeCnt","getFilesRecursively","files","getFile","dfd","$","Deferred","dirs","results","reqs","phashes","_xhrReject","each","reject","i","f","mime","push","length","d","request","data","cmd","target","hash","preventDefault","asNotOpen","when","apply","fail","done","items","arguments","r","concat","phash","name","ts","cache","res","resolve","dfrd","targets","ops","tm","rHashes","others","found","opts","id","Date","lockfiles","map","exec","forceRm","quiet","always","unlockfiles","setTimeout","notify","type","cnt","hideCnt","cancel","notifyDelay","clearTimeout","errFolderNotfound","dirTop","pfile","srcRoot","tPath","trashes","path","substr","replace","updateCache","removed","file","ph","filePath","volumeid","indexOf","src","dsts","Object","keys","preventFail","error","hashes","getCommand","one","hasErr","dir","clipboard","_cmd","noToast","warning","linkedCmds","updateOnSelect","init","getstate","sel","e","selected","grep","h","locked","isRoot","state","forceLoad"],"mappings":"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","file":"../../commands/restore.js","sourcesContent":["define([\n\t\"../elFinder\"\n],function(elFinder){\n\t\t/**\n\t\t * @class  elFinder command \"restore\"\n\t\t * Restore items from the trash\n\t\t *\n\t\t * @author Naoki Sawada\n\t\t **/\n\t\t(elFinder.prototype.commands.restore = function() {\n\t\t\t\"use strict\";\n\t\t\tvar self = this,\n\t\t\t\tfm = this.fm,\n\t\t\t\tfakeCnt = 0,\n\t\t\t\tgetFilesRecursively = function(files) {\n\t\t\t\t\tvar dfd = $.Deferred(),\n\t\t\t\t\t\tdirs = [],\n\t\t\t\t\t\tresults = [],\n\t\t\t\t\t\treqs = [],\n\t\t\t\t\t\tphashes = [],\n\t\t\t\t\t\tgetFile;\n\t\t\t\t\t\n\t\t\t\t\tdfd._xhrReject = function() {\n\t\t\t\t\t\t$.each(reqs, function() {\n\t\t\t\t\t\t\tthis && this.reject && this.reject();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tgetFile && getFile._xhrReject();\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t$.each(files, function(i, f) {\n\t\t\t\t\t\tf.mime === 'directory'? dirs.push(f) : results.push(f);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif (dirs.length) {\n\t\t\t\t\t\t$.each(dirs, function(i, d) {\n\t\t\t\t\t\t\treqs.push(fm.request({\n\t\t\t\t\t\t\t\tdata : {cmd  : 'open', target : d.hash},\n\t\t\t\t\t\t\t\tpreventDefault : true,\n\t\t\t\t\t\t\t\tasNotOpen : true\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tphashes[i] = d.hash;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t$.when.apply($, reqs).fail(function() {\n\t\t\t\t\t\t\tdfd.reject();\n\t\t\t\t\t\t}).done(function() {\n\t\t\t\t\t\t\tvar items = [];\n\t\t\t\t\t\t\t$.each(arguments, function(i, r) {\n\t\t\t\t\t\t\t\tvar files;\n\t\t\t\t\t\t\t\tif (r.files) {\n\t\t\t\t\t\t\t\t\tif (r.files.length) {\n\t\t\t\t\t\t\t\t\t\titems = items.concat(r.files);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\titems.push({\n\t\t\t\t\t\t\t\t\t\t\thash: 'fakefile_' + (fakeCnt++),\n\t\t\t\t\t\t\t\t\t\t\tphash: phashes[i],\n\t\t\t\t\t\t\t\t\t\t\tmime: 'fakefile',\n\t\t\t\t\t\t\t\t\t\t\tname: 'fakefile',\n\t\t\t\t\t\t\t\t\t\t\tts: 0\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tfm.cache(items);\n\t\t\t\t\t\t\tgetFile = getFilesRecursively(items).done(function(res) {\n\t\t\t\t\t\t\t\tresults = results.concat(res);\n\t\t\t\t\t\t\t\tdfd.resolve(results);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdfd.resolve(results);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn dfd;\n\t\t\t\t},\n\t\t\t\trestore = function(dfrd, files, targets, ops) {\n\t\t\t\t\tvar rHashes = {},\n\t\t\t\t\t\tothers = [],\n\t\t\t\t\t\tfound = false,\n\t\t\t\t\t\tdirs = [],\n\t\t\t\t\t\topts = ops || {},\n\t\t\t\t\t\tid = +new Date(),\n\t\t\t\t\t\ttm, getFile;\n\t\t\t\t\t\n\t\t\t\t\tfm.lockfiles({files : targets});\n\t\t\t\t\t\n\t\t\t\t\tdirs = $.map(files, function(f) {\n\t\t\t\t\t\treturn f.mime === 'directory'? f.hash : null;\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tdfrd.done(function() {\n\t\t\t\t\t\tdirs && fm.exec('rm', dirs, {forceRm : true, quiet : true});\n\t\t\t\t\t}).always(function() {\n\t\t\t\t\t\tfm.unlockfiles({files : targets});\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\ttm = setTimeout(function() {\n\t\t\t\t\t\tfm.notify({type : 'search', id : id, cnt : 1, hideCnt : true, cancel : function() {\n\t\t\t\t\t\t\tgetFile && getFile._xhrReject();\n\t\t\t\t\t\t\tdfrd.reject();\n\t\t\t\t\t\t}});\n\t\t\t\t\t}, fm.notifyDelay);\n\n\t\t\t\t\tfakeCnt = 0;\n\t\t\t\t\tgetFile = getFilesRecursively(files).always(function() {\n\t\t\t\t\t\ttm && clearTimeout(tm);\n\t\t\t\t\t\tfm.notify({type : 'search', id: id, cnt : -1, hideCnt : true});\n\t\t\t\t\t}).fail(function() {\n\t\t\t\t\t\tdfrd.reject('errRestore', 'errFileNotFound');\n\t\t\t\t\t}).done(function(res) {\n\t\t\t\t\t\tvar errFolderNotfound = ['errRestore', 'errFolderNotFound'],\n\t\t\t\t\t\t\tdirTop = '';\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (res.length) {\n\t\t\t\t\t\t\t$.each(res, function(i, f) {\n\t\t\t\t\t\t\t\tvar phash = f.phash,\n\t\t\t\t\t\t\t\t\tpfile,\n\t\t\t\t\t\t\t\t\tsrcRoot, tPath;\n\t\t\t\t\t\t\t\twhile(phash) {\n\t\t\t\t\t\t\t\t\tif (srcRoot = fm.trashes[phash]) {\n\t\t\t\t\t\t\t\t\t\tif (! rHashes[srcRoot]) {\n\t\t\t\t\t\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Keep items of other trash\n\t\t\t\t\t\t\t\t\t\t\t\tothers.push(f.hash);\n\t\t\t\t\t\t\t\t\t\t\t\treturn null; // continue $.each\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\trHashes[srcRoot] = {};\n\t\t\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\ttPath = fm.path(f.hash).substr(fm.path(phash).length).replace(/\\\\/g, '/');\n\t\t\t\t\t\t\t\t\t\ttPath = tPath.replace(/\\/[^\\/]+?$/, '');\n\t\t\t\t\t\t\t\t\t\tif (tPath === '') {\n\t\t\t\t\t\t\t\t\t\t\ttPath = '/';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!rHashes[srcRoot][tPath]) {\n\t\t\t\t\t\t\t\t\t\t\trHashes[srcRoot][tPath] = [];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (f.mime === 'fakefile') {\n\t\t\t\t\t\t\t\t\t\t\tfm.updateCache({removed:[f.hash]});\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\trHashes[srcRoot][tPath].push(f.hash);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (!dirTop || dirTop.length > tPath.length) {\n\t\t\t\t\t\t\t\t\t\t\tdirTop = tPath;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Go up one level for next check\n\t\t\t\t\t\t\t\t\tpfile = fm.file(phash);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!pfile) {\n\t\t\t\t\t\t\t\t\t\tphash = false;\n\t\t\t\t\t\t\t\t\t\t// Detection method for search results\n\t\t\t\t\t\t\t\t\t\t$.each(fm.trashes, function(ph) {\n\t\t\t\t\t\t\t\t\t\t\tvar file = fm.file(ph),\n\t\t\t\t\t\t\t\t\t\t\t\tfilePath = fm.path(ph);\n\t\t\t\t\t\t\t\t\t\t\tif ((!file.volumeid || f.hash.indexOf(file.volumeid) === 0) && fm.path(f.hash).indexOf(filePath) === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tphash = ph;\n\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tphash = pfile.phash;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (found) {\n\t\t\t\t\t\t\t\t$.each(rHashes, function(src, dsts) {\n\t\t\t\t\t\t\t\t\tvar dirs = Object.keys(dsts),\n\t\t\t\t\t\t\t\t\t\tcnt = dirs.length;\n\t\t\t\t\t\t\t\t\tfm.request({\n\t\t\t\t\t\t\t\t\t\tdata   : {cmd  : 'mkdir', target : src, dirs : dirs}, \n\t\t\t\t\t\t\t\t\t\tnotify : {type : 'chkdir', cnt : cnt},\n\t\t\t\t\t\t\t\t\t\tpreventFail : true\n\t\t\t\t\t\t\t\t\t}).fail(function(error) {\n\t\t\t\t\t\t\t\t\t\tdfrd.reject(error);\n\t\t\t\t\t\t\t\t\t\tfm.unlockfiles({files : targets});\n\t\t\t\t\t\t\t\t\t}).done(function(data) {\n\t\t\t\t\t\t\t\t\t\tvar cmdPaste, hashes;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (hashes = data.hashes) {\n\t\t\t\t\t\t\t\t\t\t\tcmdPaste = fm.getCommand('paste');\n\t\t\t\t\t\t\t\t\t\t\tif (cmdPaste) {\n\t\t\t\t\t\t\t\t\t\t\t\t// wait until file cache made\n\t\t\t\t\t\t\t\t\t\t\t\tfm.one('mkdirdone', function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar hasErr = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t$.each(dsts, function(dir, files) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hashes[dir]) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (files.length) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (fm.file(hashes[dir])) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfm.clipboard(files, true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfm.exec('paste', [ hashes[dir] ], {_cmd : 'restore', noToast : (opts.noToast || dir !== dirTop)})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.done(function(data) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (data && (data.error || data.warning)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thasErr = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.fail(function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thasErr = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.always(function() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (--cnt < 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdfrd[hasErr? 'reject' : 'resolve']();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (others.length) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Restore items of other trash\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfm.exec('restore', others);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdfrd.reject(errFolderNotfound);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (--cnt < 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdfrd.resolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (others.length) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Restore items of other trash\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfm.exec('restore', others);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tdfrd.reject(['errRestore', 'errCmdNoSupport', '(paste)']);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tdfrd.reject(errFolderNotfound);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdfrd.reject(errFolderNotfound);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdfrd.reject('errFileNotFound');\n\t\t\t\t\t\t\tdirs && fm.exec('rm', dirs, {forceRm : true, quiet : true});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\n\t\t\t// for to be able to overwrite\n\t\t\tthis.restore = restore;\n\n\t\t\tthis.linkedCmds = ['copy', 'paste', 'mkdir', 'rm'];\n\t\t\tthis.updateOnSelect = false;\n\t\t\t\n\t\t\tthis.init = function() {\n\t\t\t\t// re-assign for extended command\n\t\t\t\tself = this;\n\t\t\t\tfm = this.fm;\n\t\t\t};\n\n\t\t\tthis.getstate = function(sel, e) {\n\t\t\t\tsel = sel || fm.selected();\n\t\t\t\treturn sel.length && $.grep(sel, function(h) {var f = fm.file(h); return f && ! f.locked && ! fm.isRoot(f)? true : false; }).length == sel.length\n\t\t\t\t\t? 0 : -1;\n\t\t\t};\n\t\t\t\n\t\t\tthis.exec = function(hashes, opts) {\n\t\t\t\tvar dfrd   = $.Deferred()\n\t\t\t\t\t\t.fail(function(error) {\n\t\t\t\t\t\t\terror && fm.error(error);\n\t\t\t\t\t\t}),\n\t\t\t\t\tfiles  = self.files(hashes);\n\n\t\t\t\tif (! files.length) {\n\t\t\t\t\treturn dfrd.reject();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$.each(files, function(i, file) {\n\t\t\t\t\tif (fm.isRoot(file)) {\n\t\t\t\t\t\treturn !dfrd.reject(['errRestore', file.name]);\n\t\t\t\t\t}\n\t\t\t\t\tif (file.locked) {\n\t\t\t\t\t\treturn !dfrd.reject(['errLocked', file.name]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (dfrd.state() === 'pending') {\n\t\t\t\t\tthis.restore(dfrd, files, hashes, opts);\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\treturn dfrd;\n\t\t\t};\n\n\t\t}).prototype = { forceLoad : true }; // this is required command\n\n\treturn elFinder;\n\n});"]}