{"version":3,"sources":["worker/calcfilehash.js"],"names":["type","self","data","bin","hashOpts","res","sp","SparkMD5","ArrayBuffer","append","hash","end","sha","jsSHA","length","toUpperCase","opts","shakeLen","shake128len","shake256len","update","getHash"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,KAAKC,KAAKF,KACpBG,IAAMF,KAAKC,KAAKC,IAChBC,SAAWH,KAAKC,KAAKE,SAGtB,GADAH,KAAKI,OACQ,QAATL,KAAgB,CACnB,IAAIM,EAAK,IAAIL,KAAKM,SAASC,YAC3BF,EAAGG,OAAON,KACVF,KAAKI,IAAIK,KAAOJ,EAAGK,UACb,CACN,IAAIC,EAAM,IAAIC,MAAM,OAAyB,IAAhBb,KAAKc,OAAcd,KAAQ,IAAMA,MAAOe,cAAe,eACnFC,KACY,UAAThB,KACHgB,EAAKC,SAAWb,SAASc,YACN,UAATlB,OACVgB,EAAKC,SAAWb,SAASe,aAE1BP,EAAIQ,OAAOjB,KACXF,KAAKI,IAAIK,KAAOE,EAAIS,QAAQ,MAAOL","file":"../../worker/calcfilehash.js","sourcesContent":["var type = self.data.type,\n\tbin = self.data.bin,\n\thashOpts = self.data.hashOpts;\n\nself.res = {};\nif (type === 'md5') {\n\tlet sp = new self.SparkMD5.ArrayBuffer();\n\tsp.append(bin);\n\tself.res.hash = sp.end();\n} else {\n\tlet sha = new jsSHA('SHA' + (type.length === 5? type : ('-' + type)).toUpperCase(), 'ARRAYBUFFER'),\n\t\topts = {};\n\tif (type === 'ke128') {\n\t\topts.shakeLen = hashOpts.shake128len;\n\t} else if (type === 'ke256') {\n\t\topts.shakeLen = hashOpts.shake256len;\n\t}\n\tsha.update(bin);\n\tself.res.hash = sha.getHash('HEX', opts);\n}\n"]}