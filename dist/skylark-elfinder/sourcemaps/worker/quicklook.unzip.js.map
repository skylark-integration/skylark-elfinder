{"version":3,"sources":["worker/quicklook.unzip.js"],"names":["type","self","data","bin","unzipFiles","i","il","fileHeaderList","filenameList","this","Y","length","filename","J","tarFiles","tar","h","name","prefix","size","dbs","filenames","tarlen","offset","toStr","arr","String","fromCharCode","apply","replace","subarray","parseInt","Math","ceil","push","res","files","Uint8Array","call","Zlib","Unzip","Gunzip","decompress","bzip2","simple","array"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,KAAKC,KAAKF,KACpBG,IAAMF,KAAKC,KAAKC,IAChBC,WAAa,WAEZ,IAEIC,EAEAC,EAEAC,EANAC,KAUJ,IAFAC,KAAKC,IAEAL,EAAI,EAAGC,GADZC,EAAiBE,KAAKJ,GACUM,OAAQN,EAAIC,IAAMD,EAEjDG,EAAaH,GAAKE,EAAeF,GAAGO,UAAYL,EAAeF,GAAGQ,EAAG,iBAAmBN,EAAeF,GAAGQ,EAAI,MAAQ,IAEvH,OAAOL,GAERM,SAAW,SAASC,GAQnB,IAPA,IAMCC,EAAGC,EAAMC,EAAQC,EAAMC,EANpBC,KACHC,EAASP,EAAIJ,OACbY,EAAS,EACTC,EAAQ,SAASC,GAChB,OAAOC,OAAOC,aAAaC,MAAM,KAAMH,GAAKI,QAAQ,OAAQ,KAGvDN,EAASD,GAA0B,IAAhBP,EAAIQ,IAE7BN,EAAOO,GADPR,EAAID,EAAIe,SAASP,EAAQA,EAAS,MACnBO,SAAS,EAAG,OACvBZ,EAASM,EAAMR,EAAEc,SAAS,IAAK,SAClCb,EAAOC,EAASD,GAEjBE,EAAOY,SAASP,EAAMR,EAAEc,SAAS,IAAK,MAAO,GAC7CV,EAA8B,IAAxBY,KAAKC,KAAKd,EAAO,KACV,kBAATF,IACHA,EAAOO,EAAMT,EAAIe,SAASP,EAAS,IAAKA,EAAS,IAAMH,KAE9C,sBAATH,GAAiCI,EAAUa,KAAKjB,GAAQE,EAAM,iBAAmBA,EAAO,MAAO,KAChGI,EAASA,EAAS,IAAMH,EAEzB,OAAOC,GAGTpB,KAAKkC,OACQ,QAATnC,KACHC,KAAKkC,IAAIC,MAAQtB,SAAS,IAAIuB,WAAWlC,MACtB,QAATH,KACVC,KAAKkC,IAAIC,MAAQhC,WAAWkC,KAAK,IAAIC,KAAKC,MAAM,IAAIH,WAAWlC,OAC5C,SAATH,KACVC,KAAKkC,IAAIC,MAAQtB,SAAS,IAAKyB,KAAKE,OAAO,IAAIJ,WAAWlC,MAAOuC,cAC9C,UAAT1C,OACVC,KAAKkC,IAAIC,MAAQtB,SAASb,KAAK0C,MAAMC,OAAO3C,KAAK0C,MAAME,MAAM,IAAIR,WAAWlC","file":"../../worker/quicklook.unzip.js","sourcesContent":["var type = self.data.type,\n\tbin = self.data.bin,\n\tunzipFiles = function() {\n\t\t/** @type {Array.<string>} */\n\t\tvar filenameList = [];\n\t\t/** @type {number} */\n\t\tvar i;\n\t\t/** @type {number} */\n\t\tvar il;\n\t\t/** @type {Array.<Zlib.Unzip.FileHeader>} */\n\t\tvar fileHeaderList;\n\t\t// need check this.Y when update cdns.zlibUnzip\n\t\tthis.Y();\n\t\tfileHeaderList = this.i;\n\t\tfor (i = 0, il = fileHeaderList.length; i < il; ++i) {\n\t\t\t// need check fileHeaderList[i].J when update cdns.zlibUnzip\n\t\t\tfilenameList[i] = fileHeaderList[i].filename + (fileHeaderList[i].J? ' ({formatSize(' + fileHeaderList[i].J + ')})' : '');\n\t\t}\n\t\treturn filenameList;\n\t},\n\ttarFiles = function(tar) {\n\t\tvar filenames = [],\n\t\t\ttarlen = tar.length,\n\t\t\toffset = 0,\n\t\t\ttoStr = function(arr) {\n\t\t\t\treturn String.fromCharCode.apply(null, arr).replace(/\\0+$/, '');\n\t\t\t},\n\t\t\th, name, prefix, size, dbs;\n\t\twhile (offset < tarlen && tar[offset] !== 0) {\n\t\t\th = tar.subarray(offset, offset + 512);\n\t\t\tname = toStr(h.subarray(0, 100));\n\t\t\tif (prefix = toStr(h.subarray(345, 500))) {\n\t\t\t\tname = prefix + name;\n\t\t\t}\n\t\t\tsize = parseInt(toStr(h.subarray(124, 136)), 8);\n\t\t\tdbs = Math.ceil(size / 512) * 512;\n\t\t\tif (name === '././@LongLink') {\n\t\t\t\tname = toStr(tar.subarray(offset + 512, offset + 512 + dbs));\n\t\t\t}\n\t\t\t(name !== 'pax_global_header') && filenames.push(name + (size? ' ({formatSize(' + size + ')})': ''));\n\t\t\toffset = offset + 512 + dbs;\n\t\t}\n\t\treturn filenames;\n\t};\n\nself.res = {};\nif (type === 'tar') {\n\tself.res.files = tarFiles(new Uint8Array(bin));\n} else if (type === 'zip') {\n\tself.res.files = unzipFiles.call(new Zlib.Unzip(new Uint8Array(bin)));\n} else if (type === 'gzip') {\n\tself.res.files = tarFiles((new Zlib.Gunzip(new Uint8Array(bin))).decompress());\n} else if (type === 'bzip2') {\n\tself.res.files = tarFiles(self.bzip2.simple(self.bzip2.array(new Uint8Array(bin))));\n}\n"]}